<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>双节</title>
      <link href="2020/10/05/2020-mid/"/>
      <url>2020/10/05/2020-mid/</url>
      
        <content type="html"><![CDATA[<p>2020已经过去大半，中秋和国庆难得的照了个面，但是我没回去。今年春节没回去，国庆也没回<br>去，待我点跟华子来扯扯。</p><a id="more"></a><p>最近又破了两项纪录，第一次抽烟，第一次去酒吧。</p><p>秋天的第一杯奶茶你喝了吗？华子它不香吗？酒吧，太吵，酒的后劲太大，以后还是算了吧。</p><p>今晚看了一眼支出的转账账单，这将近一年的时间里，已转出28万多了，距离2021年还有两个月，突破30万简直不能太轻松。这一圈下来把老底都掀了，毕业这几年怎么不努力赚钱！！</p><p>今年好累，心累，身体也累，本来打算提辞职了好好休息一段时间，然后好好准备年底冲刺一下大厂，现在打算放弃这个计划了，之前提到的遗憾里边就这条还没完成，本来想一鼓作气今年再突破一下，再创一个记录，目前来看只能搁浅了。</p><p>12月份预计还有5万多的支出，所以收入不能断，扛起该杠的东西，加油吧，奥利给。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三年</title>
      <link href="2020/07/01/three-year-job-review/"/>
      <url>2020/07/01/three-year-job-review/</url>
      
        <content type="html"><![CDATA[<p>亲爱的XXX，今天是值得纪念的日子，很高兴有您一路同行。</p><p>早上收到了一封邮件，是的，入职满三年了，一晃当了三年社畜。</p><a id="more"></a><p>2020年上半年已经过完，下半年已经拉开序幕，这半年都干了啥？</p><p>最突出的问题，钱到用时方恨少，看了下支付宝统计，从去年12月份开始到现在，因为疫情的原因，没回过一次家，支付宝转账了19万多，这些钱基本上都用来装修了，太烧钱了。</p><p>去年年终总结的时候说自己突破了很多的第一次，有点遗憾的就是没当过面试官和在大厂工作过，这半年里也突破了很多第一次，也当过面试官，今天还电话面试了个小伙，算下来工作上就剩下一个遗憾了，啥时候能弥补啊！</p><p>细数了下，上半年也有不少第一次，第一次深夜发高烧39度一个人在医院打点滴，第一次过年不回家，第一次远程工作，第一次当主管，第一次当面试官，第一次上班带饭。</p><p>回顾这三年，总结出来这几点，希望以后自己能好好注意。</p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><ol><li><p>健康才是最重要的！！身体以及心理同样重要！！</p></li><li><p>运动很重要，如果没时间系统地锻炼，在工作的时候要多喝水多走动，如果你不想年纪轻轻就半身不遂的话，好好保护颈椎！</p></li><li><p>钱很重要，一定要养成储蓄的习惯，因为未来有大把需要用到钱的时候，当意外发生时不至于饿死。</p></li><li><p>良好的生活习惯很重要，按时吃饭，不要熬夜，照顾情绪。</p></li><li><p>不是所有的社交都是必须的，不必照顾每个人的想法，但是一定！远离负能量的人！接近优秀会发光的人！</p></li><li><p>凡是做任何决定，遵从自己的内心，开心就好，别留遗憾，但承担随之而来的责任。</p></li></ol><h2 id="工作中"><a href="#工作中" class="headerlink" title="工作中"></a>工作中</h2><ol><li><p>永远学习，提高自己的核心竞争力才是职场里生存的王道。</p></li><li><p>不要把负面情绪写在脸上，你的上司能感觉到；更不要直接拒绝上级交代给你的“本职外的工作”。</p></li><li><p>在职场务必注意自己的一言一行，因为每个人都会对你的表现打分，而成绩会直接决定你未来在公司道路的曲折与否。</p></li><li><p>适当的表现会让领导更快地记住你，还有，会哭的孩子有奶喝是大多数职场的现状。</p></li><li><p>有意识的训练自己公众表达能力，越往后这种能力越重要。</p></li><li><p>学会营销自己，打造自己的IP。</p></li></ol><h2 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h2><ol><li><p>打算考个证，虽然IT行业对证书不是很感冒，但是招标的时候需要有项目经理资质，挂靠给一些公司可以赚钱，主要是体系化自己的项目管理能力。这个证书对国企比较有用，万一以后35岁被优化了还可以靠个证来过后半生。</p></li><li><p>跳槽大厂，薪资翻倍。最近在招人，为了面试别人也在整理面试知识，还是希望能够更加的深入一些。</p></li><li><p>一周至少锻炼一次。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>江湖再见</title>
      <link href="2020/06/05/first-leader/"/>
      <url>2020/06/05/first-leader/</url>
      
        <content type="html"><![CDATA[<p>今天在开周会的时候，第一任主管给我发了消息，大意是今天是他在公司的最后一天，后会有期。开完会的时候已经6点半多了，我看到了消息，赶紧回了一句，江湖再见。然后寒暄几句之后，我又被拉到一个群里去解决现场问题，一直到8点钟才从公司离开。</p><a id="more"></a><p>我接了主管的担子，这就是我的日常工作，开会，突然被拉到一个群要解决问题，之前我是不想接的，原因在另一篇文章谈起过，后来前主管找过，经理找过，我都说我再考虑考虑，直到第一任主管找到我，我的决心才开始动摇，后来接下担子也是跟他有很大的关系，然后就开始了非常忙的日常状态，忙到没时间写代码，都是晚上下班了没人来找我了，才能安静的写两个小时的代码。</p><p>来说说我的第一任主管，来公司三年，他是我非常感激的人，临走时的寒暄我还跟他说了，非常感激他，感谢他两年的栽培。</p><p>为什么不是感谢而是感激呢？</p><p>他是我码农之路的真正意义上的引路人，从实习开始到现在，是他的宽容与分享让我入了门。LZ是武汉某高校数学系毕业，Java是照着自己的野路子学出来的，云计算更是了解的甚少，当时因为给第一任主管基础比较好的印象顺利入职，但是当时不知码代码的深浅，写过很多烂代码，真的烂，幸亏他的宽容，让我一个野路子的码农进入了行业，指出来了我的很多烂代码，当时真的很不爽，因为被diss太多了，甚至曾经对代码评审环节有点抵触。</p><p>现在回过头来看，非常感激那段时间，如果没有那段时间的矫正，估计现在我也会像一些人写的代码那样，又臭又长，没有一点逻辑性，而且你指出来了别人还跟你争论，别问我怎么知道的。很庆幸我在刚入行时候就被第一任主管矫正过来了，有些东西是需要行业前辈给你指出来，这个毋容置疑，各行各业都是这样，说的严重一点，别人不指出来，可能你永远都不知道。</p><p>那个时候还没有阿里的Java开发手册，当时代码评审的规范都是第一任主管定的规范，这些都是他多年的经验总结，可以说是躺过了无数的坑总结出来的最佳实践。如果不是那段难熬的时光，现在我的代码也不会被经理，前任主管以及接手的同事夸奖，经理还在开会的时候说过写代码就应该像我写的这样子，有些代码一看就知道有没有经过思考，有没有重构的思想。</p><p>很感激他，让我对代码质量有了一定的追求，这个无关其他，这个只跟以后的职业生涯有关。</p><p>刚毕业的时候真的菜，因为不是科班的，只学过Java基础，像网络，存储，操作系统这些专业的课程都没有学过，甚至书都没看过。感谢第一任主管的分享，他是把一个技术研究的比较透彻的，计算，存储，网络这些都是从他那里分享来补齐的，他的技术非常的牛，他是我接触的里边我最佩服的技术牛人，没有之一。</p><p>对了，忘了说一句，我感觉我和第一任主管越来越像了，我也不知道为啥，但是就是有这样子的感觉，看着他可以看到自己的未来，好好珍惜。</p><p>感激，江湖再见。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈升职</title>
      <link href="2020/04/24/talk-promotion/"/>
      <url>2020/04/24/talk-promotion/</url>
      
        <content type="html"><![CDATA[<p>昨天下午5点多的时候主管找我，说他要调去基础架构组做主管了，打算把我们组给我带，我当时还是很吃惊，不得不承认，这是个很好的机会。</p><a id="more"></a><p>经过一晚的认真思考，我决定放弃，因为我想离开了。迫于经济压力，年前就有了想走的想法，打算年后跳槽，但是因为疫情全部打乱了，到现在都还没有正式开始。都说程序员有两道很重要的槛，三年和五年，三年这个坎我遇到了而且公司也提供了机会让我跨过去，但是我目前最希望的还是薪资大幅提升和技术深入，像一些高并发的场景我都没有机会接触过。</p><p>如果我接了这个职位，鉴于公司这种情况大概率近期是不会加薪的，毕竟已经拖欠了两个月的工资。就算是这样的情况下整个研发部门一百多号人基本没有多少走的，这也说明大家都是在观望，疫情的影响还是挺大的。我也看到了其实大家都是一样的，容易被固化，只能在小圈子里边跳来跳去，社会就是这样子，想往上一个阶级走都得脱层皮。</p><p>所以分析下来，接了这个职位，得到的好处就是可以有锻炼的机会，当个6人的小组leader，相应带来的不好就是时间上将会无限的付出，加班将是常态，扯皮时间多，写代码时间大幅减少，将会和其他人一样适应这种小公司节奏，今后很大可能只能在小公司里转悠。</p><p>如果不接，损失的是一个迈向管理的机会，这样的机会可遇不可求，但是有一个好处就是每天可以按时下班，回来复习准备面试相关，争取跳槽涨薪，缓解现在的经济压力，如果有幸能进入大公司，将是最好结果，那么放弃升职将是对的。</p><p>所以，为了证明我是对的，写简历去了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老大走好</title>
      <link href="2020/01/27/mamba/"/>
      <url>2020/01/27/mamba/</url>
      
        <content type="html"><![CDATA[<p>昨晚一个晚上没睡好，5点半就醒了，然后看了一下手机，看到老大直升机失事了，难以相信，我以为我还在做梦。R.I.P 科比·布莱恩特。</p><a id="more"></a><p><img src="/asset/img/manba/kobe.jpg" alt="科比"></p><p>科比可以说是篮球传奇，我也是十几年的科蜜，老大今天走了，无比痛心，曼巴精神一直是我内心的信仰，勤奋努力，舍我其谁的霸气。</p><p>从06年开始注意到科比，然后喜欢上他，然后敬佩他，然后封神。</p><p>自打13年他跟腱断裂之后我就没再看NBA了，真的无法忍心看。</p><p>16年科比终究还是屈服了，选择了退役，我再次看NBA，一个人在宿舍安安静静的看完科比的退役赛，狂砍60分，可以说，老大把最精彩的给了我们球迷。</p><p>如果我不是高度近视的话，我想我会一直打球的，科比一直影响着我，忘我的投入这是他对我最大的影响，以前的我能抱着篮球在篮球场待一天，现在的我可以在电脑面前干活到忘记时间，这是他对我最大的影响，这将伴随我的一生。</p><p>我喜欢的两个外国人都已经故去了，一个是迈克尔·杰克逊，一个是科比·布莱恩特，他们都是世界级的榜样，也都在各自的领域饱满激情，特别专注，同样都是很霸气，很励志。MJ说过，如果你说我是错的，那你最好证明你是对的。Kobe说过，比赛肯定要有胜负，为什么赢的那个人不是我？当然科比还有最经典的话，你见过凌晨四点钟的洛杉矶吗？他经常在那个时候起来练球，凌晨4点半我做不到，但是5点半我想我还是可以的，加油。</p><p>老大，再见。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kobe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2020/01/13/linux-prof-important-cmd/"/>
      <url>2020/01/13/linux-prof-important-cmd/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍Linux常用几个命令，主要是用来定位线上环境出现问题，如果线上环境出了问题该怎么去找出问题，如何定位出有问题的代码段。</p><a id="more"></a><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><code>top</code>命令可以看到系统的整体运行情况。主要看3个值，cpu，mem和load average，cpu和memory是系统当前的使用百分比，load average是系统负载，有三个值，代表的是系统1分钟，5分钟，15分钟的平均负载值，如果这三个值取平均值大于0.6，说明系统当前负载比较高。</p><p><code>top</code>还有一个精简命令<code>uptime</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">top - 22:35:45 up 16 min,  2 users,  load average: 0.04, 0.08, 0.06</span><br><span class="line">Tasks:  95 total,   1 running,  94 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1882152 total,  1117464 free,   385520 used,   379168 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1345460 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND               </span><br><span class="line"> 1238 root      20   0  318988  27388  11504 S  0.7  1.5   0:01.20 docker-containe       </span><br><span class="line"> 1697 jenkins   20   0 2589952 192284  18548 S  0.3 10.2   0:14.67 java                  </span><br><span class="line"> 2088 root      20   0       0      0      0 S  0.3  0.0   0:00.08 kworker/0:0           </span><br><span class="line">    1 root      20   0  127944   6604   4172 S  0.0  0.4   0:01.15 systemd               </span><br><span class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd              </span><br><span class="line">    4 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H          </span><br><span class="line">    5 root      20   0       0      0      0 S  0.0  0.0   0:00.03 kworker/u2:0          </span><br><span class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.11 ksoftirqd/0           </span><br><span class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0           </span><br><span class="line">    8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                </span><br><span class="line">    9 root      20   0       0      0      0 S  0.0  0.0   0:00.52 rcu_sched             </span><br><span class="line">   10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain         </span><br><span class="line">   11 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 watchdog/0            </span><br><span class="line">   13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs             </span><br><span class="line">   14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                 </span><br><span class="line">   15 root      20   0       0      0      0 S  0.0  0.0   0:00.00 khungtaskd            </span><br><span class="line">   16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback             </span><br><span class="line">   17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd           </span><br><span class="line">   18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                </span><br><span class="line">   19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                </span><br><span class="line">   20 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset</span><br></pre></td></tr></table></figure><p>这是top的交互命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">d： 更改刷新频率</span><br><span class="line">f： 增加或减少要显示的列(选中的会变成大写并加*号)</span><br><span class="line">F： 选择排序的列</span><br><span class="line">h： 显示帮助画面</span><br><span class="line">H： 显示线程</span><br><span class="line">i： 忽略闲置和僵死进程</span><br><span class="line">k： 通过给予一个PID和一个signal来终止一个进程。（默认signal为15。在安全模式中此命令被屏蔽）</span><br><span class="line">l:  显示平均负载以及启动时间（即显示影藏第一行）</span><br><span class="line">m： 显示内存信息</span><br><span class="line">M： 根据内存资源使用大小进行排序</span><br><span class="line">N： 按PID由高到低排列</span><br><span class="line">o： 改变列显示的顺序</span><br><span class="line">O： 选择排序的列，与F完全相同</span><br><span class="line">P： 根据CPU资源使用大小进行排序</span><br><span class="line">q： 退出top命令</span><br><span class="line">r： 修改进程的nice值(优先级)。优先级默认为10，正值使优先级降低，反之则提高的优先级</span><br><span class="line">s： 设置刷新频率（默认单位为秒，如有小数则换算成ms）。默认值是5s，输入0值则系统将不断刷新</span><br><span class="line">S： 累计模式（把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+ ）</span><br><span class="line">T： 根据进程使用CPU的累积时间排序</span><br><span class="line">t： 显示进程和CPU状态信息（即显示影藏CPU行）</span><br><span class="line">u： 指定用户进程</span><br><span class="line">W： 将当前设置写入~/.toprc文件，下次启动自动调用toprc文件的设置</span><br><span class="line">&lt;： 向前翻页</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">： 向后翻页</span></span><br><span class="line">?： 显示帮助画面</span><br><span class="line">1(数字1)： 显示每个CPU的详细情况</span><br></pre></td></tr></table></figure></p><h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p><code>vmstat</code> 主要用来查看cpu，但是不仅限于cpu。</p><p><code>vmstat -n 2 3</code> 代表每隔2秒采集一次，共采集3次。主要观察procs和cpu的指标。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@dev ~]# vmstat -n 2 3</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 1117248   2108 377076    0    0   236    12  121  240  2  1 97  0  0</span><br><span class="line"> 1  0      0 1117248   2108 377092    0    0     0     1   85  182  0  0 100  0  0</span><br><span class="line"> 0  0      0 1117248   2108 377092    0    0     0     0  209  392  6  8 86  0  0</span><br></pre></td></tr></table></figure><p>主要观察两个参数的值</p><ul><li><code>proc</code> <ul><li><code>r</code> : 运行和等待CPU时间片的进程数，原则上1核的CPU的运行队列不要超过2，否则代表系统压力大。</li><li><code>b</code> : 等待资源的进程数，</li></ul></li></ul><ul><li><code>cpu</code><ul><li><code>us</code> : 用户进程消耗的CPU时间百分比，长期大于50%则需要优化程序。</li><li><code>sy</code> : 内核进程消耗的CPU时间百分比。</li></ul></li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p><code>free</code>用于查看内存使用情况<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1838         358        1099           8         380        1329</span><br><span class="line">Swap:          2047           0        2047</span><br></pre></td></tr></table></figure></p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p><code>df</code>用于查看磁盘剩余空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 908M     0  908M   0% /dev</span><br><span class="line">tmpfs                    920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs                    920M  8.6M  911M   1% /run</span><br><span class="line">tmpfs                    920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   17G  3.3G   14G  20% /</span><br><span class="line">/dev/sda1               1014M  191M  824M  19% /boot</span><br><span class="line">tmpfs                    184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><p><code>iostat</code>用于磁盘I/O性能评估，如果没有这个命令需要先安装<code>yum install sysstat</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# iostat -xdk 2 3</span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (dev)  01/14/2020      _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.01    0.28    0.15    13.48     2.25    72.09     0.00    1.36    1.22    1.64   0.82   0.04</span><br><span class="line">dm-0              0.00     0.00    0.22    0.12    12.64     2.20    85.20     0.00    1.67    1.31    2.33   0.92   0.03</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.06     0.00    50.09     0.00    0.42    0.42    0.00   0.33   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">dm-0              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">dm-0              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br><span class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00</span><br></pre></td></tr></table></figure><p>主要看两个参数</p><ul><li><code>await</code> : I/O请求的平均等待时间，单位毫秒，值越小性能越好。</li><li><code>util</code> : 一秒中有百分之几的时间用于I/O操作。接近100%时，表示磁盘带宽跑满，需要优化程序或者增加磁盘。</li></ul><h2 id="ifstat"><a href="#ifstat" class="headerlink" title="ifstat"></a>ifstat</h2><p><code>ifstat</code>用于查看网络I/O，最好先卸载在安装</p><p>卸载<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# find / -name ifstat</span><br><span class="line">/usr/sbin/ifstat</span><br><span class="line">[root@dev ~]# rm -rf /usr/sbin/ifstat</span><br></pre></td></tr></table></figure></p><p>安装，需要有gcc<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://distfiles.macports.org/ifstat/ifstat-1.1.tar.gz</span><br><span class="line">tar xzvf ifstat-1.1.tar.gz</span><br><span class="line">cd ifstat-1.1</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cp istate /usr/sbin/</span><br></pre></td></tr></table></figure></p><p>查看各个网卡进出的网络负载情况<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">     enp0s3              enp0s8             docker0         br-adc7174eea54  </span><br><span class="line">KB/s in  KB/s out   KB/s in  KB/s out   KB/s in  KB/s out   KB/s in  KB/s out</span><br><span class="line">   0.00      0.00      0.06      0.28      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.48      0.43      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.12      0.26      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br><span class="line">   0.00      0.00      0.06      0.20      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></p><h2 id="如何定位生产CPU占用过高？"><a href="#如何定位生产CPU占用过高？" class="headerlink" title="如何定位生产CPU占用过高？"></a>如何定位生产CPU占用过高？</h2><ol><li>先用<code>top</code>命令找出占比最高的进程,根据cpu使用百分比排序，<code>P</code>或者<code>shift+p</code>。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">top - 09:30:12 up 11:11,  5 users,  load average: 0.31, 0.17, 0.10</span><br><span class="line">Tasks: 101 total,   1 running, 100 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  3.8 us,  3.8 sy,  0.0 ni, 92.4 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1882152 total,   761932 free,   435836 used,   684384 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1265840 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND               </span><br><span class="line"> 5262 root      20   0 2472080  40824  12132 S 10.0  2.2   0:11.31 java                  </span><br><span class="line"> 3225 root      20   0  160160   6740   4384 S  0.7  0.4   0:00.67 sshd                  </span><br><span class="line"> 5311 root      20   0  161888   2176   1540 R  0.3  0.1   0:00.37 top                   </span><br><span class="line">    1 root      20   0  128076   6728   4192 S  0.0  0.4   0:02.36 systemd               </span><br><span class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd              </span><br><span class="line">    4 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H          </span><br><span class="line">    5 root      20   0       0      0      0 S  0.0  0.0   0:00.49 kworker/u2:0          </span><br><span class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:01.93 ksoftirqd/0           </span><br><span class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0           </span><br><span class="line">    8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                </span><br><span class="line">    9 root      20   0       0      0      0 S  0.0  0.0   0:00.98 rcu_sched             </span><br><span class="line">   10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain         </span><br><span class="line">   11 root      rt   0       0      0      0 S  0.0  0.0   0:01.43 watch</span><br></pre></td></tr></table></figure><p>目前可以知道pid为<code>5262</code>这个进程占用的cpu百分比最高。</p><ol start="2"><li>用<code>ps -ef</code> 或者 <code>jps</code> 定位是哪一个后台程序惹的事。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# jps -l | grep 5262</span><br><span class="line">5262 Demo</span><br><span class="line">[root@dev ~]# ps -ef | grep 5262 | grep -v grep</span><br><span class="line">root      5262  3241  6 09:26 pts/2    00:00:37 java Demo</span><br></pre></td></tr></table></figure><ol start="3"><li>定位到具体的线程或者代码</li></ol><p>使用命令<code>ps -mp [pid] -o THREAD,tid,time</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# ps -mp 5262  -o THREAD,tid,time</span><br><span class="line">USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME</span><br><span class="line">root      6.5   -    - -         -      -     - 00:00:44</span><br><span class="line">root      0.0  19    - futex_    -      -  5262 00:00:00</span><br><span class="line">root      6.3  19    - n_tty_    -      -  5263 00:00:43</span><br><span class="line">root      0.0  19    - futex_    -      -  5264 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5265 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5266 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5267 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5268 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5269 00:00:00</span><br><span class="line">root      0.0  19    - futex_    -      -  5270 00:00:00</span><br><span class="line">root      0.1  19    - futex_    -      -  5271 00:00:01</span><br></pre></td></tr></table></figure><p>可以看到pid为<code>5262</code>的进程下tid为<code>5263</code>线程占用CPU最多。</p><ol start="4"><li>将线程id转换为16进制格式，英文小写</li></ol><p>因为程序堆栈中是使用16进制来记录的，<code>5263</code>的16进制为<code>0x148f</code></p><ol start="5"><li>打印程序运行堆栈信息</li></ol><p>使用命令<code>jstack [pid] | grep [tid] -A60</code>,tid为16进制线程id英文小写，打印出前60行信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# jstack 5262 | grep 0x148f  -A60</span><br><span class="line">"main" #1 prio=5 os_prio=0 tid=0x00007fed4804b800 nid=0x148f runnable [0x00007fed51b18000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.io.FileOutputStream.writeBytes(Native Method)</span><br><span class="line">        at java.io.FileOutputStream.write(FileOutputStream.java:326)</span><br><span class="line">        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)</span><br><span class="line">        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)</span><br><span class="line">        - locked &lt;0x00000000ecd68b00&gt; (a java.io.BufferedOutputStream)</span><br><span class="line">        at java.io.PrintStream.write(PrintStream.java:482)</span><br><span class="line">        - locked &lt;0x00000000ecd60c38&gt; (a java.io.PrintStream)</span><br><span class="line">        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)</span><br><span class="line">        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)</span><br><span class="line">        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)</span><br><span class="line">        - locked &lt;0x00000000ecd68b40&gt; (a java.io.OutputStreamWriter)</span><br><span class="line">        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)</span><br><span class="line">        at java.io.PrintStream.write(PrintStream.java:527)</span><br><span class="line">        - eliminated &lt;0x00000000ecd60c38&gt; (a java.io.PrintStream)</span><br><span class="line">        at java.io.PrintStream.print(PrintStream.java:597)</span><br><span class="line">        at java.io.PrintStream.println(PrintStream.java:736)</span><br><span class="line">        - locked &lt;0x00000000ecd60c38&gt; (a java.io.PrintStream)</span><br><span class="line">        at Demo.main(Demo.java:4)</span><br><span class="line"></span><br><span class="line">"VM Thread" os_prio=0 tid=0x00007fed480cb800 nid=0x1490 runnable </span><br><span class="line"></span><br><span class="line">"VM Periodic Task Thread" os_prio=0 tid=0x00007fed4811a000 nid=0x1497 waiting on condition </span><br><span class="line"></span><br><span class="line">JNI global references: 5</span><br></pre></td></tr></table></figure><p>可以看到线程信息，代码在Demo类的main方法，Demo.java这个文件的第4行，然后去看这个方法以及这一行代码相关的逻辑，加以分析应该就可以找出原因了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「迟到」的年终总结</title>
      <link href="2020/01/05/2019-review/"/>
      <url>2020/01/05/2019-review/</url>
      
        <content type="html"><![CDATA[<p>年终总结应该是年底或者新年第一天来正式发布的，今天是2020-01-05了，迟是迟了点，但是还好不算太晚。因为从30号开始身体不太舒服，请了几天的病假，到现在为止都没痊愈，所以这个总结就暂时落下了。</p><a id="more"></a><p>2019年是我的本命年，估计是没穿红内裤的原因，过的不是很顺，经历亲人离开，有长达连续加班20天的记录，装修被熟人坑。开始经历一些未曾经历过的，也解锁了一些新技能。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这一年的生活发生了不少变化，估计是压力有点大的缘故，开始掉发了，加上今年在外边吃的多的缘故，身体也变圆了，新的一年要开始注意，不然真变油腻大叔了。</p><p>第一次体会到亲人离开的痛苦，毕业后第一次深夜痛哭，没有声音，眼泪大颗大颗往下掉，下半年一直没走出来。这让我看清了一些人，亲戚是一个多么讽刺的中文词，现实中有多少亲戚是连朋友都不如的？甚至连陌生人都不如，陌生人至少不会在背后中伤你。</p><p>装修被耽搁了，今年打算春节之后就开始继续动工，争取今年能住进新房。这又将是一笔不小开销，预计至少需要15万，希望能顺利完工。以后如果买房，还是尽量买精装修吧，能省不少事，毛坯省下的那些钱真的不值当，装修是一个费时费力费钱还不讨好的活，还容易掉坑里。</p><p>新的一年第一天就高烧39度了，大半夜的去医院急诊看病，10点多到医院，12点多才能挂水，现在的医院资源真的是很紧张，国人拥有的平均医疗资源还很低。</p><p>新的一年，要学会好好照顾自己啊。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作上今年把技术栈换了一遍，换成了目前十分火热的微服务架构以及云原生技术，主要的技术点是SpringCloud,SpringBoot,RabbitMQ,Redis,EFK,Nginx,Docker,K8s,Rancher等，SpringCloud使用了ConfigServer,Eureka,Zuul,Feign,Ribbon,Hystrix,Stream,Sleuth，可以说技术上宽度深度都上了一个台阶。</p><p>不得不说K8s真的是太强大了，争取在2020年能对K8s以及整个云原生技术的认识能够更加深入一点，最好能从源码层面去了解。最近看到一个微博，说的是日本的一个电视剧里边用了K8s集群，是真真的搭了一个K8s集群来拍电视剧，微博网友的眼睛真尖，最主要的还是日本人的做事态度真的很赞，其实从今年开始我慢慢喜欢上日本的文化了，包括非常喜欢优衣库，喜欢斯巴鲁，喜欢马自达。最近还发现了一个比较好的学习K8s的视频，是阿里云与CNCF联合出版，<a href="https://edu.aliyun.com/roadmap/cloudnative" target="_blank" rel="noopener">点我学习</a>，里边的讲师可以说都是业界的大牛级别，从P6到P9都有，可以说阵容相当强大，争取跟着业界大牛系统学习一下K8s。</p><p>去年开始带新人了，小伙很上进，其实我一直没告诉他，他比我大，让他叫了我半年多的哥。其实前年就开始带新人了，只不过我第一次带的时候发现那个小伙不诚实，写出的代码很差劲，甚至两人沟通不在一条线上，最后人资做背调的时候发现他简历造假，第一次就这么没了，好在今年这个小伙还可以。</p><p>想想自己已经工作两年半了，当了快三年的社畜了，工作上还有两点遗憾，一个是没有大公司背景，一个是还没当过面试官，新的一年争取至少实现一个吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>年终总结拖了这么久，身体不舒服是其中一个原因，最主要的原因还是没啥可写的，就这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次出差</title>
      <link href="2019/12/15/first-business-trip/"/>
      <url>2019/12/15/first-business-trip/</url>
      
        <content type="html"><![CDATA[<p>飞机降落在了白云机场，一周的出差顺利结束。</p><a id="more"></a><p>这次出差去了上海一个星期，接到任务的时候还是有点小担心的，毕竟是第一次出差，而且还是第一次坐飞机，去之前还是有点心慌的，因为不确定因素客观存在。</p><p>因为是第一次坐飞机，提前两小时就到白云机场了，整个流程下来不到10分钟就办理完值机和安检了，体验还挺不错。飞机一般都是延误的，可能这个观点是错的，因为飞机提前半小时落地在了浦东机场，说实话是有点小意外的，而回来的时候同样是提前了20分钟左右落地，所以不能道听途说，自己去体验才是最重要，两次飞行都没有延误，而且还提前了。目前来讲，飞机延误在我的概念里还是不存在的。</p><p>这一次去客户现场也算是体验到了别人家公司的氛围，还有办公环境这些，说实话，办公环境真不错，食堂也是非常棒，所以，还是要多出去看看，这样子才会有目标。</p><p>第一次可能都是有抵触心理的，试着去接受，去承担，然后一步一步去解决掉它，这样子对你来说就不是问题了，这是这趟出差最大的感受。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 出差 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2019/11/13/docker/"/>
      <url>2019/11/13/docker/</url>
      
        <content type="html"><![CDATA[<p>Docker是一种容器引擎，主要用于应用的打包和运行，保证环境的一致性，目前与微服务配合一起使用的比较多。Docker官方说法是与集装箱功能类似，操作对象是应用，对应用进行Build -&gt; Share -&gt; Run。目前Docker为Kubernetes的默认容器引擎，当然还可以选择rkt，后续会写Kubernetes系列文章，本文先介绍一下Docker，为后续文章做一下铺垫。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里用CentOS7.7来做宿主机做演示，官方文档写的很详细，可以参照官方文档来操作。</p><p>首先关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">sed -i 's/enforcing/disabled/' /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>添加aliyun提供的Docker源，加速docker-ce的下载<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p><p>直接通过yum安装docker-ce即可<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-18.06.1.ce-3.el7 -y</span><br></pre></td></tr></table></figure></p><p>启动docker，并设置开机启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure></p><p>查看docker版本<code>docker version</code>以及docker信息<code>docker info</code>。</p><p>先来回顾一下我们之前说的内容，Docker主要用于应用的打包和运行，打包其实就是构建镜像，运行就是根据打包出来的镜像运行一个容器。所以下面我们来看一下镜像和容器。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>镜像，与OpenStack，VMware这些说的镜像是同一个东西吗？其实他们的作用是类似的，但是实现区别非常大，OpenStack和VMware的镜像是一个完整的操作系统，Docker的镜像是一个不包含Linux内核的精简系统，这个与他们各自的架构有关。</p><p>Docker官方默认提供了一个公共的镜像仓库Docker Hub，我们通过<code>docker pull</code>从Docker Hub上拉取镜像。但是这个是国外，虽然可以访问，但是比较慢，所以一般都会将镜像仓库设置为<code>https://registry.docker-cn.com</code>或者aliyun提供的镜像仓库<code>https://uxk0ognt.mirror.aliyuncs.com</code>。</p><p>修改Docker镜像仓库为aliyun,加速镜像拉取<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://uxk0ognt.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>重新加载并重启Docker<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>拉取nginx的最新最新镜像到本地,不添加版本号默认拉取最新<code>latest</code>版本，需要特定版本指定版本即可。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx                                                        8d691f585fa8: Pull complete                                                               5b07f4e08ad0: Pull complete                                                               abc291867bca: Pull complete </span><br><span class="line">Digest: sha256:922c815aa4df050d4df476e92daed4231f466acc8ee90e0e774951b0fd7195a4</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br></pre></td></tr></table></figure></p><p>查看本地镜像列表<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@dev ~]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              540a289bab6c        3 weeks ago         126MB</span><br></pre></td></tr></table></figure></p><p>镜像是分层的，可以查看镜像的分层信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker history nginx</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">540a289bab6c        3 weeks ago         /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B                  </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B                  </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  EXPOSE 80                    0B                  </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c ln -sf /dev/stdout /var/log/nginx…   22B                 </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -x     &amp;&amp; addgroup --system -…   57MB                </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV PKG_RELEASE=1~buster     0B                  </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV NJS_VERSION=0.3.6        0B                  </span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV NGINX_VERSION=1.17.5     0B                  </span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B                  </span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c #(nop)  CMD ["bash"]                 0B                  </span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c #(nop) ADD file:74b2987cacab5a6b0…   69.2MB</span><br></pre></td></tr></table></figure></p><p>查看镜像详情<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker inspect nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "sha256:540a289bab6cb1bf880086a9b803cf0c4cefe38cbb5cdefa199b69614525199f",</span><br><span class="line">        "RepoTags": [</span><br><span class="line">            "nginx:latest"</span><br><span class="line">        ],</span><br><span class="line">        "RepoDigests": [</span><br><span class="line">            "nginx@sha256:922c815aa4df050d4df476e92daed4231f466acc8ee90e0e774951b0fd7195a4"</span><br><span class="line">        ],</span><br><span class="line">        "Parent": "",</span><br><span class="line">        "Comment": "",</span><br><span class="line">        "Created": "2019-10-23T00:26:03.830480202Z",</span><br><span class="line">        "Container": "77b8bfc5e16274066a5d4c14915ea5e7387c062f8540cd970c54e9b6e38b1011",</span><br><span class="line">        "ContainerConfig": &#123;</span><br><span class="line">            "Hostname": "77b8bfc5e162",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "80/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "NGINX_VERSION=1.17.5",</span><br><span class="line">                "NJS_VERSION=0.3.6",</span><br><span class="line">                "PKG_RELEASE=1~buster"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"nginx\" \"-g\" \"daemon off;\"]"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:2e2fa75c52fdfe182fb66455d6db04849c683ef01d14a526211ba37831c66791",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "maintainer": "NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;"</span><br><span class="line">            &#125;,</span><br><span class="line">            "StopSignal": "SIGTERM"</span><br><span class="line">        &#125;,</span><br><span class="line">        "DockerVersion": "18.06.1-ce",</span><br><span class="line">        "Author": "",</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "80/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "NGINX_VERSION=1.17.5",</span><br><span class="line">                "NJS_VERSION=0.3.6",</span><br><span class="line">                "PKG_RELEASE=1~buster"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "nginx",</span><br><span class="line">                "-g",</span><br><span class="line">                "daemon off;"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:2e2fa75c52fdfe182fb66455d6db04849c683ef01d14a526211ba37831c66791",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "maintainer": "NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;"</span><br><span class="line">            &#125;,</span><br><span class="line">            "StopSignal": "SIGTERM"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Architecture": "amd64",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">        "Size": 126215561,</span><br><span class="line">        "VirtualSize": 126215561,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/073913f9b86f825ee0431de0bfdd01703b4410a87470009ba9a2ac96353c790b/diff:/var/lib/docker/overlay2/cea7c862cabda73f6d9395eb93b4c48a4b3798629d6663bd00e2d805fc6b02a4/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/9ff16a2be5a6c4c32e4c27a87520be3f117486be9d89718f68799a58c25333fc/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/9ff16a2be5a6c4c32e4c27a87520be3f117486be9d89718f68799a58c25333fc/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/9ff16a2be5a6c4c32e4c27a87520be3f117486be9d89718f68799a58c25333fc/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "RootFS": &#123;</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:b67d19e65ef653823ed62a5835399c610a40e8205c16f839c5cc567954fcf594",</span><br><span class="line">                "sha256:6eaad811af0237b78ba8b44a282d1564259d90007d628a032c5df7e3e2bbb613",</span><br><span class="line">                "sha256:a89b8f05da3a2cbe459ef3fecfec8076fd0a7568db81f9164147b6f642e2dadf"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Metadata": &#123;</span><br><span class="line">            "LastTagTime": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>删除镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker image rm nginx</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">Untagged: nginx@sha256:922c815aa4df050d4df476e92daed4231f466acc8ee90e0e774951b0fd7195a4</span><br><span class="line">Deleted: sha256:540a289bab6cb1bf880086a9b803cf0c4cefe38cbb5cdefa199b69614525199f</span><br><span class="line">Deleted: sha256:ab18af7cee69bfb22c1771e54d5e0e68b1a1bf57bb46516142da0380b1771f4a</span><br><span class="line">Deleted: sha256:02f7daf1e14541cd61a3dda1a61cc0f78fee8de2984d488b8ba5bbd3cbad9b57</span><br><span class="line">Deleted: sha256:b67d19e65ef653823ed62a5835399c610a40e8205c16f839c5cc567954fcf594</span><br></pre></td></tr></table></figure></p><p>删除所有镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker image rm $(docker image ls  -aq)</span><br><span class="line">Untagged: busybox:latest</span><br><span class="line">Untagged: busybox@sha256:1303dbf110c57f3edf68d9f5a16c082ec06c4cf7604831669faf2c712260b5a0</span><br><span class="line">Deleted: sha256:020584afccce44678ec82676db80f68d50ea5c766b6e9d9601f7b5fc86dfb96d</span><br><span class="line">Deleted: sha256:1da8e4c8d30765bea127dc2f11a17bc723b59480f4ab5292edb00eb8eb1d96b1</span><br></pre></td></tr></table></figure></p><p>给镜像打标签，镜像列表多了一条记录，镜像ID还是一样的。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              020584afccce        2 weeks ago         1.22MB</span><br><span class="line">nginx               latest              540a289bab6c        3 weeks ago         126MB</span><br><span class="line">[root@dev ~]# docker tag busybox:latest busybox:v1.0</span><br><span class="line">[root@dev ~]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              020584afccce        2 weeks ago         1.22MB</span><br><span class="line">busybox             v1.0                020584afccce        2 weeks ago         1.22MB</span><br><span class="line">nginx               latest              540a289bab6c        3 weeks ago         126MB</span><br></pre></td></tr></table></figure></p><p>导出镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker save busybox:v1.0 &gt;  busybox-1.0.tar</span><br><span class="line">[root@dev ~]# ls</span><br><span class="line">anaconda-ks.cfg  busybox-1.0.tar</span><br></pre></td></tr></table></figure></p><p>载入镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker rmi busybox:v1.0</span><br><span class="line">Untagged: busybox:v1.0</span><br><span class="line">Deleted: sha256:020584afccce44678ec82676db80f68d50ea5c766b6e9d9601f7b5fc86dfb96d</span><br><span class="line">Deleted: sha256:1da8e4c8d30765bea127dc2f11a17bc723b59480f4ab5292edb00eb8eb1d96b1</span><br><span class="line">[root@dev ~]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              540a289bab6c        3 weeks ago         126MB</span><br><span class="line">[root@dev ~]# docker load &lt; busybox-1.0.tar </span><br><span class="line">1da8e4c8d307: Loading layer  1.437MB/1.437MB</span><br><span class="line">Loaded image: busybox:v1.0</span><br><span class="line">[root@dev ~]# docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             v1.0                020584afccce        2 weeks ago         1.22MB</span><br><span class="line">nginx               latest              540a289bab6c        3 weeks ago         126MB</span><br></pre></td></tr></table></figure></p><p>构建镜像 <code>docker commit</code> 和 <code>docker build</code>，后边在Dockerfile详细讲解。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>启动一个容器，<code>-i</code>交互式启动，<code>-t</code>分配一个伪终端，<code>-d</code>后台运行，<code>--name</code>给容器起一个名称，启动之后返回容器长ID值。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker run  -itd --name busy-service busybox:v1.0</span><br><span class="line">1479e27334802659474255201a6f125d38c3e568e57b74aa828a2c94b8602d4e</span><br></pre></td></tr></table></figure></p><p>查看当前运行的容器,所有的容器加上<code>-a</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">1479e2733480        busybox:v1.0        "sh"                12 hours ago        Up 12 hours                             busy-service</span><br></pre></td></tr></table></figure></p><p>进入容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker attach busy-service</span><br><span class="line">/ # ls</span><br><span class="line">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure></p><p>退出容器可以输入<code>exit</code>或者使用快捷键<code>Ctrl+p+q</code>。这样子退出终端之后容器也就退出了，所以铜通常不会这样子进入容器，一般是使用<code>docke exec</code>进入和退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@dev ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">1479e2733480        busybox:v1.0        "sh"                12 hours ago        Exited (0) 5 minutes ago                       busy-service</span><br><span class="line">[root@dev ~]# docker start busy-service</span><br><span class="line">busy-service</span><br><span class="line">[root@dev ~]# docker exec -it busy-service sh</span><br><span class="line">/ # ls</span><br><span class="line">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line">/ # exit</span><br><span class="line">[root@dev ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">1479e2733480        busybox:v1.0        "sh"                12 hours ago        Up 22 seconds                           busy-service</span><br></pre></td></tr></table></figure><p>映射容器端口到使用主机端口<code>-p hostPort:containerPort</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker run -itd -p 8080:80  --name nginx nginx:latest        </span><br><span class="line">00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336</span><br><span class="line">[root@dev ~]# curl localhost:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;                                                                           &lt;html&gt;</span><br><span class="line">&lt;head&gt;                                                                                    &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and               working. Further configuration is required.&lt;/p&gt;</span><br><span class="line">                                                                                          &lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>查看容器日志,<code>-f</code>动态刷新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker logs -f nginx</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:28:21 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br></pre></td></tr></table></figure></p><p>多请求几次nginx,发现日志不断刷新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker logs -f nginx</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:28:21 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:32:49 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:32:54 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:32:54 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:32:55 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br><span class="line">172.17.0.1 - - [15/Nov/2019:00:32:55 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"</span><br></pre></td></tr></table></figure></p><p>在使用容器跑业务的时候，运行了一段时间就会发现容器宿主机存储不够了，这种时候有可能就是日志文件太大了，docker容器运行的日志文件在宿主机的目录<code>/var/lib/docker/containers</code>,以JSON格式来存储。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@dev 00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336]# pwd</span><br><span class="line">/var/lib/docker/containers/00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336</span><br><span class="line">[root@dev 00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336]# ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r-----. 1 root root 1026 Nov 15 08:32 00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336-json.log</span><br><span class="line">drwx------. 2 root root    6 Nov 15 08:28 checkpoints</span><br><span class="line">-rw-------. 1 root root 2902 Nov 15 08:28 config.v2.json</span><br><span class="line">-rw-r--r--. 1 root root 1463 Nov 15 08:28 hostconfig.json                                 -rw-r--r--. 1 root root   13 Nov 15 08:28 hostname</span><br><span class="line">-rw-r--r--. 1 root root  174 Nov 15 08:28 hosts</span><br><span class="line">drwx------. 3 root root   17 Nov 15 08:28 mounts</span><br><span class="line">-rw-r--r--. 1 root root   81 Nov 15 08:28 resolv.conf</span><br><span class="line">-rw-r--r--. 1 root root   71 Nov 15 08:28 resolv.conf.hash</span><br><span class="line">[root@dev 00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336]# more 00e1743963f38a0eae3c05fe94d8ae9974ea30cf300aae86b257951ab4ff4336-json.log </span><br><span class="line">&#123;"log":"172.17.0.1 - - [15/Nov/2019:00:28:21 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:28:21.759024147Z"&#125;</span><br><span class="line">&#123;"log":"172.17.0.1 - - [15/Nov/2019:00:32:49 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:32:49.231094319Z"&#125;</span><br><span class="line">&#123;"log":"172.17.0.1 - - [15/Nov/2019:00:32:54 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:32:54.030918643Z"&#125;</span><br><span class="line">&#123;"log":"172.17.0.1 - - [15/Nov/2019:00:32:54 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:32:54.677989285Z"&#125;          &#123;"log":"172.17.0.1 - - [15/Nov/2019:00:32:55 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:32:55.263751426Z"&#125;</span><br><span class="line">&#123;"log":"172.17.0.1 - - [15/Nov/2019:00:32:55 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"cur</span><br><span class="line">l/7.29.0\" \"-\"\r\n","stream":"stdout","time":"2019-11-15T00:32:55.758060729Z"&#125;</span><br></pre></td></tr></table></figure></p><h2 id="存储卷"><a href="#存储卷" class="headerlink" title="存储卷"></a>存储卷</h2><p>Docker常用的存储方式有两种<code>volumes</code>和<code>bind mount</code>,<code>volumes</code>存储在<code>/var/lib/docker/volumes</code>，<code>bind mount</code>可以是宿主机的任意位置。</p><p>可以通过<code>docker volume ls</code>查看volume列表<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dev volumes]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               09e847e4927f1c7d71748aaa34b4d018680ad2446c1e2b6c81f88a9cd79d6d66</span><br><span class="line">local               jenkins</span><br></pre></td></tr></table></figure></p><p>创建一个卷<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev volumes]# docker volume create nginx-volume</span><br><span class="line">nginx-volume</span><br></pre></td></tr></table></figure></p><p>查看卷详情<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@dev volumes]# docker volume inspect nginx-volume</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "CreatedAt": "2019-11-15T16:21:40+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": &#123;&#125;,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/nginx-volume/_data",</span><br><span class="line">        "Name": "nginx-volume",</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>创建容器的时候使用这个卷，如果没有指定卷的话会默认创建一个卷。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev _data]# docker run -itd -p 8080:80  --name nginx --mount src=nginx-volume,dst=/usr/share/nginx/html nginx</span><br><span class="line">7499b405bca77aea5723a194f7956455cce8bb3aedea1b4158e233ad0db3bfa9</span><br></pre></td></tr></table></figure></p><p>容器起来之后发现文件已经写出来到宿主机本地了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev _data]# pwd</span><br><span class="line">/var/lib/docker/volumes/nginx-volume/_data</span><br><span class="line">[root@dev _data]# ls</span><br><span class="line">50x.html  index.html</span><br><span class="line">[root@dev _data]#</span><br></pre></td></tr></table></figure></p><p>修改宿主机文件，然后通过访问容器内的nginx来证明文件是同步的<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@dev _data]# echo 111 &gt; test.html</span><br><span class="line">[root@dev _data]# ls</span><br><span class="line">50x.html  index.html  test.html</span><br><span class="line">[root@dev _data]# curl localhost:8080/test.html</span><br><span class="line">111</span><br><span class="line">[root@dev _data]#</span><br></pre></td></tr></table></figure></p><p>进入容器确认文件是否存在<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dev _data]# docker exec nginx more  /usr/share/nginx/html/test.html</span><br><span class="line">::::::::::::::</span><br><span class="line">/usr/share/nginx/html/test.html</span><br><span class="line">::::::::::::::</span><br><span class="line">111</span><br></pre></td></tr></table></figure></p><p>删除一个卷使用<code>docker volume rm</code>即可</p><p><code>bind mount</code> 需要指定类型,并且绑定宿主机的目录需要提前创建好<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev opt]# mkdir /opt/html</span><br><span class="line">[root@dev opt]# docker run -itd -p 8081:80  --name nginx-8081 --mount type=bind,src=/opt/html,dst=/usr/share/nginx/html nginx </span><br><span class="line">a2709612f0adee5a48501e12f1e1d65ffd62024223026b19dde4f2b560c2ace7</span><br></pre></td></tr></table></figure></p><p>目前宿主机的目录是空的，容器内的目录也是空的，在宿主机内写文件，容器内目标目录也会有同样的文件,反之亦然。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@dev opt]# docker exec  nginx-8081 ls /usr/share/nginx/html </span><br><span class="line">[root@dev opt]# ls</span><br><span class="line">html</span><br><span class="line">[root@dev opt]# cd html/</span><br><span class="line">[root@dev html]# ls</span><br><span class="line">[root@dev html]# echo 111 &gt; index.html</span><br><span class="line">[root@dev html]# docker exec  nginx-8081 ls /usr/share/nginx/html </span><br><span class="line">index.html</span><br><span class="line">[root@dev html]# curl localhost:8081</span><br><span class="line">111</span><br><span class="line">[root@dev html]# docker exec nginx-8081 touch /usr/share/nginx/html/test.html</span><br><span class="line">[root@dev html]# docker exec  nginx-8081 ls /usr/share/nginx/html</span><br><span class="line">index.html</span><br><span class="line">test.html</span><br><span class="line">[root@dev html]# ls</span><br><span class="line">index.html  test.html</span><br></pre></td></tr></table></figure></p><p>这个<code>bind mount</code>还可以简写,比如可以写为<code>docker run -itd -p 8081:80  --name nginx-8081 -v /opt/html:/usr/share/nginx/html nginx</code></p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>Docker支持5种网络模式</p><ol><li><p><code>bridge</code>  默认网络，Docker安装的时候默认创建一个docker0网桥，默认创建的容器也是添加到这个网桥中。</p></li><li><p><code>host</code>   容器不会获得一个独立的network namespace，而是与宿主机共用一个。</p></li><li><p><code>none</code>  获取独立的network namespace，但不为容器进行任何网络配置。</p></li><li><p><code>container</code>  与指定的容器使用同一个network namespace，网卡配置也都是相同的。</p></li><li><p><code>custom</code>     自定义网桥，默认与bridge网络一样。</p></li></ol><p>看一下docker的网络，并查看一下宿主机的docker0网桥<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">1974df6aac06        bridge              bridge              local</span><br><span class="line">8de4b3cf8127        host                host                local</span><br><span class="line">5473f4de6898        none                null                local</span><br><span class="line">[root@dev ~]# ip addr show docker0</span><br><span class="line">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:52:e3:d1:61 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:52ff:fee3:d161/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@dev ~]#</span><br></pre></td></tr></table></figure></p><p>docker0上有一对veth pair进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# docker exec -it busybox sh                                                  / # ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever                          </span><br><span class="line">17: eth0@if18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.4/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ # exit</span><br><span class="line">[root@dev ~]# ip addr show if18</span><br><span class="line">18: veth882df3c@if17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether d2:fb:14:6b:26:60 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">    inet6 fe80::d0fb:14ff:fe6b:2660/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@dev ~]# brctl show                                                                  bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">docker0         8000.024252e3d161       no              veth882df3c</span><br><span class="line">                                                        vethc3a6616</span><br></pre></td></tr></table></figure><p>可以看到容器内的eth0和宿主机docker0网桥上的veth882df3c是一对veth pair。</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Docker镜像通常是使用Dockerfile来构建，可以清晰控制每一层镜像。下面是常用的指令</p><ol><li><code>FROM</code> 基于哪个基础镜像去构建，例如<code>FROM centos:7</code>。</li><li><code>MAINTAINER</code> 镜像维护者名字或者邮箱，例如<code>MAINTAINER rzz1995@live.com</code></li><li><code>RUN</code> <strong>构建镜像时运行</strong>的shell命令，例如<code>RUN yum install vim</code>或者<code>RUN [&quot;yum&quot;,&quot;install&quot;,&quot;vim&quot;]</code>。</li><li><code>CMD</code> <strong>运行容器时执行</strong>的shell命令，例如<code>CMD /usr/sbin/sshd -D</code>或者<code>CMD [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</code>。</li><li><code>EXPOSE</code> 暴露容器内部服务端口，例如<code>EXPOSE 443</code>。</li><li><code>ENV</code> 设置容器内环境变量，例如<code>ENV MYSQL_ROOT_PASSWORD root</code></li><li><code>ADD</code> 拷贝文件或者目录到镜像，如果是URL或者压缩包会自动下载或者解压，例如<code>ADD https://xxx.com/html.tar.gz /var/www/html</code>或者<code>ADD html.tar.gz /var/www/html</code>。</li><li><code>COPY</code> 拷贝文件或者目录到镜像，例如<code>COPY ./start.sh /start.sh</code>。</li><li><code>ENTRYPOINT</code> <strong>运行容器时执行</strong>执行的shell命令，例如<code>ENTRYPOINT [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;/start.sh&quot;]</code>或者<code>ENTRYPOINT /bin/bash -c &#39;./start.sh&#39;</code>。</li><li><code>VOLUME</code> 指定容器挂载点到宿主机自动生成的目录或其他容器。例如<code>VOLUME [&quot;/var/lib/mysql&quot;]</code>。</li><li><code>USER</code> 为<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>执行命令指定运行用户，例如<code>USER root</code>。</li><li><code>WORKDIR</code> 为<code>RUN</code>,<code>CMD</code>,<code>ENTRYPOINT</code>,<code>COPY</code>,<code>ADD</code>设置工作目录，例如<code>WORKDIR /data</code>。</li><li><code>HEALTHCHECK</code> 健康检查，例如<code>HEALTHCHECK --interval=5m --timeout=3s --retries=3 CMD curl -f http:localhost/ || exit 1</code>。</li><li><code>ARG</code> 在构建镜像时指定一些参数，例如Dockerfile中有一行<code>ARG uer</code>，那build镜像的时候可以这样子传参<code>docker build --build-arg user=ruanzz Dockerfile .</code>。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@dev demo]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              020584afccce        6 weeks ago         1.22MB</span><br><span class="line">busybox             v1.0                020584afccce        6 weeks ago         1.22MB</span><br><span class="line">nginx               latest              540a289bab6c        7 weeks ago         126MB</span><br><span class="line">[root@dev demo]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 46 Dec 15 10:52 Dockerfile</span><br><span class="line">drwxr-xr-x. 2 root root 24 Dec 15 10:54 html</span><br><span class="line">[root@dev demo]# more html/index.html </span><br><span class="line">Hello Nginx</span><br><span class="line">[root@dev demo]# more Dockerfile </span><br><span class="line">FROM nginx</span><br><span class="line">COPY html/* /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">[root@dev demo]# docker build -t test-nginx:1.0 .</span><br><span class="line">Sending build context to Docker daemon  3.584kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 540a289bab6c</span></span><br><span class="line">Step 2/2 : COPY html/* /usr/share/nginx/html</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7debe9edccb6</span></span><br><span class="line">Successfully built 7debe9edccb6</span><br><span class="line">Successfully tagged test-nginx:1.0</span><br><span class="line">[root@dev demo]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">test-nginx          1.0                 7debe9edccb6        6 seconds ago       126MB</span><br><span class="line">busybox             latest              020584afccce        6 weeks ago         1.22MB</span><br><span class="line">busybox             v1.0                020584afccce        6 weeks ago         1.22MB</span><br><span class="line">nginx               latest              540a289bab6c        7 weeks ago         126MB</span><br><span class="line">[root@dev demo]# docker run -it -d --name test-nginx -p 80:80  test-nginx:1.0</span><br><span class="line">05d5cbe48f90983b8470982ee0e81a8125d52129363779ad927ea46fc94afc60</span><br><span class="line">[root@dev demo]# curl localhost:80</span><br><span class="line">Hello Nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm搭建K8s环境</title>
      <link href="2019/11/10/kubeadm/"/>
      <url>2019/11/10/kubeadm/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes是Google内部容器编排引擎Borg的开源版本，之前写过一篇文章介绍过，并且使用Minukube来进行安装，但是那个只能是自己本地来体验一下，在研发测试环境中一般都会是使用Kubeadm来部署Kubernetes集群，Kubeadm是官方提供的Kubernetes集群安装工具，还在不断迭代，目前还没有达到GA版本，所以生产环境中还都是二进制源码安装。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>三台CentOS7.7的虚拟机配置,每台虚拟机两个网卡，一张网卡用于集群内部通信，一张网卡用于上网。</p><table><thead><tr><th style="text-align:center">Hostname</th><th style="text-align:center">CPU</th><th style="text-align:center">Memoroy</th><th style="text-align:center">ip</th></tr></thead><tbody><tr><td style="text-align:center">k8s-master</td><td style="text-align:center">2C</td><td style="text-align:center">2GB</td><td style="text-align:center">192.168.56.4,10.0.2.15</td></tr><tr><td style="text-align:center">k8s-node1</td><td style="text-align:center">2C</td><td style="text-align:center">2GB</td><td style="text-align:center">192.168.56.5,10.0.2.16</td></tr><tr><td style="text-align:center">k8s-node2</td><td style="text-align:center">2C</td><td style="text-align:center">2GB</td><td style="text-align:center">192.168.56.6,10.0.2.17</td></tr></tbody></table><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>Kubernetes集群内部需要通信，需要开放相关端口，具体需要开放哪些端口可以在官方文档中查找，这里为了方便，直接将防火墙关闭。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/enforcing/disabled/' /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">临时</span></span><br><span class="line">swapoff -a </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">永久</span></span><br><span class="line">vim /etc/fstab  删除挂载swap分区</span><br></pre></td></tr></table></figure><h3 id="添加host映射"><a href="#添加host映射" class="headerlink" title="添加host映射"></a>添加host映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="修改iptable规则"><a href="#修改iptable规则" class="headerlink" title="修改iptable规则"></a>修改iptable规则</h3><p>将桥接的IPv4流量传递到iptables的链<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">  </span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="添加Docker源"><a href="#添加Docker源" class="headerlink" title="添加Docker源"></a>添加Docker源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker-1"><a href="#安装Docker-1" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-18.06.1.ce-3.el7 -y</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="安装KubeAdm"><a href="#安装KubeAdm" class="headerlink" title="安装KubeAdm"></a>安装KubeAdm</h2><h3 id="添加KubeAdm源"><a href="#添加KubeAdm源" class="headerlink" title="添加KubeAdm源"></a>添加KubeAdm源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install kubelet-1.13.3 -y</span><br><span class="line">yum install kubectl-1.13.3 -y</span><br><span class="line">yum install kubeadm-1.13.3 -y</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure><h2 id="初始化Master节点"><a href="#初始化Master节点" class="headerlink" title="初始化Master节点"></a>初始化Master节点</h2><p>所有的准备工作都弄好了，上边的所有操作都需要在各个节点进行执行安装，从这里开始将分Master和Node节点进行不同的初始化操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.56.4 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.13.3 \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p><code>--apiserver-advertise-address:</code>  master的集群内部IP</p><p>等待KubeAdm初始化Master完成，最后会有这个提示,需要记录下这个，后边加入Node节点需要。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.56.4:6443 --token oqqiog.wn8a8vj1kbf3cfko --discovery-token-ca-cert-hash sha256:a64ed306edd5ee0bdacf523e0c2098cc6c29c070021ae81bed66f7d241484422</span><br></pre></td></tr></table></figure><h3 id="Kubectl访问K8s"><a href="#Kubectl访问K8s" class="headerlink" title="Kubectl访问K8s"></a>Kubectl访问K8s</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h3 id="安装flannel网络插件"><a href="#安装flannel网络插件" class="headerlink" title="安装flannel网络插件"></a>安装flannel网络插件</h3><p>Kubernetes内部的网络是扁平化的，K8s默认是这样子的，但是现实却不是，所以就有很多网络插件来实现，K8s内部提供了CNI接口来做规范，下面我们使用其中的一种插件来做实现。</p><p>参考flannel的文档<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><p> 安装完成了可以通过<code>kubectl get pods -n kube-system</code>看到flannel相关的pod已经运行起来了。</p><p>这里把kube-flannel.yml文件做个备份<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: policy/v1beta1</span><br><span class="line">kind: PodSecurityPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: psp.flannel.unprivileged</span><br><span class="line">  annotations:</span><br><span class="line">    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default</span><br><span class="line">    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default</span><br><span class="line">    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default</span><br><span class="line">    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default</span><br><span class="line">spec:</span><br><span class="line">  privileged: false</span><br><span class="line">  volumes:</span><br><span class="line">    - configMap</span><br><span class="line">    - secret</span><br><span class="line">    - emptyDir</span><br><span class="line">    - hostPath</span><br><span class="line">  allowedHostPaths:</span><br><span class="line">    - pathPrefix: "/etc/cni/net.d"</span><br><span class="line">    - pathPrefix: "/etc/kube-flannel"</span><br><span class="line">    - pathPrefix: "/run/flannel"</span><br><span class="line">  readOnlyRootFilesystem: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Users and groups</span></span><br><span class="line">  runAsUser:</span><br><span class="line">    rule: RunAsAny</span><br><span class="line">  supplementalGroups:</span><br><span class="line">    rule: RunAsAny</span><br><span class="line">  fsGroup:</span><br><span class="line">    rule: RunAsAny</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Privilege Escalation</span></span><br><span class="line">  allowPrivilegeEscalation: false</span><br><span class="line">  defaultAllowPrivilegeEscalation: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Capabilities</span></span><br><span class="line">  allowedCapabilities: ['NET_ADMIN']</span><br><span class="line">  defaultAddCapabilities: []</span><br><span class="line">  requiredDropCapabilities: []</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Host namespaces</span></span><br><span class="line">  hostPID: false</span><br><span class="line">  hostIPC: false</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  hostPorts:</span><br><span class="line">  - min: 0</span><br><span class="line">    max: 65535</span><br><span class="line"><span class="meta">  #</span><span class="bash"> SELinux</span></span><br><span class="line">  seLinux:</span><br><span class="line">    # SELinux is unused in CaaSP</span><br><span class="line">    rule: 'RunAsAny'</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: flannel</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: ['extensions']</span><br><span class="line">    resources: ['podsecuritypolicies']</span><br><span class="line">    verbs: ['use']</span><br><span class="line">    resourceNames: ['psp.flannel.unprivileged']</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - ""</span><br><span class="line">    resources:</span><br><span class="line">      - pods</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - ""</span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - ""</span><br><span class="line">    resources:</span><br><span class="line">      - nodes/status</span><br><span class="line">    verbs:</span><br><span class="line">      - patch</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: flannel</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: flannel</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: flannel</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: flannel</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-cfg</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">data:</span><br><span class="line">  cni-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "cbr0",</span><br><span class="line">      "cniVersion": "0.3.1",</span><br><span class="line">      "plugins": [</span><br><span class="line">        &#123;</span><br><span class="line">          "type": "flannel",</span><br><span class="line">          "delegate": &#123;</span><br><span class="line">            "hairpinMode": true,</span><br><span class="line">            "isDefaultGateway": true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "type": "portmap",</span><br><span class="line">          "capabilities": &#123;</span><br><span class="line">            "portMappings": true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      "Network": "10.244.0.0/16",</span><br><span class="line">      "Backend": &#123;</span><br><span class="line">        "Type": "vxlan"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-ds-amd64</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        tier: node</span><br><span class="line">        app: flannel</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">              - matchExpressions:</span><br><span class="line">                  - key: beta.kubernetes.io/os</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - linux</span><br><span class="line">                  - key: beta.kubernetes.io/arch</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - amd64</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - operator: Exists</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      serviceAccountName: flannel</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: install-cni</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - cp</span><br><span class="line">        args:</span><br><span class="line">        - -f</span><br><span class="line">        - /etc/kube-flannel/cni-conf.json</span><br><span class="line">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: cni</span><br><span class="line">          mountPath: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">          limits:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">          capabilities:</span><br><span class="line">            add: ["NET_ADMIN"]</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: run</span><br><span class="line">          mountPath: /run/flannel</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: run</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /run/flannel</span><br><span class="line">        - name: cni</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          configMap:</span><br><span class="line">            name: kube-flannel-cfg</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-ds-arm64</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        tier: node</span><br><span class="line">        app: flannel</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">              - matchExpressions:</span><br><span class="line">                  - key: beta.kubernetes.io/os</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - linux</span><br><span class="line">                  - key: beta.kubernetes.io/arch</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - arm64</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - operator: Exists</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      serviceAccountName: flannel</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: install-cni</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-arm64</span><br><span class="line">        command:</span><br><span class="line">        - cp</span><br><span class="line">        args:</span><br><span class="line">        - -f</span><br><span class="line">        - /etc/kube-flannel/cni-conf.json</span><br><span class="line">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: cni</span><br><span class="line">          mountPath: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-arm64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">          limits:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">          capabilities:</span><br><span class="line">             add: ["NET_ADMIN"]</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: run</span><br><span class="line">          mountPath: /run/flannel</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: run</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /run/flannel</span><br><span class="line">        - name: cni</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          configMap:</span><br><span class="line">            name: kube-flannel-cfg</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-ds-arm</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        tier: node</span><br><span class="line">        app: flannel</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">              - matchExpressions:</span><br><span class="line">                  - key: beta.kubernetes.io/os</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - linux</span><br><span class="line">                  - key: beta.kubernetes.io/arch</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - arm</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - operator: Exists</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      serviceAccountName: flannel</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: install-cni</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-arm</span><br><span class="line">        command:</span><br><span class="line">        - cp</span><br><span class="line">        args:</span><br><span class="line">        - -f</span><br><span class="line">        - /etc/kube-flannel/cni-conf.json</span><br><span class="line">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: cni</span><br><span class="line">          mountPath: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-arm</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">          limits:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">          capabilities:</span><br><span class="line">             add: ["NET_ADMIN"]</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: run</span><br><span class="line">          mountPath: /run/flannel</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: run</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /run/flannel</span><br><span class="line">        - name: cni</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          configMap:</span><br><span class="line">            name: kube-flannel-cfg</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-ds-ppc64le</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        tier: node</span><br><span class="line">        app: flannel</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">              - matchExpressions:</span><br><span class="line">                  - key: beta.kubernetes.io/os</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - linux</span><br><span class="line">                  - key: beta.kubernetes.io/arch</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - ppc64le</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - operator: Exists</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      serviceAccountName: flannel</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: install-cni</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-ppc64le</span><br><span class="line">        command:</span><br><span class="line">        - cp</span><br><span class="line">        args:</span><br><span class="line">        - -f</span><br><span class="line">        - /etc/kube-flannel/cni-conf.json</span><br><span class="line">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: cni</span><br><span class="line">          mountPath: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-ppc64le</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">          limits:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">          capabilities:</span><br><span class="line">             add: ["NET_ADMIN"]</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: run</span><br><span class="line">          mountPath: /run/flannel</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: run</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /run/flannel</span><br><span class="line">        - name: cni</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          configMap:</span><br><span class="line">            name: kube-flannel-cfg</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-ds-s390x</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flannel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        tier: node</span><br><span class="line">        app: flannel</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">              - matchExpressions:</span><br><span class="line">                  - key: beta.kubernetes.io/os</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - linux</span><br><span class="line">                  - key: beta.kubernetes.io/arch</span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                      - s390x</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - operator: Exists</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      serviceAccountName: flannel</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: install-cni</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-s390x</span><br><span class="line">        command:</span><br><span class="line">        - cp</span><br><span class="line">        args:</span><br><span class="line">        - -f</span><br><span class="line">        - /etc/kube-flannel/cni-conf.json</span><br><span class="line">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: cni</span><br><span class="line">          mountPath: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-s390x</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">          limits:</span><br><span class="line">            cpu: "100m"</span><br><span class="line">            memory: "50Mi"</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">          capabilities:</span><br><span class="line">             add: ["NET_ADMIN"]</span><br><span class="line">        env:</span><br><span class="line">        - name: POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">        - name: POD_NAMESPACE</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: run</span><br><span class="line">          mountPath: /run/flannel</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          mountPath: /etc/kube-flannel/</span><br><span class="line">      volumes:</span><br><span class="line">        - name: run</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /run/flannel</span><br><span class="line">        - name: cni</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/cni/net.d</span><br><span class="line">        - name: flannel-cfg</span><br><span class="line">          configMap:</span><br><span class="line">            name: kube-flannel-cfg</span><br></pre></td></tr></table></figure></p><h2 id="加入Node节点"><a href="#加入Node节点" class="headerlink" title="加入Node节点"></a>加入Node节点</h2><p> 在初始化Master成功之后Master会提示如何加入集群，分别在每个Node节点上执行即可。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.56.4:6443 --token oqqiog.wn8a8vj1kbf3cfko --discovery-token-ca-cert-hash sha256:a64ed306edd5ee0bdacf523e0c2098cc6c29c070021ae81bed66f7d241484422</span><br></pre></td></tr></table></figure><p> 等待Node节点安装flannel插件和K8s的一些镜像，所有节点都Ready了可以验证集群是否成功。</p><h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><p>在每个Node节点添加阿里云registry加速镜像拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://uxk0ognt.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>重新加载并重启Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="创建deployment"><a href="#创建deployment" class="headerlink" title="创建deployment"></a>创建deployment</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx</span><br></pre></td></tr></table></figure><h3 id="暴露service"><a href="#暴露service" class="headerlink" title="暴露service"></a>暴露service</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx --port=80  --type=NodePort</span><br></pre></td></tr></table></figure><h3 id="访问Service"><a href="#访问Service" class="headerlink" title="访问Service"></a>访问Service</h3><p>暴露service的方式是NodePort，我们可以通过node_ip + node_port来访问nginx</p><p>先来看看nginx的pod是在哪个Node上，以及Serivce暴露出来NodePort<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get pod,svc -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/nginx-5c7588df-pwx7w   1/1     Running   0          11h   10.244.1.5   k8s-node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">service/kubernetes   ClusterIP   10.1.0.1     &lt;none&gt;        443/TCP        13h   &lt;none&gt;</span><br><span class="line">service/nginx        NodePort    10.1.31.46   &lt;none&gt;        80:30315/TCP   11h   app=n</span><br></pre></td></tr></table></figure></p><p>然后我们就可以通过k8s-nod1的30315端口去访问nginx了。</p><p><img src="/asset/img/kubernetes/service:nginx.png" alt=""></p><h2 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h2><h3 id="获取部署yaml文件"><a href="#获取部署yaml文件" class="headerlink" title="获取部署yaml文件"></a>获取部署yaml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><h3 id="修改yaml文件"><a href="#修改yaml文件" class="headerlink" title="修改yaml文件"></a>修改yaml文件</h3><h4 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h4><p>Dashboard development的默认镜像是<code>k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</code>,<br>修改为aliyun的镜像<br><code>registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0</code>。</p><h4 id="修改Service暴露方式"><a href="#修改Service暴露方式" class="headerlink" title="修改Service暴露方式"></a>修改Service暴露方式</h4><p>Dashboard Service 下暴露方式没有写，默认是clusteIP的方式，这样子我们要在外边访问还得借助kube-proxy，所以把暴露方式改为NodePort方式。</p><p>这里还是做一下记录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Copyright 2017 The Kubernetes Authors.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------- Dashboard Secret ------------------- <span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kube-system</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------- Dashboard Service Account ------------------- <span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------- Dashboard Role &amp; Role Binding ------------------- <span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-minimal</span><br><span class="line">  namespace: kube-system</span><br><span class="line">rules:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Allow Dashboard to create <span class="string">'kubernetes-dashboard-key-holder'</span> secret.</span></span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["secrets"]</span><br><span class="line">  verbs: ["create"]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Allow Dashboard to create <span class="string">'kubernetes-dashboard-settings'</span> config map.</span></span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["configmaps"]</span><br><span class="line">  verbs: ["create"]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span></span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["secrets"]</span><br><span class="line">  resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]</span><br><span class="line">  verbs: ["get", "update", "delete"]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Allow Dashboard to get and update <span class="string">'kubernetes-dashboard-settings'</span> config map.</span></span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["configmaps"]</span><br><span class="line">  resourceNames: ["kubernetes-dashboard-settings"]</span><br><span class="line">  verbs: ["get", "update"]</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Allow Dashboard to get metrics from heapster.</span></span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["services"]</span><br><span class="line">  resourceNames: ["heapster"]</span><br><span class="line">  verbs: ["proxy"]</span><br><span class="line">- apiGroups: [""]</span><br><span class="line">  resources: ["services/proxy"]</span><br><span class="line">  resourceNames: ["heapster", "http:heapster:", "https:heapster:"]</span><br><span class="line">  verbs: ["get"]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-minimal</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: kubernetes-dashboard-minimal</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------- Dashboard Deployment ------------------- <span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">          protocol: TCP</span><br><span class="line">        args:</span><br><span class="line">          - --auto-generate-certificates</span><br><span class="line">          # Uncomment the following line to manually specify Kubernetes API server Host</span><br><span class="line">          # If not specified, Dashboard will attempt to auto discover the API server and connect</span><br><span class="line">          # to it. Uncomment only if the default does not work.</span><br><span class="line">          # - --apiserver-host=http://my-address:port</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: kubernetes-dashboard-certs</span><br><span class="line">          mountPath: /certs</span><br><span class="line">          # Create on-disk volume to store exec logs</span><br><span class="line">        - mountPath: /tmp</span><br><span class="line">          name: tmp-volume</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            scheme: HTTPS</span><br><span class="line">            path: /</span><br><span class="line">            port: 8443</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: kubernetes-dashboard-certs</span><br><span class="line">        secret:</span><br><span class="line">          secretName: kubernetes-dashboard-certs</span><br><span class="line">      - name: tmp-volume</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      serviceAccountName: kubernetes-dashboard</span><br><span class="line">      # Comment the following tolerations if Dashboard must not be deployed on master</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-role.kubernetes.io/master</span><br><span class="line">        effect: NoSchedule</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> ------------------- Dashboard Service ------------------- <span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure></p><p>修改好了之后应用yaml文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure></p><p>等待Dashboard完成。</p><p>查看pod以及service<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get pod,svc -o wide  -n kube-system | grep dashboard</span><br><span class="line"></span><br><span class="line">pod/kubernetes-dashboard-7d77666777-fggbb   1/1     Running   0          11h   10.244.1.6     k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">service/kubernetes-dashboard   NodePort    10.1.126.96   &lt;none&gt;        443:31858/TCP   11h   k8s-app=kubernetes-dashboard</span><br></pre></td></tr></table></figure></p><p>访问k8s-node1节点的31858端口即可访问dashboard</p><p><img src="/asset/img/kubernetes/login.png" alt=""></p><p>要想登录Dashboard，我们还得创建令牌(Token)</p><h3 id="创建SA"><a href="#创建SA" class="headerlink" title="创建SA"></a>创建SA</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create serviceaccount dashboard-admin -n kube-system</span><br></pre></td></tr></table></figure><p>绑定为<code>cluster-admin</code>角色<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br></pre></td></tr></table></figure></p><p>查看新建的SA的token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get secret -n kube-system | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-wmx9x                      kubernetes.io/service-account-token   3      26h</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl  describe secret  dashboard-admin-token-wmx9x -n kube-system</span><br><span class="line">Name:         dashboard-admin-token-wmx9x</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: 7a56e06d-02b6-11ea-b50b-08002709cf5c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4td214OXgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiN2E1NmUwNmQtMDJiNi0xMWVhLWI1MGItMDgwMDI3MDljZjVjIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.hcRfR9lcBcTvtVNn0eY5GaQxHisgFX249bKQ-7E-svJGcNNwIZYunJMptz4mY9Yv7xzkYqdMRuqJLDXTeEQYNDZKWAlOq4C85S5yvE1Wusg6-_LaDF0oWARvuJeP4H0owy0wwf4zoEncE_GRxdAPZJbaVP1ZVG1kERN_vb_aRHj9S0QNVmhl-gpIBkDK3Bf03KlIeoGs0yiUvcj9ZtVGRvLGTaae1dPFCLSowFqbyHgCrROwiUksP8eMEjLQ8KLstOoJl7c9Vaxr1T8gLCa35gIaScfKI6zdSAl-wrcQ0pYIYFpMyB355wHebw2aCjpNynNJ00ffvksSyNbRGWuViA</span><br></pre></td></tr></table></figure><p>将token复制，使用token去登录Dashboard。</p><p><img src="/asset/img/kubernetes/dashboard.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客一周年了</title>
      <link href="2019/10/03/one-year/"/>
      <url>2019/10/03/one-year/</url>
      
        <content type="html"><![CDATA[<p>写博客，在9102年感觉有点落伍，特别是向你非IT的朋友说这事的时候，他们无一例外的都会感到惊讶，他们大多数都会委婉的问：现在应该没有多少人看博客了吧，大家都是看公众号，看知乎，看微博，甚至是今日头条这些。<br><a id="more"></a></p><p>但是对于程序员来说，写博客的还是有不少，而受欢迎的程度可以用一个现象来佐证，一个好的技术博客在面试中会有不少加分项。</p><p>我自己写博客也快一年了，从去年国庆算起，断断续续的写了一年，基本上每个月都会至少写一篇，主要是为了对自己的技术栈做整理，方便需要用到的时候可以快速查阅，也是自己的一个学习成果展示。但是8月份和9月份断更了，这两个月里我非常的低落。</p><p>8月6号，太奶奶走了。原本我可以见最后一面，但是我没有回去，那个周末我是打算回去，但是因为一些事情耽误了，然后周二太奶奶就走了。太奶奶从小到大一直非常疼我，住在我家6年了，一直是我妈在照顾，没能见最后一面是我一辈子的遗憾。其实我之前有感觉，只是没想到来的这么快，我也开始相信人与人之间是会有心灵感应，这个说起来有点迷信，但是只有经历过的人才会相信。</p><p>9月份也一直持续低落，干什么都提不起劲，但是又没有干什么，有心结的时候干什么都畏畏缩缩，容易出现一些低级错误。趁着中秋放假和女朋友去了海边散心，慢慢思考一些事，也开始慢慢的习惯干一件事之前就先想为什么要做这件事，动力是什么，如果决定干了，那就用心去做好这件事。</p><p>就像写博客，我为什么要写博客？</p><p>为了记录自己的技术学习过程，总结学习成果？如果是这样子，那博客园或者微信公众号可能比较合适，说不定在这些平台上写的多了阅读量持续累积，影响力提升之后可能会发展出第二副业，当然这是最美好的一种设想。</p><p>但这是我想要的嘛？我觉得不是。</p><p>记录技术学习只是一部分，我的博客不应该只有技术，还需要有生活、自己的想法等等，而这些东西放在博客园或者微信公众号这些平台上是不太合适的。放在公众号里就有点贩卖焦虑的意思了，现在的公众号有很多都是营销文章，更多的是过度营销了，抓住一个点就忽悠，甚至是贩卖焦虑。我不太喜欢这种在公众场合贩卖焦虑，因此，我unfo了三百多个公众号，这时候我才反应过来，我是什么时候关注了这么多公众号，而这些公众号每天推送给我的都是鸡汤、焦虑这类的文章，索性就一口气unfo了。</p><p>一句话归纳，我对博客的定位是记录我的一切，总结提升自己的段位。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么会抑郁？</title>
      <link href="2019/07/13/why-depress/"/>
      <url>2019/07/13/why-depress/</url>
      
        <content type="html"><![CDATA[<p>一个人为什么会抑郁？我认为可以归结为两个原因：缺少爱的支持以及缺少正反馈。这段时间我在反思，为什么自己的情绪这么容易陷入负面，甚至一度往绝望的方向偏移。<br><a id="more"></a></p><p>第一，大多数抑郁症患者背后有一个不是那么和谐的家庭。小时候的家庭暴力和争吵，势必会给孩子带来很强的不安全感。作为人的本能，当不安全感来袭时，会先去试图思考如何生存。</p><p>这也是抑郁症的人会比别人来的敏感和懂事的原因。只不过这种懂事并不是父母教育的来的结果，而是人在危机意识来临时做的本能反应和自我保护机制。</p><p>抑郁症患者，很多都具备了讨好型人格，也是自我保护衍生的结果。缺少爱的支持的人总是小心翼翼地讨好式地活着，他们害怕纷争害怕被抛弃。他们懂事而敏感，因此也就更容易受伤。当心灵的创伤没有得到有效愈合时，伤疤会不断扩大，直到感受不到痛。</p><p>第二点，缺少正反馈。人这一辈子，其实是很需要正反馈的。这种正反馈可以表现为别人的赞赏和夸奖，自己心灵的满足感和成就感，实质性的荣誉和奖项。</p><p>一个人在积极的氛围里成长，受到积极的正反馈的激励，这样的人性格就容易乐观积极。反之，如果一个人老是接触到负面信息，面对的只有指责和打击，就容易觉得自己一无是处，产生“生我何用”的负面情绪。</p><p>当一个人缺少爱的感情支持，又缺少正反馈的正向激励，这样的人就容易陷入抑郁黑暗的漩涡。“反正没有人在乎我的感受”“我也挺没用的”这样的情绪会反复作怪，先是失去自信，然后变得自卑，接着开始失望，后来失望一点一点累积就变成了绝望</p><p>那到底怎样才能走出抑郁呢？</p><p>我认为，抑郁症不能纯粹靠药物和他人进行的他救，而是要靠“自救”。他人的帮助只是暂时性安慰的良药，即便聊的很投机，但负面情绪却总是会在当自己一个人独处的时候汹涌而来，直至吞噬自己。</p><p>自救更像是一个寻找爱发现爱的自我救赎的过程。具体表现为，重新建立自我意识，换一个环境生活，重新建立良好的人际关系支撑。</p><p>环境对于治疗抑郁症是有一定作用的，可能我们生活在环境本身里，只缘身在此山中，无法感受得到到底环境对一个人的影响有多大。我们总是试图从自己身上寻找安全感，而忽略了环境对人格塑造的影响力。</p><p>就好比，明明是环境带给你痛苦，但是我却在反省自己，久而久之，你只会越来越痛苦。</p><p>环境就像一个圈，你不去跳出去，不去改变，而困在里面一遍又一遍做所谓的内心检讨，吾日三省吾身，我要给自己打气，要微笑要加油，要克服敏感克服自卑。</p><p>说实话，喊喊口号还好，但要落到实处真的挺难的，罗马不是一日建成的，一个人不是一两天就能变得成自卑或者敏感，因此想摆脱也不是那么容易的。</p><p>抑郁症有一个原因，恰恰是因为你太会反省了。你老觉得自己错，从自己身上找原因，然后做不到自己又会难过，又觉得自己没用，最后恶性循环让自己在牛角尖里越钻越深，越来越觉得改变不了，越来越绝望。</p><p>当有一个地方给你带来太多灰暗的经历，总让你敏感的内心总是受伤。如果解决和摆脱不了的话，那就勇敢一点，换一个地方或者换一份工作，正视自己，然后去遇见新的人，建立新的稳固的人际关系。</p><p>内心积极一点，然后从环境中获得力量，让积极的环境带动你成长为积极的样子。</p><p>换个环境，遇见不同的人和事，也许抑郁症就好了。</p><p>生活最迷人的地方，还是在于你会不断遇见新的事物和有趣的人。</p><p>只要没有被重重打倒，一切都还有圆满的余地。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用性能调优实践</title>
      <link href="2019/06/25/java-application-profile-optimize/"/>
      <url>2019/06/25/java-application-profile-optimize/</url>
      
        <content type="html"><![CDATA[<p>本文是LZ在网上看到的文章，LZ觉得写得非常好，很有实际意义，可以作为以后的一个调优指导，故将文章搬到这里，如有侵权，欢迎与我联系，原文地址：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-performance-tuning-practice/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-performance-tuning-practice/index.html</a></p><a id="more"></a><p>Java应用性能优化是一个老生常谈的话题，典型的性能问题如页面相应慢、接口超时、服务器负载高、并发数低、数据库频繁死锁等。尤其是“糙快猛”的互联网开发模型大行其道的今天，随着系统访问量的日益增加和代码的臃肿，各种性能问题开始纷至沓来。Java应用性能的瓶颈点非常多，比如磁盘、内存、网络I/O等系统因素，Java代码，JVM GC,数据库，缓存等。</p><p>笔者根据个人经验，将Java性能优化分为4个层级：应用层，数据库层，框架层，JVM层。每层的优化程度逐级增加，设计的知识和解决的方式也尽不相同。比如应用层需要理解代码逻辑，通过Java线程栈定位有问题代码行等；数据库层面需要分析SQL，定位死锁等；框架层需要懂源代码，理解框架机制；JVM层需要对GC的类型和的工作机制有深入了解，对各种JVM参数了然于胸。</p><p>围绕Java性能优化，有两种基本的分析方法：现场分析法和事后分析法。现场分析法通过保留现场，再采用诊断工具分析定位。现场分析对线上影响比较大，部分场景不太合适。事后分析法需要尽可能多的收集现场数据，然后立即恢复服务，同时针对收集的现场数据进行事后分析和复现。</p><p>下面我们从性能诊断工具出发，分享一些工作中遇到的真实案例。</p><h2 id="性能诊断工具"><a href="#性能诊断工具" class="headerlink" title="性能诊断工具"></a>性能诊断工具</h2><p>性能诊断一种是针对已经确定有性能问题的系统和代码进行诊断，还有一种是对预上线系统提前性能测试，确定性能是否符合上线要求。本文主要针对前者，后者可以使用各种性能压测工具进行压测，比如JMeter等，但这不在本文讨论范围。针对Java应用，性能诊断工具主要分为两层：OS层面和Java应用层面。</p><h3 id="OS诊断"><a href="#OS诊断" class="headerlink" title="OS诊断"></a>OS诊断</h3><p> OS诊断主要关注的是CPU，Memory，I/O三个方面。</p><h4 id="CPU诊断"><a href="#CPU诊断" class="headerlink" title="CPU诊断"></a>CPU诊断</h4><p>对于CPU主要关注平均负载(Load Average),CPU使用率，上下文切换次数(Context Switch)。</p><p>通过top命令可以查看系统平均负载和CPU使用率，输入o之后输入字段可以进行倒序排序<br>top -pid <pid> 查看某个进程的系统负载情况和cpu使用率</pid></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ top -pid <span class="number">1492</span></span><br><span class="line"><span class="string">Processes:</span> <span class="number">374</span> total, <span class="number">3</span> running, <span class="number">371</span> sleeping, <span class="number">1518</span> threads            <span class="number">10</span>:<span class="number">46</span>:<span class="number">03</span></span><br><span class="line">Load <span class="string">Avg:</span> <span class="number">2.19</span>, <span class="number">2.15</span>, <span class="number">2.12</span>  CPU <span class="string">usage:</span> <span class="number">3.61</span>% user, <span class="number">3.37</span>% sys, <span class="number">93.1</span>% idle</span><br><span class="line"><span class="string">SharedLibs:</span> <span class="number">254</span>M resident, <span class="number">51</span>M data, <span class="number">25</span>M linkedit.</span><br><span class="line"><span class="string">MemRegions:</span> <span class="number">93149</span> total, <span class="number">3736</span>M resident, <span class="number">106</span>M <span class="keyword">private</span>, <span class="number">1037</span>M shared.</span><br><span class="line"><span class="string">PhysMem:</span> <span class="number">10</span>G used (<span class="number">2500</span>M wired), <span class="number">5673</span>M unused.</span><br><span class="line"><span class="string">VM:</span> <span class="number">2268</span>G vsize, <span class="number">1313</span>M framework vsize, <span class="number">14421757</span>(<span class="number">64</span>) swapins, <span class="number">15490743</span>(<span class="number">0</span>) swapou</span><br><span class="line"><span class="string">Networks:</span> <span class="string">packets:</span> <span class="number">32037356</span><span class="regexp">/29G in, 20370581/</span><span class="number">3792</span>M out.</span><br><span class="line"><span class="string">Disks:</span> <span class="number">3967796</span><span class="regexp">/117G read, 5007257/</span><span class="number">171</span>G written.</span><br></pre></td></tr></table></figure><p>平均负载 <code>Load AVG</code> 有3列数字2.19, 2.15, 2.12，分别表示过去1分钟，5分钟，15分钟机器的负载。按照经验，若数值小于0.7*CPU个数，则系统工作正常。这台机器是2个CPU,15分钟内平均负载为2左右，这个其实还好，如果是四五倍的话那这个就负载比较高了，这就需要定位具体的原因了。</p><p>通过vmstat命令可以查看CPU的上下文切换次数，上下文切换场景主要有如下几种：</p><ol><li>时间片用完，CPU正常调度下一个任务。</li><li>被其他优先级更高的任务抢占。</li><li>执行任务碰到I/O阻塞，挂起当前任务，切换到下一个任务。</li><li>用户代码主动挂起当前任务让出CPU。</li><li>多任务抢占资源，由于没有抢到被挂起。</li><li>硬件中断。</li></ol><p>Java线程上下文切换主要来自共享资源的竞争，一般单个对象加锁很少成为系统瓶颈，除非锁粒度过大。但在一个访问频度高，对多个对象连续加锁的代码块中就容易出现大量的上下文切换，成为系统瓶颈。比如在我们的系统中就出现过log4j1.x在较大并发下大量打印日志，出现频繁上下文切换，大量线程阻塞，导致系统吞吐量大降的情况，其代码如下，升级到log4j2.x才解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Category c = <span class="keyword">this</span>; c != <span class="keyword">null</span>; c=c.parent) &#123;</span><br><span class="line">    <span class="comment">// Protected against simultaneous call to addAppender, removeAppender,…</span></span><br><span class="line">    <span class="keyword">synchronized</span>(c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.aai != <span class="keyword">null</span>) &#123; </span><br><span class="line">            write += c.aai.appendLoopAppenders(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也给我们平时写代码的时候提了个醒，synchronized尽量放在for循环外面。</p><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>从操作系统角度，内存关注应用进程是否足够，可以使用free -m命令查看内存的使用情况。通过top命令可以查看进程使用的虚拟内存VIRT和物理内存RES,根据公式RES = VIRE +  SWAP可以推算出具体应用使用的交换分区(Swap)情况，使用交换分区过大会影响Java应用性能，可以将Swap值尽可能调小。因为对于Java应用来说，占用太多交换分区可能会影响性能，毕竟磁盘的性能比内存慢太多。</p><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h4><p>I/O包括磁盘I/O和网络I/O，一般情况下磁盘更容易出现I/O瓶颈。通过iostat可以查看磁盘的读写情况，通过CPU的I/O wait可以看出磁盘I/O是否正常。如果磁盘I/O一直处于很高的状态，说明磁盘太慢或者故障，成为了性能瓶颈，需要进行应用优化或者更换磁盘。</p><h3 id="Java应用诊断工具"><a href="#Java应用诊断工具" class="headerlink" title="Java应用诊断工具"></a>Java应用诊断工具</h3><h4 id="应用代码诊断"><a href="#应用代码诊断" class="headerlink" title="应用代码诊断"></a>应用代码诊断</h4><p>应用代码性能问题是相对好解决的一类性能问题。通过一些应用层面监控报警，如果确定有问题的功能和代码，直接通过代码就能定位；或者通过top + jstack 就可以定位，找出有问题的线程栈，定位到问题线程的代码上，也可以发现问题。对于更复杂，逻辑更多的代码段，通过Stopwatch打印性能日志往往也可以定位大多数应用代码性能问题。</p><p>常用Java应用诊断包括线程、堆栈、GC方面的诊断。</p><h5 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h5><p>jstack命令通常配合top使用，通过<code>top -H -p &lt;pid&gt;</code>定位为Java进程和线程，再利用<code>jstack -l &lt;pid&gt;</code>导出线程栈。由于线程栈是瞬态的，因此需要多次dump，一般3次dump，每次间隔5秒。将top定位的Java线程pid转换成16进制，得到Java线程栈中的nid，可以站到对应的问题线程栈。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么当码农？</title>
      <link href="2019/06/14/codeman/"/>
      <url>2019/06/14/codeman/</url>
      
        <content type="html"><![CDATA[<p>为什么当码农？这个问题挺好，工作两年了竟然从未没想过，这个我都有点意外，为什么没想呢？因为从事软件这个行业是我喜欢的，我也一直在追求技术的道路上奔跑，别的什么真的不关心。时至今日，为什么会开始考虑这个问题了呢？因为关心的不再只是技术了。<br><a id="more"></a></p><p>写这篇博客的时候是在回家的动车上，今天交房了回去验收，本来是7点半的动车，第一次没赶上动车，没想到人竟然那么多，比我上周端午回去的时候还多，票是改签过的不能再改签了，只能重新再买，这里吐槽一下12306，你们这都什么规则啊，只能改签一次，而且改签之后就不能退票，你这不是坑爹吗？</p><p>没办法，独裁者的世界里我只能遵守游戏规则，重新买票吧，这个时候问题就来了，买了票之后我竟然有点心疼，突然一个想法闪现，让我愣住了，工作了两年竟然还会为了200块钱心疼，觉得自己好失败啊。加上最近交房装修家具这些要我来置办，最近看了一些，才觉得有钱真好，没钱真TM心塞。</p><p>是的，我想挣钱了，特别渴望的那种，上次这种感觉还是在学校学技术的时候，人都有一个特点，当你特别渴望一个东西的时候你会想方设法的去拥有它。</p><p>回到本文的主题，为什么要当码农？中国码农千千万，对技术纯粹追求的应该有不少，被老板画大饼的也有不少，但是大部分应该都是觉得这行业比较公平，工资比较高，上升渠道比较透明等等。其实说白了就是这行业工资高，这应该是大部分人之前入行的想法，而我当时入行的想法也比较纯粹，我是真的喜欢，而且我可以以此谋生，这我就很满足了。</p><p>时至今日，摆在我面前的不止写代码，还有很多，比如攒钱，装修，买车，结婚，生子等等这些很多事情，这些人生大事都有一个特点，就是比较费钱。所以面向工资编程才是最重要的，这才是对自己，对家人负责的态度，如果你对技术有追求不太认可面向工资编程的话，比如我，不妨问一下自己一个问题，如果两个程序员，一个工资一万，一个工资两万，你觉得他们谁的技术水平高？可能你就会反驳了，这明显不是一个级别的，不能拿这极端的来比较，要看平均，其实我是不想反驳回去的，因为这就是我身边的例子，信不信由你跟我没关系，我只能说心情很复杂。</p><p>听朋友的劝，两年了该出去看看了，他就是去年12月跳槽到了BAT中的一家，薪资翻了一倍，是的，没错，就是上面的那个例子中的其中一个。</p><p>如果不出去，留下来会是什么情况呢？</p><p>现在负责的东西已经熟练了，没有啥挑战，甚至有些疲倦了，能不能通过换组来解决这个方式呢？这个是行不通的，换组只能消除疲倦，并不能有实在的提升，虽然最近收到了调薪邮件，但是还是觉得不够，想要翻倍，公司的薪资调整肯定是不能满足的，所以打算出去了，年初的时候就有想出去的念头了，不过不怎么强烈，这次真的得好好准备了，还有两个月时间就是金九银十了，加油！</p><p>在网上看到过小米2016的年会表演节目《咋了开发》,写的好真实，这就是码农的真实状态，致敬纯粹可爱的码农们~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">【咋了开发】</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">听说又改需求了？</span><br><span class="line"></span><br><span class="line">咋了 咋了 咋了</span><br><span class="line">PA PA PA </span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">听说测试又开BUG了？</span><br><span class="line"></span><br><span class="line">咋 咋咋 咋了</span><br><span class="line">PA PA PA </span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">女朋友跟人跑了？</span><br><span class="line"></span><br><span class="line">咋 咋咋 咋了</span><br><span class="line">有代码陪我呀</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">写Bug写一周了？</span><br><span class="line"></span><br><span class="line">咋 咋了</span><br><span class="line">这不正常吗？</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">有没有Review代码</span><br><span class="line"></span><br><span class="line">HA HA HA</span><br><span class="line">做梦吧</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">再这样要丢工作了？</span><br><span class="line"></span><br><span class="line">咋了 咋了</span><br><span class="line">要来**吗？</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">软件园路又堵了</span><br><span class="line"></span><br><span class="line">堵没电了我的特斯拉</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">WiFi又断网了啦？</span><br><span class="line"></span><br><span class="line">马上就要放假了</span><br><span class="line"></span><br><span class="line">咋了开发，服务器又崩溃了？</span><br><span class="line"></span><br><span class="line">啊 这锅云平台背啦</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">你怎么总是被黑啊？</span><br><span class="line"></span><br><span class="line">这歌词是PM写哒</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">年终奖怎么花啊？</span><br><span class="line"></span><br><span class="line">该换个机械键盘啦</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">可用性4个9啦？</span><br><span class="line"></span><br><span class="line">咋 这都是小意思呀</span><br><span class="line"></span><br><span class="line">咋了开发</span><br><span class="line">16年你辛苦了</span><br><span class="line"></span><br><span class="line">咋 咋了 这么客气呐</span><br></pre></td></tr></table></figure><p>但是我现在的感受下面这首改编的歌曲可能更能表达出来,纯属调侃~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">【码农泪】</span><br><span class="line"></span><br><span class="line">一步踏错终身错</span><br><span class="line">下海码字为了生活</span><br><span class="line">码农也是人</span><br><span class="line">心中的痛苦向谁说</span><br><span class="line"></span><br><span class="line">为了生活的逼迫</span><br><span class="line">颗颗泪水往肚吞落</span><br><span class="line">难道这是命</span><br><span class="line">注定一生和那Bug过</span><br><span class="line">键盘敲啊敲</span><br><span class="line">啪啪又哒哒</span><br><span class="line">人格早已酒中泡</span><br><span class="line"></span><br><span class="line">夜夜TANGO CHA CHA</span><br><span class="line">RUMDA ROCK AND ROLL</span><br><span class="line">谁叫我是一个码农</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神级注释</title>
      <link href="2019/05/21/comment/"/>
      <url>2019/05/21/comment/</url>
      
        <content type="html"><![CDATA[<p>注释，是为了给后来的代码阅读者提供更好的指引。但是程序员是不喜欢写注释的，所以要么是不写，要么写的是一些神级的注释，我们的代码里边就有拉丁文注释，搜索了一下才知道出自《圣经》，对这些注释比较感兴趣，所以从网上收集了一些神级的注释。<br><a id="more"></a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * 这个公司没有年终奖的,兄弟别指望了,也别来了,我准备辞职了</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> <span class="bullet">* 另外这个项目有很多*</span>Bug* 你坚持不了多久的,拜拜!</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * You may think you know what <span class="keyword">the</span> following code <span class="keyword">does</span>.</span><br><span class="line"> * But you dont. Trust <span class="keyword">me</span>.</span><br><span class="line"> * Fiddle <span class="keyword">with</span> <span class="keyword">it</span>, <span class="keyword">and</span> youll spend many a sleepless</span><br><span class="line"> * night cursing <span class="keyword">the</span> moment you thought youd be clever</span><br><span class="line"> * enough <span class="keyword">to</span> <span class="string">"optimize"</span> <span class="keyword">the</span> code <span class="keyword">below</span>.</span><br><span class="line"> * Now close this <span class="built_in">file</span> <span class="keyword">and</span> go play <span class="keyword">with</span> something <span class="keyword">else</span>.</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 你可能会认为你读得懂以下的代码。但是你不会懂的，相信我吧。</span><br><span class="line"> * 要是你尝试玩弄这段代码的话，你将会在无尽的通宵中不断地咒骂自己为什么会认为自己聪明到可以优化这段代码。</span><br><span class="line"> * 现在请关闭这个文件去玩点别的吧。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For the brave souls who get this far: You are the chosen ones,</span></span><br><span class="line"><span class="comment"> * the valiant knights of programming who toil away, without rest,</span></span><br><span class="line"><span class="comment"> * fixing our most awful code. To you, true saviors, kings of men,</span></span><br><span class="line"><span class="comment"> * I say this: never gonna give you up, never gonna let you down,</span></span><br><span class="line"><span class="comment"> * never gonna run around and desert you. Never gonna make you cry,</span></span><br><span class="line"><span class="comment"> * never gonna say goodbye. Never gonna tell a lie and hurt you.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 致终于来到这里的勇敢的人：</span></span><br><span class="line"><span class="comment"> * 你是被上帝选中的人，是英勇的、不敌辛苦的、不眠不休的来修改我们这最棘手的代码的编程骑士。</span></span><br><span class="line"><span class="comment"> * 你，我们的救世主，人中之龙，我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己，</span></span><br><span class="line"><span class="comment"> * 永远不要哭啼，永远不要说再见，永远不要说谎来伤害自己。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dear maintainer:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Once you are done trying to 'optimize' this routine,</span></span><br><span class="line"><span class="comment"> * and have realized what a terrible mistake that was,</span></span><br><span class="line"><span class="comment"> * please increment the following counter as a warning</span></span><br><span class="line"><span class="comment"> * to the next guy:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * total_hours_wasted_here = 42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 亲爱的维护者：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果你尝试了对这段程序进行'优化'</span></span><br><span class="line"><span class="comment"> * 下面这个计数器的个数用来对后来人进行警告</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 浪费在这里的总时间 = 42h</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * When I wrote this, only God and I understood what I was doing</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Now, God only knows</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>写这段代码的时候，只有上帝和我知道它是干嘛的</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>现在，只有上帝知道</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br></pre></td></tr></table></figure><p> 有神级注释怎么能少魔性图呢？</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**                                                                          </span><br><span class="line">*          .,:,,,                                        .::,,,:<span class="function">:.</span>          </span><br><span class="line">*        .::::,,;;,                                  .,;;:,,<span class="string">....</span><span class="function">:i</span>:         </span><br><span class="line">*        <span class="function">:i</span>,.::::,;i<span class="function">:.</span>      <span class="string">....</span>,,:::::::::,<span class="string">....</span>   .;i:,.  <span class="string">......</span>;i.        </span><br><span class="line">*        :;<span class="string">..</span>:::;:::<span class="function">:i</span>;,,:::;:,,,,,,,,,,<span class="string">..</span>,.,,::<span class="function">:iri</span><span class="function">:.</span> .,<span class="function">:irsr</span>:,.;i.        </span><br><span class="line">*        ;;<span class="string">..</span>,::::;;;;ri,,,.                    <span class="string">..</span>,,:;s1s1ssrr;,.;r,        </span><br><span class="line">*        :;. ,::;ii;:,     . <span class="string">...................</span>     .;iirri;;;,,;i,        </span><br><span class="line">*        ,i. .;ri<span class="function">:.</span>   <span class="string">...</span> <span class="string">............................</span>  .,,:;:,,,;i:        </span><br><span class="line">*        <span class="function">:s</span>,.;r<span class="function">:...</span> <span class="string">.......................................</span> .::;:<span class="function">:s</span>;        </span><br><span class="line">*        ,1r:<span class="function">:.</span> <span class="string">.............</span>,,,.,,:,,<span class="string">........................</span>,;iir;        </span><br><span class="line">*        ,s;<span class="string">...........</span>     <span class="string">..</span>:<span class="function">:.</span>,;:,,.          <span class="string">...............</span>,;1s        </span><br><span class="line">*       <span class="function">:i</span>,<span class="string">..</span>,.              .,:,,::,.          <span class="string">..........</span> <span class="string">.......</span>;1,       </span><br><span class="line">*      ir,<span class="string">....</span><span class="function">:rrssr</span>;:,       ,,.,:<span class="function">:.</span>     <span class="string">.r5S9989398G95hr</span>;. <span class="string">....</span>,.<span class="function">:s</span>,      </span><br><span class="line">*     ;r,<span class="string">..</span>,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,<span class="string">..</span>,<span class="string">..</span><span class="function">:r</span>:     </span><br><span class="line">*    <span class="function">:r</span>;<span class="string">..rGGh</span>,  <span class="function">:SAG</span>;;G@BS<span class="function">:.</span>,,,,,,,,,<span class="string">.r83</span>:      hHH1sXMBHHHM3..,,,,<span class="string">.ir.</span>    </span><br><span class="line">*   ,si,<span class="string">.1GS</span>,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH<span class="comment">#X,.,,,,,,rr    </span></span><br><span class="line">*   ;1:,,SH:   <span class="string">.A</span>@&amp;&amp;B<span class="comment">#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,   </span></span><br><span class="line">*  <span class="string">.rr</span>,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,<span class="function">:h</span>&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.  </span><br><span class="line">*  <span class="function">:1</span><span class="function">:....</span><span class="function">:5</span>&amp;XSi;r8BMBHHA9r:,<span class="string">......</span>,,,,<span class="function">:ii19GG88899XHHH</span>&amp;GSr.      <span class="string">...</span>,<span class="function">:rs.</span>  </span><br><span class="line">*  ;s.     .<span class="function">:sS8G8GG889hi.</span>        <span class="string">....</span>,,:;:,.<span class="function">:irssrriii</span>:,.        <span class="string">...</span>,,i1,  </span><br><span class="line">*  ;1,         <span class="string">..</span>,<span class="string">....</span>,,isssi;,        .,,.                      <span class="string">....</span>,<span class="string">.i1</span>,  </span><br><span class="line">*  ;h:               i9HHBMBBHAX9:         .                     <span class="string">...</span>,,,rs,  </span><br><span class="line">*  ,1i..            <span class="function">:A</span><span class="comment">#MBBBBMHB##s                             ....,,,;si.  </span></span><br><span class="line">*  <span class="string">.r1</span>,<span class="string">..</span>        ,<span class="string">..</span>;3BMBBBHBB<span class="comment">#Bh.     ..                    ....,,,,,i1;   </span></span><br><span class="line">*   <span class="function">:h</span>;<span class="string">..</span>       .,<span class="string">..</span>;,1XBMMMMBXs,.,, <span class="string">..</span> :: ,.               <span class="string">....</span>,,,,,,ss.   </span><br><span class="line">*    ih: <span class="string">..</span>    .;;;, ;;<span class="function">:s58A3i</span>,<span class="string">..</span>    ,. ,.:,,.             <span class="string">...</span>,,,,,:,s1,    </span><br><span class="line">*    <span class="string">.s1</span>,<span class="string">....</span>   .,;sh,  ,iSAXs;.    ,.  ,,<span class="string">.i85</span>            <span class="string">...</span>,,,,,,<span class="function">:i1</span>;     </span><br><span class="line">*     <span class="string">.rh</span>: <span class="string">...</span>     rXG9XBBM<span class="comment">#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;      </span></span><br><span class="line">*      <span class="string">.s5</span>: <span class="string">.....</span>    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       <span class="string">........</span>,,,,:,,sh;       </span><br><span class="line">*      . ihr, <span class="string">...</span>  .         <span class="string">..</span>                    <span class="string">........</span>,,,,,;11<span class="function">:.</span>       </span><br><span class="line">*         ,s1i. <span class="string">...</span>  <span class="string">..</span>,,,<span class="string">..</span>,,,.,,.,,.,<span class="string">..</span>       <span class="string">........</span>,,.,,.;s5i.         </span><br><span class="line">*          .<span class="function">:s1r</span>,<span class="string">......................</span>       <span class="string">..............</span>;shs,           </span><br><span class="line">*          . .<span class="function">:shr</span><span class="function">:.</span>  <span class="string">....</span>                 <span class="string">..............</span>,ishs.             </span><br><span class="line">*              .,issr;,<span class="string">...</span> <span class="string">...........................</span>,is1s;.               </span><br><span class="line">*                 .,is1si;:,<span class="string">....................</span>,:;ir1sr;,                  </span><br><span class="line">*                    <span class="string">..</span><span class="function">:isssssrrii</span>;::::::;;iirsssssr;<span class="function">:..</span>                    </span><br><span class="line">*                         .,:<span class="function">:iiirsssssssssrri</span>;;<span class="function">:.</span>                      </span><br><span class="line">*/</span><br></pre></td></tr></table></figure> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**                                                                    </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*            </span>.,,       .,:;;iiiiiiiii;;:,,.     .,,                   </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*          </span>rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,                </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*         </span>r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,               </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*            </span>.;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:                  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*          </span>:rsriii;;r::::::::::::::::::::::;;,;;iiirsi,               </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*       </span>.,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.           </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*    </span>,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span>,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@@s,,:::;;;::,,.   .;.      </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*    </span>:ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span>.ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri         </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span>iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;        </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span>,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span>iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>.rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.      </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.      </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.      </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>.rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span>;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:       </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span>.rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri        </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span>;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*    </span>irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*     </span>irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*      </span>;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*       </span>:rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*        </span>.;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:              </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*          </span>.;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.               </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*            </span>.:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*               </span>.:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                    </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*                  </span>.,:;iirrrrrrrrrrrrrrrrri;:.                        </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*                        </span>..,:::;;;;:::,,.                             </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  佛曰:</span></span><br><span class="line"><span class="comment"> *          写字楼里写字间，写字间里程序员；</span></span><br><span class="line"><span class="comment"> *          程序人员写程序，又拿程序换酒钱。</span></span><br><span class="line"><span class="comment"> *          酒醒只在网上坐，酒醉还来网下眠；</span></span><br><span class="line"><span class="comment"> *          酒醉酒醒日复日，网上网下年复年。</span></span><br><span class="line"><span class="comment"> *          但愿老死电脑间，不愿鞠躬老板前；</span></span><br><span class="line"><span class="comment"> *          奔驰宝马贵者趣，公交自行程序员。</span></span><br><span class="line"><span class="comment"> *          别人笑我忒疯癫，我笑自己命太贱；</span></span><br><span class="line"><span class="comment"> *          不见满街漂亮妹，哪个归得程序员？</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                    .<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *                  .<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>:  FUCK YOU</span><br><span class="line"> *             ..<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'</span></span></span><br><span class="line"><span class="symbol"><span class="string"> *           '</span></span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'</span></span></span><br><span class="line"><span class="symbol"><span class="string"> *             .::::::::::</span></span></span><br><span class="line"><span class="symbol"><span class="string"> *        '</span></span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>..</span><br><span class="line"> *             ..<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *           <span class="string">``</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span></span><br><span class="line"> *            <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">``</span></span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'        .:::.</span></span></span><br><span class="line"><span class="symbol"><span class="string"> *           ::::'</span></span>   <span class="string">':::::'</span>       .<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *         .<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'      ::::     .:::::::'</span></span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *        .<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'       :::::  .:::::::::'</span></span> <span class="string">':::::.</span></span><br><span class="line"><span class="string"> *       .::'</span>        <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.<span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'      '</span></span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *      .<span class="symbol">:</span><span class="symbol">:<span class="string">'         ::::::::::::::'</span></span>         <span class="string">``</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>.</span><br><span class="line"> *  ...<span class="symbol">:</span><span class="symbol">:</span>:           <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:<span class="string">'              ``::.</span></span></span><br><span class="line"><span class="symbol"><span class="string"> * ```` '</span></span><span class="symbol">:</span>.          <span class="string">':::::::::'</span>                  <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span>..</span><br><span class="line"> *                    <span class="string">'.:::::'</span>                    <span class="string">':'</span><span class="string">``</span><span class="string">``</span>..</span><br><span class="line"> *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>      <span class="comment">┌─┐</span>       <span class="comment">┌─┐</span> <span class="literal">+</span> <span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>   <span class="comment">┌──┘</span> <span class="comment">┴───────┘</span> <span class="comment">┴──┐</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>   <span class="comment">│</span>                 <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>   <span class="comment">│</span>       <span class="comment">───</span>       <span class="comment">│</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>   <span class="comment">███████───███████</span> <span class="comment">│</span><span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>   <span class="comment">│</span>                 <span class="comment">│</span><span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>   <span class="comment">│</span>       <span class="comment">─┴─</span>       <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>   <span class="comment">│</span>                 <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>   <span class="comment">└───┐</span>         <span class="comment">┌───┘</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>         <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>         <span class="comment">│</span>   <span class="literal">+</span> <span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>       <span class="comment">│</span>         <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>         <span class="comment">└──────────────┐</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>                        <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>                        <span class="comment">├─┐</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>                        <span class="comment">┌─┘</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">│</span>                        <span class="comment">│</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>       <span class="comment">└─┐</span>  <span class="comment">┐</span>  <span class="comment">┌───────┬──┐</span>  <span class="comment">┌──┘</span>  <span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>         <span class="comment">│</span> <span class="comment">─┤</span> <span class="comment">─┤</span>       <span class="comment">│</span> <span class="comment">─┤</span> <span class="comment">─┤</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>         <span class="comment">└──┴──┘</span>       <span class="comment">└──┴──┘</span>  <span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span> <span class="literal">+</span></span><br><span class="line"> <span class="comment">*</span>                <span class="comment">神兽保佑</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*</span>               <span class="comment">代码无BUG!</span></span><br><span class="line"><span class="comment"></span> <span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                        d*<span class="comment">##$.</span></span><br><span class="line"> *  zP<span class="string">""</span><span class="string">""</span><span class="string">"$e.           $"</span>    <span class="variable">$o</span></span><br><span class="line"> * <span class="number">4</span><span class="variable">$ </span>      <span class="string">'$          $"      $</span></span><br><span class="line"><span class="string"> * '</span><span class="variable">$ </span>       <span class="string">'$        J$       $F</span></span><br><span class="line"><span class="string"> *  '</span>b        <span class="variable">$k</span>       <span class="variable">$&gt;</span>       $</span><br><span class="line"> *   <span class="variable">$k</span>        <span class="variable">$r</span>     J<span class="variable">$ </span>      d$</span><br><span class="line"> *   <span class="string">'$         $     $"       $~</span></span><br><span class="line"><span class="string"> *    '</span><span class="variable">$ </span>       <span class="string">"$   '$E       $</span></span><br><span class="line"><span class="string"> *     $         $L   $"</span>      <span class="variable">$F</span> ...</span><br><span class="line"> *      <span class="variable">$.</span>       <span class="number">4</span>B   <span class="variable">$ </span>     <span class="variable">$$</span><span class="variable">$*</span><span class="string">""</span><span class="string">"*b</span></span><br><span class="line"><span class="string"> *      '$        $.  $$     $$      $F</span></span><br><span class="line"><span class="string"> *       "</span><span class="variable">$ </span>      R<span class="variable">$ </span> <span class="variable">$F</span>     <span class="variable">$"</span>      $</span><br><span class="line"> *        <span class="variable">$k</span>      ?<span class="variable">$ </span>u*     dF      .$</span><br><span class="line"> *        ^<span class="variable">$.</span>      <span class="variable">$$</span><span class="string">"     z$      u$$$$e</span></span><br><span class="line"><span class="string"> *         #$b             $E.dW@e$"</span>    ?$</span><br><span class="line"> *          <span class="comment">#$           .o$$# d$$$$c    ?F</span></span><br><span class="line"> *           <span class="variable">$ </span>     .d<span class="variable">$$</span><span class="comment">#" . zo$&gt;   #$r .uF</span></span><br><span class="line"> *           <span class="variable">$L</span> .u<span class="variable">$*</span><span class="string">"      $&amp;$$$k   .$$d$$F</span></span><br><span class="line"><span class="string"> *            $$"</span>            <span class="string">""</span>^<span class="string">"$$$P"</span><span class="variable">$P9</span>$</span><br><span class="line"> *           JP              .o<span class="variable">$$</span><span class="variable">$$</span><span class="symbol">u:</span><span class="variable">$P</span> <span class="variable">$$</span></span><br><span class="line"> *           <span class="variable">$ </span>         ..ue<span class="variable">$"</span>      <span class="string">""</span>  <span class="variable">$"</span></span><br><span class="line"> *          d<span class="variable">$ </span>         <span class="variable">$F</span>              $</span><br><span class="line"> *          <span class="variable">$$</span>     ....udE             <span class="number">4</span>B</span><br><span class="line"> *           <span class="comment">#$    """"` $r            @$</span></span><br><span class="line"> *            ^<span class="variable">$L</span>        <span class="string">'$            $F</span></span><br><span class="line"><span class="string"> *              RN        4N           $</span></span><br><span class="line"><span class="string"> *               *$b                  d$</span></span><br><span class="line"><span class="string"> *                $$k                 $F</span></span><br><span class="line"><span class="string"> *                 $$b                $F</span></span><br><span class="line"><span class="string"> *                  $""               $F</span></span><br><span class="line"><span class="string"> *                  '</span><span class="variable">$ </span>               $</span><br><span class="line"> *                   <span class="variable">$L</span>               $</span><br><span class="line"> *                   <span class="string">'$               $</span></span><br><span class="line"><span class="string"> *                    $               $</span></span><br><span class="line"><span class="string"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/<span class="symbol">*</span><span class="symbol">*</span></span><br><span class="line"> <span class="symbol">*</span>              ,----------------,              ,---------,</span><br><span class="line"> <span class="symbol">*</span>         ,-----------------------,          ,<span class="string">"        ,"</span>|</span><br><span class="line"><span class="string"> *       ,"                      ,"</span>|<span class="string">        ,"        ,"  </span>|</span><br><span class="line"> <span class="symbol">*</span>      +-----------------------+  |<span class="string">      ,"        ,"    </span>|</span><br><span class="line"> <span class="symbol">*</span>      |<span class="string">  .-----------------.  </span>|<span class="string">  </span>|<span class="string">     +---------+      </span>|</span><br><span class="line"> <span class="symbol">*</span>      |<span class="string">  </span>|<span class="string">                 </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">     </span>|<span class="string"> -==----'</span>|<span class="string">      </span>|</span><br><span class="line"> <span class="symbol">*</span>      |<span class="string">  </span>|<span class="string">  I LOVE DOS!    </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">      </span>|</span><br><span class="line"> <span class="symbol">*</span>      |<span class="string">  </span>|<span class="string">  Bad command or </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">/----</span>|<span class="string">`---=    </span>|<span class="string">      </span>|</span><br><span class="line"> <span class="symbol">*</span>      |<span class="string">  </span>|<span class="string">  C:\&gt;_          </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">   ,/</span>|<span class="string">==== ooo </span>|<span class="string">      ;</span></span><br><span class="line"><span class="string"> *      </span>|<span class="string">  </span>|<span class="string">                 </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">  // </span>|<span class="string">(((( [33]</span>|<span class="string">    ,"</span></span><br><span class="line"><span class="string"> *      </span>|<span class="string">  `-----------------'  </span>|<span class="string">," .;'</span>|<span class="string"> </span>|<span class="string">((((     </span>|<span class="string">  ,"</span></span><br><span class="line"><span class="string"> *      +-----------------------+  ;;  </span>|<span class="string"> </span>|<span class="string">         </span>|<span class="string">,"</span></span><br><span class="line"><span class="string"> *         /_)______________(_/  //'   </span>|<span class="string"> +---------+</span></span><br><span class="line"><span class="string"> *    ___________________________/___  `,</span></span><br><span class="line"><span class="string"> *   /  oooooooooooooooo  .o.  oooo /,   \,"-----------</span></span><br><span class="line"><span class="string"> *  / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,"</span></span><br><span class="line"><span class="string"> * /_==__==========__==_ooo__ooo=_/'   /___________,"</span></span><br><span class="line"><span class="string"> *</span></span><br><span class="line"><span class="string"> */</span></span><br></pre></td></tr></table></figure><p> 最后，再来一个，愿代码永无BUG<br> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/<span class="symbol">*</span><span class="symbol">*</span></span><br><span class="line"> <span class="symbol">*</span>                    _ooOoo_</span><br><span class="line"> <span class="symbol">*</span>                   o8888888o</span><br><span class="line"> <span class="symbol">*</span>                   88<span class="string">" . "</span>88</span><br><span class="line"> <span class="symbol">*</span>                   (|<span class="string"> -_- </span>|<span class="string">)</span></span><br><span class="line"><span class="string"> *                    O\ = /O</span></span><br><span class="line"><span class="string"> *                ____/`---'\____</span></span><br><span class="line"><span class="string"> *              .   ' \\</span>|<span class="string"> </span>|<span class="string">// `.</span></span><br><span class="line"><span class="string"> *               / \\</span>|||<span class="string"> : </span>|||<span class="string">// \</span></span><br><span class="line"><span class="string"> *             / _</span>|||||<span class="string"> -:- </span>|||||<span class="string">- \</span></span><br><span class="line"><span class="string"> *               </span>|<span class="string"> </span>|<span class="string"> \\\ - /// </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span>             |<span class="string"> \_</span>|<span class="string"> ''\---/'' </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span>              \ .-\__ `-` ___/-. /</span><br><span class="line"> <span class="symbol">*</span>           ___`. .' /--.--\ `. . __</span><br><span class="line"> <span class="symbol">*</span>        .<span class="string">""</span> '<span class="variable">&lt; `.___\_&lt;|&gt;</span>_/___.' &gt;'<span class="string">""</span>.</span><br><span class="line"> <span class="symbol">*</span>       |<span class="string"> </span>|<span class="string"> : `- \`.;`\ _ /`;.`/ - ` : </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span>         \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> <span class="symbol">*</span> ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line"> <span class="symbol">*</span>                    `=---='</span><br><span class="line"> <span class="symbol">*</span></span><br><span class="line"> <span class="symbol">*</span> .............................................</span><br><span class="line"> <span class="symbol">*</span>          佛祖保佑             永无BUG</span><br><span class="line"> <span class="symbol">*</span>/</span><br></pre></td></tr></table></figure></p><p> 醒醒吧，不可能滴^_^!<br> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/<span class="symbol">*</span><span class="symbol">*</span></span><br><span class="line"> <span class="symbol">*</span> _ooOoo_</span><br><span class="line"> <span class="symbol">*</span> o8888888o</span><br><span class="line"> <span class="symbol">*</span> 88<span class="string">" . "</span>88</span><br><span class="line"> <span class="symbol">*</span> (|<span class="string"> -_- </span>|<span class="string">)</span></span><br><span class="line"><span class="string"> *  O\ = /O</span></span><br><span class="line"><span class="string"> * ___/`---'\____</span></span><br><span class="line"><span class="string"> * .   ' \\</span>|<span class="string"> </span>|<span class="string">// `.</span></span><br><span class="line"><span class="string"> * / \\</span>|||<span class="string"> : </span>|||<span class="string">// \</span></span><br><span class="line"><span class="string"> * / _</span>|||||<span class="string"> -:- </span>|||||<span class="string">- \</span></span><br><span class="line"><span class="string"> * </span>|<span class="string"> </span>|<span class="string"> \\\ - /// </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span> |<span class="string"> \_</span>|<span class="string"> ''\---/'' </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span> \ .-\__ `-` ___/-. /</span><br><span class="line"> <span class="symbol">*</span> ___`. .' /--.--\ `. . __</span><br><span class="line"> <span class="symbol">*</span> .<span class="string">""</span> '<span class="variable">&lt; `.___\_&lt;|&gt;</span>_/___.' &gt;'<span class="string">""</span>.</span><br><span class="line"> <span class="symbol">*</span> |<span class="string"> </span>|<span class="string"> : `- \`.;`\ _ /`;.`/ - ` : </span>|<span class="string"> </span>|</span><br><span class="line"> <span class="symbol">*</span> \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> <span class="symbol">*</span> ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line"> <span class="symbol">*</span> `=---='</span><br><span class="line"> <span class="symbol">*</span>          .............................................</span><br><span class="line"> <span class="symbol">*</span>           佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> <span class="symbol">*</span>/</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录</title>
      <link href="2019/04/13/sso/"/>
      <url>2019/04/13/sso/</url>
      
        <content type="html"><![CDATA[<p>单点登录应该是大部分公司都有的一个系统，这个系统的作用就是用户只需登录一次就可以在多个系统之间切换而不用重新登录。刚毕业的时候接触过点单点登录，不过久了有点忘了，这篇文章来讲述单点登录相关知识点，并且根据两种主流实现方式CAS和JWT来讲解。<br><a id="more"></a></p><h2 id="单点登录背景"><a href="#单点登录背景" class="headerlink" title="单点登录背景"></a>单点登录背景</h2><p>我们先从最开始的方案来说，以前的单点登录是基于Cookie来实现的，这种方式是将用户名和密码加密之后存放在Cookie中，之后访问系统时通过过滤器来校验用户权限，如果有权限就从Cookie中取出用户名和密码来进行登录，让用户感觉上只用登录一次。</p><p>基于Cookie的这种方式的缺点很明显，多个系统都有登录逻辑的代码，如果有修改那就多个系统都得修改，还有的就是多次传输用户名字和密码，即使是加密的也还是存在增加被盗风险，还有一个非常不方便的就是跨域，这个对现在的系统来说是不合适的，如果是二级域的还可以通过设置cookie范围为顶域，这个时候cookie还能共享，但是现代化的系统非常多，可能顶级域名都不是一样，这个时候cookie就没办法共享了，这种方案就不合适了。</p><p>接下来我们看一下统一认证中心方案，基于Cookie方案的登录认证过于分散，而且代码逻辑重复，现在我们将认证统一化，形成一个独立的服务，当用户需要进行登录操作的时候，统一重定向到认证服务，流程如下：</p><ol><li>用户访问A系统，A系统的过滤器判断用户是否登录，如果没有登录，则重定向到认证服务。</li><li>重定向到认证服务，输入用户名和密码登录，认证服务将用户登录的信息记录到服务器的session中</li><li>认证服务发给浏览器一个特殊的凭证，浏览器将凭证交给A系统，A系统拿着凭证去认证服务验证凭证的有效性，从而判断用户是否登录成功。</li></ol><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>CAS是Yale大学开源的一个统一认证服务，CAS包括两个部分：CAS Server 和 CAS Client，CAS Server负责对用户的认证工作，需要独立部署，CAS Client与受保护的客户端一起部署，通过Filter形式保护资源，负责处理对客户端受保护资源的访问请求，需要对请求方重定向到CAS Server进行认证。</p><p>工作流程如下：<br>1、用户访问A系统，A系统是需要登录，但是用户现在没有登录<br>2、重定向到CAS Server，即UAP(统一登录平台)，UAP也没有登录，跳转到登录页面<br>3、用户填写用户名、密码，UAP进行认证后，将登录状态写入UAP的session中，浏览器写入UAP域下的cookie<br>4、UAP登录完成后会生成一个ST(Service Ticket),然后跳转到A系统，同时将ST作为参数传递给A系统<br>5、A系统拿到ST后，后台过滤器拦截到，CAS Client向UAP发送请求，验证ST是否有效<br>6、验证通过后，A系统将登录状态写入session并设置A系统域下的cookie</p><p>这样子用户就完成了A系统的登录，接下来我们看一下用户继续访问B系统</p><p>1、用户访问B系统，B系统没有登录，重定向到UAP<br>2、用户已登录过UAP，不需要重新登录认证<br>3、UAP生成ST，跳转到B系统，将ST作为参数传给B系统<br>4、B系统拿到ST之后，CAS Client向UAP验证ST是否有效<br>5、验证通过后，B系统将登录状态写入session并设置B系统域下cookie</p><p>通过对这个流程分析我们发现，用户登录了A系统之后再访问B系统就不会再出现重定向到登录页面，这样就完成了单点登录，即使A系统和B系统时不同的域，session不同享也都没关系。</p><p>接下来做个CAS的DEMO</p><p>先来完成cas服务端的部署,从Github上将cas的代码检出来，然后build war包，放到tomcat里边执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/apereo/</span>cas-overlay-template.git</span><br><span class="line">git checkout remotes<span class="regexp">/origin/</span><span class="number">5.3</span>  <span class="comment"># master分支是gradle构建，5.x是maven构建</span></span><br><span class="line">.<span class="regexp">/mvnw clean package</span></span><br></pre></td></tr></table></figure></p><p>等待打包执行完毕，在target目录下有cas.war,然后把这个war包放到tomcat8上就可以了，因为cas已经采用springboot改造过了，打出来的war包最好放在tomcat8或者更高的版本之上，这样子才不会有问题的，启动完之后访问 <a href="http://localhost:8080/cas/login" target="_blank" rel="noopener">http://localhost:8080/cas/login</a> 就可以看到登录页面了，默认的用户名和密码为casuser/Mellon,这个写在springboot的配置文件application.properties文件中。</p><p>通常在实际项目中，我们是用https来进行访问，下面来配置https访问<br>先用jdk工具生成秘钥库<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> cas-tomcat -keyalg RSA -keystore cas.keystore</span><br></pre></td></tr></table></figure></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  classes keytool -genkey -alias cas-tomcat -keyalg RSA -keystore cas.keystore</span><br><span class="line">Enter keystore password:  </span><br><span class="line">Re-enter <span class="keyword">new</span> password: </span><br><span class="line">What <span class="keyword">is</span> your <span class="keyword">first</span> <span class="built_in">and</span> <span class="keyword">last</span> name?</span><br><span class="line">  [Unknown]:  sso.demo.<span class="keyword">com</span></span><br><span class="line">What <span class="keyword">is</span> the name of your organizational unit?</span><br><span class="line">  [Unknown]:  demo.<span class="keyword">com</span></span><br><span class="line">What <span class="keyword">is</span> the name of your organization?</span><br><span class="line">  [Unknown]:  demo.<span class="keyword">com</span></span><br><span class="line">What <span class="keyword">is</span> the name of your City <span class="built_in">or</span> Locality?</span><br><span class="line">  [Unknown]:  gz</span><br><span class="line">What <span class="keyword">is</span> the name of your State <span class="built_in">or</span> Province?</span><br><span class="line">  [Unknown]:  gd</span><br><span class="line">What <span class="keyword">is</span> the two-letter country code <span class="keyword">for</span> this unit?</span><br><span class="line">  [Unknown]:  <span class="keyword">cn</span></span><br><span class="line">Is CN=sso.demo.<span class="keyword">com</span>, OU=demo.<span class="keyword">com</span>, O=demo.<span class="keyword">com</span>, L=gz, ST=gd, C=<span class="keyword">cn</span> correct?</span><br><span class="line">  [<span class="keyword">no</span>]:  <span class="keyword">y</span></span><br><span class="line"></span><br><span class="line">Enter key password <span class="keyword">for</span> <span class="symbol">&lt;cas-tomcat&gt;</span></span><br><span class="line">(RETURN <span class="keyword">if</span> same <span class="keyword">as</span> keystore password):  </span><br><span class="line">Re-enter <span class="keyword">new</span> password:</span><br></pre></td></tr></table></figure><p>导出证书<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -<span class="keyword">export</span> -<span class="keyword">file</span> cas.crt -<span class="keyword">alias</span> cas-tomcat -keystore cas.keystore</span><br></pre></td></tr></table></figure></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  classes keytool -<span class="keyword">export</span> -<span class="keyword">file</span> cas.crt -<span class="keyword">alias</span> cas-tomcat -keystore cas.keystore</span><br><span class="line"></span><br><span class="line">Enter keystore password:  </span><br><span class="line">Certificate <span class="keyword">stored</span> <span class="keyword">in</span> <span class="keyword">file</span> &lt;cas.crt&gt;</span><br></pre></td></tr></table></figure><p>将证书导入JDK中，不然认证了跳过来就会报错，ssl建立连接错误<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -keystore $&#123;JAVA_HOME&#125;/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">security</span>/<span class="title">cacerts</span> -<span class="title">file</span> <span class="title">cas</span>.<span class="title">crt</span> -<span class="title">alias</span> <span class="title">cas</span>-<span class="title">tomcat</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  classes sudo keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/security/cacerts -file cas.crt -alias cas-tomcat</span><br><span class="line"></span><br><span class="line">Enter keystore password:  </span><br><span class="line">Re-enter new password: </span><br><span class="line">Owner: <span class="attribute">CN</span>=sso.demo.com, <span class="attribute">OU</span>=demo.com, <span class="attribute">O</span>=demo.com, <span class="attribute">L</span>=gz, <span class="attribute">ST</span>=gd, <span class="attribute">C</span>=cn</span><br><span class="line">Issuer: <span class="attribute">CN</span>=sso.demo.com, <span class="attribute">OU</span>=demo.com, <span class="attribute">O</span>=demo.com, <span class="attribute">L</span>=gz, <span class="attribute">ST</span>=gd, <span class="attribute">C</span>=cn</span><br><span class="line">Serial number: 5890e418</span><br><span class="line">Valid <span class="keyword">from</span>: Sun May 26 11:41:41 CST 2019 until: Sat Aug 24 11:41:41 CST 2019</span><br><span class="line">Certificate fingerprints:</span><br><span class="line"> MD5:  69:69:38:A9:52:03:D2:3D:DA:28:03:CD:53:59:48:23</span><br><span class="line"> SHA1: F2:9A:55:04:E8:A2:E6:4C:C2:85:8D:EA:9A:47:E6:27:C1:DC:41:B2</span><br><span class="line"> SHA256: 1B:25:A6:B9:F9:36:AD:E7:CD:28:2E:57:D8:30:8C:8A:9E:6C:07:CB:03:70:78:5E:AE:9C:AB:72:27:0A:13:B3</span><br><span class="line"> Signature algorithm name: SHA256withRSA</span><br><span class="line"> Version: 3</span><br><span class="line"></span><br><span class="line">Extensions: </span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 93 1B 15 7E 7D 26 A3 51   35 ED 51 30 E4 EA 52 77  <span class="built_in">..</span><span class="built_in">..</span>.&amp;.Q5.Q0<span class="built_in">..</span>Rw</span><br><span class="line">0010: 19 9C 93 C1                                        <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Trust this certificate? [<span class="literal">no</span>]:  y</span><br><span class="line">Certificate was added <span class="keyword">to</span> keystore</span><br></pre></td></tr></table></figure><p>接下来配置tomcat的server.xml<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"443"</span> <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span><br><span class="line">   <span class="attribute">maxThreads</span>=<span class="string">"150"</span> <span class="attribute">SSLEnabled</span>=<span class="string">"true"</span> <span class="attribute">scheme</span>=<span class="string">"https"</span> <span class="attribute">secure</span>=<span class="string">"true"</span></span><br><span class="line">   <span class="attribute">clientAuth</span>=<span class="string">"false"</span> <span class="attribute">sslProtocol</span>=<span class="string">"TLS"</span> <span class="attribute">keystoreFile</span>=<span class="string">"/Users/***/apache-tomcat-8.5.41/webapps/cas/WEB-INF/classes/cas.keystore"</span> <span class="attribute">keystorePass</span>=<span class="string">"123456"</span>  /&gt;</span><br></pre></td></tr></table></figure></p><p>配置域名映射<code>127.0.0.1  sso.demo.com</code>,这样子就可以通过<a href="https://sso.demo.com/cas" target="_blank" rel="noopener">https://sso.demo.com/cas</a> 来进行访问了。</p><p>cas服务端就部署完成了，接下来我们将Cas Client和具体的应用系统结合起来。</p><p>具体代码见Github仓库中的cas模块，启动CasApplication类。</p><p><div class="github-widget" data-repo="ruanzz/sso"></div><br>cas模块是一个SpringBoot应用，跑起来之后访问<a href="https://localhost:8099/test" target="_blank" rel="noopener">https://localhost:8099/test</a> 就会自动跳转到<a href="https://sso.demo.com/cas/login" target="_blank" rel="noopener">https://sso.demo.com/cas/login</a> 认证过之后会重定向回来访问<a href="https://localhost:8099/test" target="_blank" rel="noopener">https://localhost:8099/test</a></p><p>到这里CAS基本认证流程就OK了。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes</title>
      <link href="2019/04/07/kubernetes/"/>
      <url>2019/04/07/kubernetes/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes是Google开源的容器编排引擎，是Google内部Borg系统的开源版本，是现在十分火热的技术，堪比之前的Hadoop和OpenStack。源代码开源在Github，是CNCF云原生基金会的第一个毕业项目，开启了云原生时代。本文是Kubernetes的入门。<br><a id="more"></a></p><p>Kubernetes简称k8s，k和s中间有8个单词所以简称k8s，Kubernetes采用Go语言开发，一般Kubernetes使用的容器技术有Docker或者rkt，Docker也是Go语言开发的，而且更加有意思的是Go语言本身也是用Go来写的，Go目前在云计算、中间件、区块链等领域疯狂的攻城略地,可以预见在不久的将来，Go将会成为主流语言。</p><p>在正式进入Kubernetes之前，首先得来了解一下Docker，Docker目前是很多公司都拥抱的技术，可以在开发、测试、运维阶段都保证环境一致，并且很容易通过编排引擎来调度容器，这个是后话。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Docker是一种轻量级的虚拟化技术，是在操作系统级别虚拟化，各个容器之间共享操作系统资源，每个容器都是操作系统的一个进程，通过CGroup和NameSpace技术来达到资源的限制以及隔离，和虚拟机相比，隔离的不是很彻底，所以安全性一直被诟病，但是这个不影响它的欢迎程度，基本的计算、存储、网络资源隔离都是不错的，并且启动一个容器是秒级的，虚拟机是分钟级，所以容器可以在秒级别进行动态扩容和释放，这个和云最初的设想完全吻合，也是容器大受欢迎的原因。</p><p>我的环境是OS X系统，可以直接通过<code>brew cask install docker</code>来安装Docker，其他的平台可以参考官方文档来安装，Docker是C/S架构，安装完成之后命令行客户端就完成了，启动服务端之后就可以通过客户端来与后台的dockerd进程来通信了。客户端的话是通过<code>docker</code>命令进行交互，与服务端通信也是通过的客户端发送命令，然后由客户端与服务端进行通信，通过命令<code>docker info</code>可以查看Docker服务端的信息。</p><p>Docker主要是三大块的内容:容器，镜像，仓库，这三个最主要的是镜像，其他两个跟镜像有关，像仓库就是存储镜像的地方，容器是从镜像来启动的，镜像也是我们开发人员来重点关注和维护的，之前我们的打包出来给运维人员是一个jar包或者war包，现在我们打包出来的是镜像，直接push到我们内部搭建的仓库中，测试和运维直接从仓库中拉取镜像来启动容器即可，这就保证了开发，测试，运维的环境一致。</p><p>镜像的构建由开发人员来维护，构建Docker镜像需要Dockerfile文件，这个就是构建Docker镜像的描述文件，这里边有一系列的语法，这里不做赘述，下面我们来看一下Dockerfile.<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> daocloud.io/nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> html/* /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure></p><p>第一行是<code>FROM</code>开头，表示从哪个镜像开始构建，这里是以<code>daocloud.io/nginx</code>为原始镜像，第二行是<code>COPY</code>拷贝<code>html</code>这个文件夹的文件到原始镜像的html文件夹中，这样子就会新构建了一层镜像，这就要求在Dockerfile同级目录下有一个html文件夹，html文件夹下有一个文件index.html。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  html more index.html </span><br><span class="line">&lt;h1&gt;Hello Docker&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>接下来我们使用<code>docker build -t nginx-demo .</code> 来构建镜像，镜像名为<code>nginx-demo</code> ，<code>.</code>代表的是构建的上下文环境，这样子就可以直接找到html文件夹，一般这个上下文环境只要包含我们必须的文件，不然构建镜像会相当的慢。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  demo docker build -t nginx-demo .</span><br><span class="line">Sending build context to Docker daemon  3.584kB</span><br><span class="line">Step 1/2 : FROM daocloud.io/nginx</span><br><span class="line">latest: Pulling from nginx</span><br><span class="line">Digest: sha256:dabecc7dece2fff98fb00add2f0b525b7cd4a2cacddcc27ea4a15a7922ea47ea</span><br><span class="line">Status: Downloaded newer image for daocloud.io/nginx:latest</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 2bcb04bdb83f</span></span><br><span class="line">Step 2/2 : COPY html/* /usr/share/nginx/html</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 2289cd357a0e</span></span><br><span class="line">Successfully built 2289cd357a0e</span><br><span class="line">Successfully tagged nginx-demo:latest</span><br></pre></td></tr></table></figure></p><p>这是构建的过程，非常的清晰，每一步都会生成一层镜像，第一步就是拉镜像，生成第一次层，id为2bcb04bdb83f，第二步是拷贝，生成第二层，id为2289cd357a0e，最后生成了镜像nginx-demo:latest，如果没有指定镜像标签的，默认的是latest，实际开发中一般是要指定tag的，tag就是对应的版本。好了，我们通过命令<code>docker image ls</code>来查看一下镜像信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  demo docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx-demo          latest              2289cd357a0e        5 minutes ago       109MB</span><br><span class="line">daocloud.io/nginx   latest              2bcb04bdb83f        11 days ago</span><br></pre></td></tr></table></figure></p><p>接下来就是启动容器<code>docker run --name nginx-80 -d -p 8080:80 nginx-demo</code>,指定容器名称为nginx-80，<code>-d</code>是指后台运行，<code>-p</code>指的是端口映射，将Docker Host的8080端口映射到容器的80端口，<code>nginx-demo</code>是镜像名，即这个容器是通过<code>nginx-demo</code>这个镜像来启动的。启动成功之后命令返回的是容器的长id，然后我们通过访问nginx来看看效果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  demo curl http://127.0.0.1:8080</span><br><span class="line">&lt;h1&gt;Hello Docker&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>好了，Docker我们暂时就说到这了，Docker本身是一个相对底层的容器引擎，和KVM，Xen这种属于同一级别的东西，现实中我们不可能直接这样子操作，像KVM有一个OpenStack云平台来管理操作，那是正常人使用的东西，像这种用命令行一个一个启动容器的对用户不太友好，而且调度也不方便。所以我们来看看今天的主角Kubernetes。</p><h2 id="Kubernetes架构"><a href="#Kubernetes架构" class="headerlink" title="Kubernetes架构"></a>Kubernetes架构</h2><p>先从大的方面来了解一下Kubernetes，Kubernetes集群包含一个master节点和多个node节点，master是控制集群的中心，运行有多个服务，包括面向用户的API Server,负责维护集群状态的Controller Manager，负责调度任务的Scheduler。node是提供CPU，内存和存储资源的节点，每个node节点运行这kubelet和kube-proxy，kubelet是一个agent客户端，负责维护node节点的运行状态以及和master进行通信，kube-proxy主要是实现集群网络服务。</p><p>这个可以从Kubernetes的官方网站去了解，而且官方文档的还有一个特别棒的就是可以实时交互一个k8s集群，这样子就可以一边看Tutorial文档，一边实际操作，跟着文档做一遍下来就会对Kubernetes比较清晰了，这里要赞一下官方文档，真的写的很清晰，我的渣渣英语水平都可以很顺畅看完整个Tutorial。</p><h2 id="搭建Kubernetes集群"><a href="#搭建Kubernetes集群" class="headerlink" title="搭建Kubernetes集群"></a>搭建Kubernetes集群</h2><p>我们这里不是真实的生产环境，真实的生产环境搭建还是根据官方文档来参考搭建，我们是试验一个东西，官方文档推荐使用Minikub来搭建一个单节点的集群来做开发测试，当然，如果资源足够的话还是搭建一个完整的真实集群。</p><p>先来安装客户端kubectl，这个可以跟Kubernetes集群通信,还有Minikube也一起安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br><span class="line">brew cask install minikube</span><br></pre></td></tr></table></figure></p><p>安装完成之后我们来安装一个单节点的k8s集群，使用VirtualBox来做虚拟层。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --vm-driver virtualbox</span><br></pre></td></tr></table></figure></p><p>运行命令之后我们打开VirtualBox看到已经自动创建了一台虚拟机，并且开始安装相关的服务，因为这个是单节点，master和node都是它，所以服务还是有点多的，等待的时间会比较长，如果安装失败了，删掉再重来即可，运行命令<code>minikube delete</code>会把虚拟机删掉重新，然后再重新安装，生成新的虚拟机来安装即可。</p><p>安装完成之后minikube会自动配置kubectl，把它指向k8s的API服务，运行命令<code>kubectl config current-context</code>查看<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  html kubectl config current-context</span><br><span class="line">minikube</span><br></pre></td></tr></table></figure></p><p>这样子我们就可以使用kubectl和k8s集群通信了，安装好了集群之后我们可以通过命令<code>minikube start</code>和<code>minikube stop</code>来启动和停止集群。还要k8s提供了UI界面，通过命令<code>minikube dashboard</code>来打开，这样子就可以通过页面来操作编排了，但是作为一个开发人员，还是通过命令来和k8s集群通信比较舒服，下面我们就通过命令行来操作编排。</p><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><p>在部署之前，我们先将本地Docker客户端和k8s主机的Docker Host的服务端建立联系，运行命令<br><code>eval $(minikube docker-env)</code>,这样子就可以将二者关联起来，关联起来主要是是想构建镜像，模拟开发中的滚动的发布，这个实际开发中一般是通过的Jenkins来触发，我们为了简单就直接手动触发了。</p><p>之前我们已经构建过镜像，不过是在本地，现在本地的docker客户端已经连到了k8s的Docker Host，这个时候是没有刚才我们构建的镜像，通过命令<code>docker build -t k8s-demo:0.1 .</code>构建，构建完成了再通过命令<code>docker image ls</code>可以看到<code>k8s-demo</code>这个镜像，tag是0.1。</p><p>一般我们开发人员会写一个deployment.yml,描述如何进行部署<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata: </span><br><span class="line"> name: k8s-demo-deployment</span><br><span class="line">spec:</span><br><span class="line"> replicas: 3</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: k8s-demo</span><br><span class="line">  spec:</span><br><span class="line">   containers:</span><br><span class="line">    - name: k8s-demo-pod</span><br><span class="line">      image: k8s-demo:0.1</span><br><span class="line">      ports:</span><br><span class="line">       - containerPort: 80</span><br></pre></td></tr></table></figure></p><p>这里边定义了部署的副本数是3个，每个部署都是一个pod，什么是pod？pod是k8s最小的资源调度单位，一般由多个container组成，这些container共享资源，还定义了container的相关信息，包括名称，使用的镜像以及容器端口。这样子我们通过命令来应用部署<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl create -f deployment.yml </span><br><span class="line">deployment.extensions/k8s-demo-deployment created</span><br></pre></td></tr></table></figure></p><p>通过命令<code>kubectl get rs</code>来查看<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl get rs                  </span><br><span class="line">NAME                             DESIRED   CURRENT   READY   AGE</span><br><span class="line">k8s-demo-deployment-774878f86f   3         3         3       5m</span><br></pre></td></tr></table></figure></p><p>然后查看pod相关信息，发现确实是3份<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl get pods</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">k8s-demo-deployment-774878f86f-ct8hj   1/1     Running   0          6m</span><br><span class="line">k8s-demo-deployment-774878f86f-gxrp7   1/1     Running   0          6m</span><br><span class="line">k8s-demo-deployment-774878f86f-v77hl   1/1     Running   0          6m</span><br></pre></td></tr></table></figure></p><p>Kubernetes会一直帮我们维护pod的数量为3，我们假设其中的一个pod挂了，看看会不会k8s会不会立即启动一个pod<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl get pods</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">k8s-demo-deployment-774878f86f-ct8hj   1/1     Running   0          6m</span><br><span class="line">k8s-demo-deployment-774878f86f-gxrp7   1/1     Running   0          6m</span><br><span class="line">k8s-demo-deployment-774878f86f-v77hl   1/1     Running   0          6m</span><br><span class="line">➜  k8s kubectl delete pod k8s-demo-deployment-774878f86f-ct8hj</span><br><span class="line">pod "k8s-demo-deployment-774878f86f-ct8hj" deleted</span><br><span class="line">➜  k8s kubectl get pods</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">k8s-demo-deployment-774878f86f-gxrp7   1/1     Running   0          8m</span><br><span class="line">k8s-demo-deployment-774878f86f-kfhm7   1/1     Running   0          16s</span><br><span class="line">k8s-demo-deployment-774878f86f-v77hl   1/1     Running   0          8m</span><br></pre></td></tr></table></figure></p><p>我们手动删了<code>k8s-demo-deployment-774878f86f-ct8hj</code>这个pod，然后k8s很快就起了一个新的pod<code>k8s-demo-deployment-774878f86f-kfhm7</code>来保证数量为3，这就非常完美了，这样子线上环境中某个节点挂了，那么k8s就可以帮我们快速的新建一个pod来维持数量，这样子就不会如果支撑不住，导致整个集群挂掉，那这可就惨了。</p><p>既然容器起来了，那我们访问一下nginx，现在容器是在k8s内部起来了，并没有做端口映射，所以目前我们还访问不到，k8s是通过service来做映射访问的，我们来看一下service定义文件serivce.yml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s more service.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line"> name: k8s-demo-service</span><br><span class="line"> labels:</span><br><span class="line">  app: k8s-demo</span><br><span class="line">spec:</span><br><span class="line"> type: NodePort</span><br><span class="line"> ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    nodePort: 30050</span><br><span class="line"> selector:</span><br><span class="line">  app: k8s-demo</span><br></pre></td></tr></table></figure></p><p>重点关注selector，这里将会把label为<code>app: k8s-demo</code>的容器的80端口映射到node节点的30050端口，我们刚才的deployment.yml文件中定义的label就是<code>app: k8s-demo</code>,也可以看一下现在的运行的pod的描述<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl describe pod k8s-demo-deployment-774878f86f-gxrp7</span><br><span class="line">Name:           k8s-demo-deployment-774878f86f-gxrp7</span><br><span class="line">Namespace:      default</span><br><span class="line">Node:           minikube/10.0.2.15</span><br><span class="line">Start Time:     Sun, 07 Apr 2019 18:05:29 +0800</span><br><span class="line">Labels:         app=k8s-demo</span><br><span class="line">                pod-template-hash=3304349429</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line">Status:         Running</span><br><span class="line">IP:             172.17.0.6</span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>通过命令<code>kubectl create -f service.yml</code>来创建service<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl create -f service.yml</span><br><span class="line">service/k8s-demo-service created</span><br></pre></td></tr></table></figure></p><p>然后通过这个service把endpoint暴露出来<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s minikube service k8s-demo-service --url</span><br><span class="line">http://192.168.99.100:30050</span><br></pre></td></tr></table></figure></p><p>访问这个url<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s curl http://192.168.99.100:30050</span><br><span class="line">&lt;h1&gt;Hello Docker&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>跟我们本地构建镜像启动容器访问的时候看到的是一样，只是这个端口映射我们是写成了yml配置文件，而本地镜像是启动容器的时候指定的。</p><p>好了，到目前为止，我们已经部署了一个服务实例，回过头来看看，这个和我们本地启动容器有什么区别，或者优势在哪里？咋一看好像还变复杂了，看起来是复杂了，但其实对于运维人员来说变得相当简单了，而且这样子更加的规范，也更加的灵活了，还有很重要的一点就是比较符合现在大多数的部署场景。</p><p>梳理一下流程，开发人员写代码的时候一般源代码下边都会有一个Dockerfile文件，这样子每次提交代码的时候都会触发Jenkins来构建镜像并push到我们内部搭建私有仓库中，并且配套有deployment.yml和service.yml文件，做完了CI之后，接下来就是CD的过程，触发k8s应用这两个文件来完成滚动更新部署。这样子运维人员只需要点击一下发布按钮来触发，开发人员通过提交代码来触发，自动完成这个CI/CD过程，整个过程所需要关心的就是Dockerfile，deployment.yml,service.yml这三个文件，这么说来是不是觉得非常轻松了，而且运维还不用担心应用什么时候挂了，有了k8s，假期期间再也没有接到夺命连环call了。</p><p>Kubernetes确实非常好用，应用场景也会越来越多，目前我们内部的平台就只是用来做CI/CD，有些公司也用来搭建深度学习平台等等，以后肯定也会越来越多，但是k8s帮我们做了很多内部的事情，这个还是比较有分量，用好它也不是一件容易的事。我们已经部署出来了一个服务，下面我们来看看滚动更新，这样子就完整的介绍了CI/CD的这个场景下使用k8s。</p><h2 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h2><p>假设我们修改了代码，我们这里就修改index.html的内容，方便做对比<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  html more index.html </span><br><span class="line">&lt;h1&gt;Hello Kubernetes&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>接下来就是提交代码自动构建镜像，这里我们手动构建,tag修改为0.2<br>接下来我们需要修改一下deployment.yml这个文件来适配滚动跟新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata: </span><br><span class="line"> name: k8s-demo-deployment</span><br><span class="line">spec:</span><br><span class="line"> replicas: 3</span><br><span class="line"> minReadySeconds: 10</span><br><span class="line"> strategy:</span><br><span class="line">  type: RollingUpdate</span><br><span class="line">  rollingUpdate:</span><br><span class="line">   maxUnavailable: 1</span><br><span class="line">   maxSurge: 1</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: k8s-demo</span><br><span class="line">  spec:</span><br><span class="line">   containers:</span><br><span class="line">    - name: k8s-demo-pod</span><br><span class="line">      image: k8s-demo:0.2</span><br><span class="line">      ports:</span><br><span class="line">       - containerPort: 80</span><br></pre></td></tr></table></figure></p><p>主要是增加滚动跟新的配置，如果一开始就有的话保持原样不用修改，<code>minReadySeconds: 10</code>指在更新了一个pod之后，需要在它进入正常状态10秒之后再更新下一个pod，<code>maxUnavailable: 1</code>指同时处于不可用状态pod不能超过1个，<code>maxSurge: 1</code>指多余的pod不能超过一个，这样子Kubernetes就会逐个替换所有的pod，运行命令<code>kubectl apply -f deployment.yml --record=true</code>来滚动更新，这里<code>--record=true</code>是让Kubernetes把这行命令记录到发布历史中备查<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl apply -f deployment.yml --record=true</span><br><span class="line">deployment.extensions/k8s-demo-deployment configured</span><br><span class="line">➜  k8s kubectl get pods</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">k8s-demo-deployment-774878f86f-gxrp7   1/1     Running   0          1h</span><br><span class="line">k8s-demo-deployment-774878f86f-v77hl   1/1     Running   0          1h</span><br><span class="line">k8s-demo-deployment-86dbd79ff6-g45m8   1/1     Running   0          5s</span><br><span class="line">k8s-demo-deployment-86dbd79ff6-mkxbx   1/1     Running   0          5s</span><br></pre></td></tr></table></figure></p><p>可以看到当前正在pod正在替换，使用命令<code>kubectl rollout status deployment k8s-demo-deployment</code>可以实时查看更新状态，但是更新太快了，不太方便。但是我们可以看一下pod的age，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  k8s kubectl get pods                                     </span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">k8s-demo-deployment-86dbd79ff6-5l8gz   1/1     Running   0          22s</span><br><span class="line">k8s-demo-deployment-86dbd79ff6-g45m8   1/1     Running   0          34s</span><br><span class="line">k8s-demo-deployment-86dbd79ff6-mkxbx   1/1     Running   0          34s</span><br></pre></td></tr></table></figure></p><p>之前都是1h左右，现在是几十秒，说明是新建的，我们来验证一下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  demo curl http://192.168.99.100:30050</span><br><span class="line">&lt;h1&gt;Hello Kubernetes&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>确实修改了，到这里我们就完整的讲述了CI/CD的整个流程。</p><p>到这里我们基本上把Kubernetes用起来，但是还有很多的东西值得我们去学习，官网的文档就是最好的学习资料，这里还要再次赞美Kubernetes的官方文档，真的真的写的非常通俗易懂。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="2019/04/01/rabbitmq/"/>
      <url>2019/04/01/rabbitmq/</url>
      
        <content type="html"><![CDATA[<p>目前大部分的后台系统都引入了MQ，不管是ActiveMQ还是RabbitMQ，亦或是RocketMQ、Kafka等等，MQ的主要作用是对系统进行解耦、异步化以及削峰，解耦应该是最常用的场景，本文将围绕这一业务场景以RabbitMQ作为案例来进行阐述。<br><a id="more"></a></p><h2 id="认识MQ"><a href="#认识MQ" class="headerlink" title="认识MQ"></a>认识MQ</h2><p>MQ的全称为Message Queue，中文翻译为消息队列，Java中定义了一系列的接口规范，这套规范叫做JMS，像ActiveMQ就是遵循JMS规范，我之前也用过一段时间的ActiveMQ，由于系统没有什么并发压力，数据量也不大，ActiveMQ确实也挺适合的，但是ActiveMQ更新速度太慢了，我想主要的原因是官方觉得比较成熟了吧。</p><p>接下来讲讲今天的主角，RabbitMQ也属于消息队列，但是它是用Erlang写的，所以谈不上遵循JMS规范，RabbitMQ遵循的是AMQP协议，AMQP协议是一个提供统一消息服务的的应用层标准的消息队列协议，不受语言限制，由于底层使用的是专门面向并发的Erlang语言，所以RabbitMQ的吞吐量非常优秀，而且目前社区非常活跃，基本上现在的微服务系统都是通过集成RabbitMQ来作为消息传递的。</p><p>这两者有什么区别呢？JMS定义了统一的接口来对消息操作，而且限定语言为Java；AMQP只是协议，不规定实现方式，不受语言限制，通过规定协议来统一数据交互的格式。</p><p>至于MQ的选型本文不做讨论，本文的主角是RabbitMQ，前面说过，MQ的常用场景是用来解耦，下面来看看两个我工作中的真实场景。</p><p>我是做云平台业务的，当底层对云资源做了修改之后，云平台是不知道底层做了修改，这时候怎么能让云平台知道呢？一般有两种方案，一种是底层对云资源做了修改之后，调云平台的修改接口，还有一种就是底层做了修改之后发布消息到消息队列，云平台去订阅消息。第二种方案很好的将云平台和底层进行了解耦，这种场景不是很频繁，底层的东西不会经常变动，这个是不符合原来的平台的设计原则的，消息吞吐量不大，ActiveMQ完全能够胜任。</p><p>还有一个业务场景是的云平台部署了一个云资源，部署完成了之后底层需要告知云平台已经部署完成，云平台才能做后续的事情，比如结束相关订单，生成服务实例来进行计费，报表开始将该资源纳入统计，通知监控平台纳管该资源进行监控，发送邮件，短信通知等等一系列相关的事情，如果都是在单体系统中还好，大不了都调一遍接口，或者和上一个场景中一样直接使用ActiveMQ，分不同的主题来订阅到不同的消息触发不同的逻辑操作，如果使用ActiveMQ的话这个时候消息吞吐量是相对比较大的，特别是目前架构已经演变成微服务架构了，不应该还采用之前的技术，应该全面拥抱微服务全套解决方案，微服务主要用的MQ就是RabbitMQ，而且RabbitMQ中的高级消息模型就可以满足我们上面的第二个业务场景，吞吐量也是完全Hold的住。</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>因为RabbitMQ是有Erlang写的，安装之前需要安装相关依赖，这个可以参考官方文档来进行安装，我的是OS X系统，官方推荐直接通过<code>brew install rabbitmq</code>即可，这个最好要打开VPN，因为有些资源是挂在国外，brew已经处理好了依赖关系，等待安装完成即可。</p><p>安装完成之后通过命令<code>brew services start rabbitmq</code>，启动成功之后访问<code>http://127.0.0.1:15672</code>，使用默认用户名密码<code>guest/guest</code>登录，guest这个账户是RabbitMQ默认的管理员账户，拥有最高的权利，生产环境一般会新添加一个用户，赋予新用户管理员权限，然后把guest这个默认用户删除掉，这里只是我本地的环境，不用考虑安全因素。</p><p>接下来我们创建一个demo用户，并且给demo用户一个虚拟主机，这个虚拟主机待会试验的时候会用到。</p><p><img src="/asset/img/rabbitmq/add_user.png" alt="添加用户"><br><img src="/asset/img/rabbitmq/add_host.png" alt="添加host"></p><p>然后去用户详情或者host详情里边做好两者的关联，这里从用户这里进入</p><p><img src="/asset/img/rabbitmq/user_host.png" alt="添加关联"></p><p>这样子我们基本就完成了前期准备，下面来介绍消息模型。</p><h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><h3 id="基本消息模型"><a href="#基本消息模型" class="headerlink" title="基本消息模型"></a>基本消息模型</h3><p>基本消息模型如下图所示，生产者将消息发送到消息队列中，消费者从消息队列获取消息，消息存储在队列里。<br><img src="/asset/img/rabbitmq/model1.png" alt="基本消息模型"></p><p>Consumer:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取到连接</span></span><br><span class="line">    Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">    <span class="comment">// 2.创建通道</span></span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">// 3.声明队列</span></span><br><span class="line">    channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 4.定义队列的消费者</span></span><br><span class="line">    DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">      <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// body 即消息体</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">        System.out.println(<span class="string">" [Simple] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">        <span class="comment">// 手动进行ACK</span></span><br><span class="line">        <span class="comment">//channel.basicAck(envelope.getDeliveryTag(), false);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认,false要进行手动确认，保证消息的可靠性</span></span><br><span class="line">    channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Producer：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取到连接</span></span><br><span class="line">    Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">    <span class="comment">// 2.创建通道</span></span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">    <span class="comment">// 3.向队列发送消息</span></span><br><span class="line">    channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">    System.out.println(<span class="string">" [Simple] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">    <span class="comment">// 4.关闭通道和连接</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Console:<br><img src="/asset/img/rabbitmq/model1_send.png" alt="发送"></p><p><img src="/asset/img/rabbitmq/model1_recv.png" alt="接收"></p><p>RabbitMQ中为了确保消息已经被消费了，会有一个确认机制来控制，可以设置为自动确认，如果想自己控制，可以设置为false之后手动进行确认，总之，消息确认机制从消费者端保证了消息被成功消费。</p><h3 id="work消息模型"><a href="#work消息模型" class="headerlink" title="work消息模型"></a>work消息模型</h3><p>当生产者产生消息比较多的时候，这就造成队列里边堆积了大量消息，这对系统来说是一个潜在的负担，这个时候就可以考虑work消息模型，多个消费者订阅同一个消息队里，多个消费者共享消息队列里的任务，但是一个消息只能由一个消费者消费。<br><img src="/asset/img/rabbitmq/model2.png" alt="work消息模型"></p><p>代码基本上和基本消息类型大同小异，完整代码见仓库中work包，生产者发送了50个任务，两个消费者消费消息,但是不是轮流来消费，看处理能力，只保证一个消息只会被消费一次！<br>Consumer-1:<br><img src="/asset/img/rabbitmq/model2_recv1.png" alt="Consumer-1"><br>Consumer-2:<br><img src="/asset/img/rabbitmq/model2_recv2.png" alt="Consumer-2"><br>Producer:<br><img src="/asset/img/rabbitmq/model2_send.png" alt="Producer"></p><h3 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布/订阅模型"></a>发布/订阅模型</h3><p>生产者产生消息，将消息发送到交换机，每个消费者都有自己的队列，队列连接到交换机，由交换机决定发送到哪个队列中，这样子可以实现一条消息可以被多个消费者消费。<br><img src="/asset/img/rabbitmq/model3.png" alt="发布订阅模型"></p><p>完整代码见仓库中publish包，两个消费者所在的队列绑定到同一个交换机上，生产者发送消息到交换机的时候两个队列都会收到消息，如果没有队列连接到交换机，那么消息将丢失。<br>Consumer-1:<br><img src="/asset/img/rabbitmq/model3_recv1.png" alt="Consumer-1"><br>Consumer-2:<br><img src="/asset/img/rabbitmq/model3_recv2.png" alt="Consumer-2"><br>Producer:<br><img src="/asset/img/rabbitmq/model3_send.png" alt="Producer"></p><h3 id="路由模型"><a href="#路由模型" class="headerlink" title="路由模型"></a>路由模型</h3><p>生产者产生消息，发送消息到交换机，交换机类为direct，这样子交换机就会根据配置的路由向指定的队列发送消息，而不会像所有连接到交换机的队列都发送消息，所以消息队列需要绑定一个routing key,生产发送消息的时候需要指定routing key，这样子就可以匹配上了。<br><img src="/asset/img/rabbitmq/model4.png" alt="路由模型"></p><p>完整代码见仓库中route包，两个消费者所在队列绑定到同一个交换机上，并且指定了routingKey，如图所示<br><img src="/asset/img/rabbitmq/model4_bind.png" alt="绑定形式"><br>生产者先发送routingKey为update，然后发送routingKey为delete,如图所示，与我们预期的结果一样。<br>Consumer-1:<br><img src="/asset/img/rabbitmq/model4_recv1.png" alt="Consumer-1"><br>Consumer-2:<br><img src="/asset/img/rabbitmq/model4_recv2.png" alt="Consumer-2"> </p><h3 id="主题模型"><a href="#主题模型" class="headerlink" title="主题模型"></a>主题模型</h3><p>路由模型是主题模型的一个特例，路由模型中的routing key是一个全匹配的key值，主题模型中key支持通配符，其中<code>#</code>匹配一个或多个值，<code>*</code>匹配不多不少一个词。<br><img src="/asset/img/rabbitmq/model5.png" alt="主题模型"><br>完整代码见仓库中topic包，两个消费者所在队列绑定到同一个交换机，Consumer-1的routingKey为item.#,Consumer-2的routingKey为item.*，如图所示<br><img src="/asset/img/rabbitmq/model5_bind.png" alt="绑定形式"><br>生产者先发送routingKey为item.delete，然后发送routingKey为item.delete.test,如图所示，与我们预期的结果一样。<br>Consumer-1:<br><img src="/asset/img/rabbitmq/model5_recv1.png" alt="Consumer-1"><br>Consumer-2:<br><img src="/asset/img/rabbitmq/model5_recv2.png" alt="Consumer-2"> </p><h2 id="SpringBoot集成"><a href="#SpringBoot集成" class="headerlink" title="SpringBoot集成"></a>SpringBoot集成</h2><p>SpringBoot是有AMQP-starter的，引入SpringBoot项目即可，然后在application.yml中配置RabbitMQ的信息，接下来就是写一个listener即可，真的是太方便了，完整代码见仓库spring包，运行ListenerTest即可验证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">      value = <span class="meta">@Queue</span>(value = <span class="string">"exchange.spring.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">      exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">          value = <span class="string">"exchange.spring"</span>,</span><br><span class="line">          ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">          type = ExchangeTypes.TOPIC</span><br><span class="line">      ),</span><br><span class="line">      key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.MINUTES.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，附上仓库地址</p><div class="github-widget" data-repo="ruanzz/RabbitMQ-Tutorial"></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="2019/03/31/restful/"/>
      <url>2019/03/31/restful/</url>
      
        <content type="html"><![CDATA[<p>前后端分离之后，前后端人员通过接口数据进行交互，目前大部分都是通过RESTful API来进行的，双方各司其职，各发挥长处，但是同时也带来了沟通成本的增加，那么你了解REST吗？你的API是RESTful的吗？本文将和工作中内容关联起来阐述我眼中的REST。<br><a id="more"></a></p><blockquote><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p></blockquote><p>看了REST的定义，什么也没明白，下面我来说说什么是REST，如何让你的API设计成RESTful。</p><p>REST把所有的东西都看成资源，RESTful的接口为 动词 + 名词，比如我们订单接口，那么订单就可以认为是一种资源，可以通过URI接口来获取，那么获取资源接口就可以设计成 <code>GET</code> <code>/orders</code>，这就是动词 + 名词。</p><p>动词常用有四种： <code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code><br>名词就是特定的资源了，和具体的业务有关，是名词就行。</p><ul><li><code>GET</code> /orders 获取订单列表</li><li><code>GET</code> /orders/{id} 获取某个订单</li><li><code>POST</code> /orders 新增订单</li><li><code>PUT</code> /orders/{id} 修改某个订单</li><li><code>DELETE</code> /orders/{id} 删除某个订单</li></ul><p>还有一个就是状态码的管理,但是这个工作中用的不怎么规范。<br>【成功状态】</p><ul><li><code>GET</code> <code>200</code> OK</li><li><code>POST</code> <code>201</code> Created</li><li><code>PUT</code> <code>200</code> OK</li><li><code>DELETE</code> <code>204</code> No Contents<br>【错误状态】</li><li><code>500</code> 服务器内部错误</li><li><code>503</code> 服务器无法处理请求</li><li><code>400</code> 错误请求，请求体不对</li><li><code>405</code> 错误请求，请求方法不对</li><li><code>401</code> 错误请求，身份认证通不过</li><li><code>403</code> 错误请求，未授权</li></ul><p>这就是常用的接口设计方案，这样子的接口就是符合RESTful的，看起来挺简单，但是这个跨越却是历史性，这样子接口的设计就会有一个规范，大家都默认这种描述资源的方式比较直观，接口都是通过json来传递数据，比较轻量级，这样子就统一起来，不像之前只有GET和POST，而且接口都是开发人员随便起的，因为这个接口只有他一个人用，还有可能通过xml数据传输，即使提供出去，那也是一团糟。</p><p>说完了REST和RESTful，来讲讲工作中都怎么用。</p><p>现在常用的REST框架有Jersey和CXF，当然SpringMVC也是支持RESTful API的，目前来说,SpringMVC是主流，之前项目中有用Jersey，我觉得Jersey也挺好用，而且内置jetty来处理Web请求，有点类似目前主流的SpringBoot的一部分功能。</p><p>最近在和一个第三方厂商对接接口，我开发完成了接口，想要做一个模拟对接服务，代码肯定是不能写在项目中，只能另外写一个项目来提供对接接口，当时首先想到的就是SpringBoot来提供一站式解决方案，简单快捷，但是后来想了想觉得有点重了，只是提供一个模拟接口而已，只需要提供要给接口出来返回json就行，想到了之前用过Jersey，就用Jersey+Gson来完成了，今天也开了个仓库来记录，以后可能还会用到。</p><div class="github-widget" data-repo="ruanzz/Api"></div><p>把项目clone下来之后，运行<code>ApiApplication</code>的<code>main()</code>方法就可以把一个REST服务跑起来，借助的是内嵌的Jetty服务器，看到这里是不是觉得和SpringBoot有点类似？是的，软件的思想其实都是殊途同归的，触类旁通很重要。</p><p>接下来访问增删改查接口</p><p>curl -H ‘Content-Type:application/json’ -XPOST <a href="http://127.0.0.1:8080/demos" target="_blank" rel="noopener">http://127.0.0.1:8080/demos</a> -d ‘{“id”:5,name:”demo5”}’<br>{“id”:5,”name”:”demo5”,”createTime”:”2019-03-31 56:22:37”}</p><p>curl -XGET <a href="http://localhost:8080/demos/5" target="_blank" rel="noopener">http://localhost:8080/demos/5</a><br>{“id”:5,”name”:”demo5”,”createTime”:”2019-03-31 56:22:37”}</p><p> curl -H ‘Content-Type:application/json’ -XPUT <a href="http://127.0.0.1:8080/demos/5" target="_blank" rel="noopener">http://127.0.0.1:8080/demos/5</a> -d ‘{name:”demo5-1”}’<br>{“id”:5,”name”:”demo5-1”,”createTime”:”2019-03-31 56:22:37”}</p><p> curl -XDELETE <a href="http://127.0.0.1:8080/demos/5" target="_blank" rel="noopener">http://127.0.0.1:8080/demos/5</a><br>“sucess”</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职场技能</title>
      <link href="2019/03/24/office-skill/"/>
      <url>2019/03/24/office-skill/</url>
      
        <content type="html"><![CDATA[<p>之前写了篇文章讲述了毕业之后的组织架构调整，最近又大调整了一次，感想颇多，想记录一下，但是又不知道取什么标题，因为这些都是一些零碎的感悟，只能是作为文字记录，后续应该还会有类似的文章，因此萌生了一个想法，将这些弄成一个系列，因此有了这个系列的第二篇文章。<br><a id="more"></a></p><h2 id="情商"><a href="#情商" class="headerlink" title="情商"></a>情商</h2><p>程序员这个职业不需要什么情商吧？你是不是曾经在脑海里飘过这个问题呢？程序员目前已经是被大众比较认可的职业，但是提起程序员，大家的印象是什么呢？很多人知道这个梗，比如牛仔裤、运动鞋、优衣库衣服(格子衬衫以及黑色羽绒服)，还有一个比较突出的就是不懂人情事故，比较木讷。这些都是大众对程序员的印象，亲切称之为典型程序员，不知道大家对这个有什么感受或者想法，我自己的话是挺不舒服，但是这确实是广大程序员的真实写照，更有甚者的梗是程序员是高薪接盘侠，女孩子在外面经历过风雨之后想找一个老实多金的人嫁了过日子，首选目标是程序员，对于这种现象，我只能惋惜。很不幸，也许大千程序员中的你我或许可能就是下一个，所以，程序员在追求技术的道路上，段位也要相应的提高。</p><p>情商这个东西不是天分，也不是遗传，更多的是后天所经历过的事刻意有为的锻炼造就的。比如，一个交过很多个女朋友的男生比那些还没交过女朋友的男生的情商就高出不少，所以，情商高的标准是什么？人是有社交属性的，情商是通过社交属性来体现的，在我看来，如果一个人跟其他人沟通能够很顺畅，让对方感觉到舒服的，那么情商就是达标的。典型的像销售或者售前这些岗位，他们的任务就是搞定客户，怎么搞定客户呢？那就是满足客户，让他们很舒服，这样子他们就会很乐意把单子给你。</p><p>程序员的主要工作是产出代码，所以沟通的时间相较于售前是非常少的，只会埋头干活，当有一天抬头看路的时候，发现自己在这条路上已经越走越远了，可悲吗？有点可悲，可怜吗？一点不可怜！醒悟那么晚是有自己本身的原因，所以要经常反思，不断调整。程序员首先是一个社会职业，其次才是程序员，只要是社会职业，那就必须要进行沟通，沟通是需要技巧的，很多时候程序员都不太注意，典型的就是脾气暴躁，或者一句话能让全场冷场，甚至让对方尴尬得想找个洞钻下去，这些在大家都是程序员一起沟通的时候并不怎么感觉的出来，但是当程序员和老板吃饭，和售前、销售聚餐的时候，特别是想说一些恭维的话的时候，总是觉得不那么舒服，听者更加觉得不舒服了，和售前、销售在一起的时候更加相形见绌了。</p><p>这一条努力吧，沟通要一开始都是礼貌的，后续如果需要自己态度强硬，那就一口咬死，但是要注意自己的说话语气，整个过程语气都是平稳，给人很稳扎的感觉，落落大方，沟通过程中如果出现不能把握的事，有人会慌，人一慌就会出现说话的声音发生变化，这个是明显可以感觉得出来，如果平时注意的话应该在大家身边都会有这样的事，这就给别人一个信息，对方目前处于劣势，对方就会非常猛的进攻，所以，一个七尺男儿要有担当，遇到任何事都不要慌，首先就要从声音和肢体语言开始，声音要依旧保持浑厚，掷地有声，肢体要放轻松，做好迎接接下来发生的事情。</p><p>总结一下就是说话自带个人魅力，能够三思而后行，为自己说的话负责。和情商高的人交流，无关利益的时候让你感到很舒服，有利益纠葛的时候让你心甘情愿的吃亏。</p><h2 id="做事"><a href="#做事" class="headerlink" title="做事"></a>做事</h2><p>工作，就是一直做事，不断的有事情需要你去解决。所以，工作能力最直接的体现就是你的做事能力，是否高效解决事情，和你合作的同事对你的解决方案是否满意，是否带来收益？这些都是实实在在的，有目共睹的东西，很多时候，个人能力就是在做事的过程中提升的，也会影响个人绩效以及升职加薪等，这些在你的上级眼里都是格外清楚的。</p><p>特别是在开发中，你提供出去的接口别人一调就报错，这就很尴尬了，你这也太不靠谱了吧！很明显自己都没有测试过，所以经过自己手上的代码一定要搞得起码没有低级错误了才能提供接口出去，经过自己手的代码一定要比上一个版本要好，就算是接手别人的代码，该大改还是要大改，不合理就要改，因为经过你手了，后续就是要你来维护，出问题了你总不能说这些代码不是你写的，这种话只要一说出口，别人对你的印象就是不负责，喜欢推脱，三个字就是不靠谱。</p><p>还有一个特别重要的就是联调，你提供的接口一定一定是要通过模拟测试之后才能拿去联调的，不然丢人的不仅仅是你，还有你的公司，所以一定一定要格外的重视，前期沟通好接口，形成文档，双方按照文档来开发，后期联调接口经过模拟测试，到联调的时候就会少了很多麻烦，至少不会是因为你的原因出现一些低级错误，这是非常非常重要的。</p><h2 id="汇报"><a href="#汇报" class="headerlink" title="汇报"></a>汇报</h2><p>原来我们组是每周跟主管写一下周报，目前我们组每周五都要跟部门经理汇报本周工作，这个时候明显的感觉到除了主管，我们这些开发人员明显不懂汇报，主要的体现在汇报的时候像聊天一样，感觉做的事没有啥好说的，作为开发人员的你是不是有同感呢？</p><p>这样是不对的！经理管理需要的是大方向，不需要很细的东西，他不关心也不懂，他只关心这东西你要做多少时间，什么时候出成果，交付之后客户的满意度等等，而大多数的开发人员关心的是，这个需求我该怎么实现，可以使用什么设计模式，这段逻辑还可以怎么优化等等这些，很多时候开发人员就把这些汇报给经理，但是感觉经理好像不怎么想听，所以就觉得没有啥好说的了。</p><p>汇报需要材料，材料说白了就是文字，这时候文字功底就体现出来了，文字是需要勤加练习的，需要反复的推敲，特别是给上级做汇报或者递交材料的时候，一个好的文采或者直击要点的文字往往能够引起重视，从而推动事情往好的方向发展。人民日报以及政府工作报告就是一个很好的例子，这都是很多资深编辑经过推敲的文字，言简意赅，没有多余的废话。这个功力只能靠时间和多推敲来训练，这也是我当初开始写博客的原因之一。</p><p>除了文字，一般还需要PPT加持,开发人员的PPT功力真是不敢直视，真的非常简陋，很多时候都只是文字的堆砌，冷不丁的来一张图片，真的不忍吐槽，PPT基本是一个摆设或者附和完成的东西，更多的是汇报的时候口头表述，但是表述的时候又觉得没啥好汇报，这真的很尴尬，可以说身边不少程序员的PPT功底是不过关的，幸好还有公司模板，即使只是堆砌文字也不觉得很Low，但是给人是不舒服的，可以看出你是应付了事。所以，一定要反复修改，反复推敲，PPT是一个辅助工具，不能帮倒忙，可以通过视觉的形式很好的让你的领导知道你都干了什么，成果有哪些，遇到什么困难等，重点的东西要凸显出来。</p><p>文字和PPT都准备好了，接下来就是会议汇报了，汇报其实就是向某个人说某件事，重点在说，所以说的方式很重要，情商这个时候就要派上用场了，可以参照前边的说话自带个人魅力，捡重点的说，什么是重点，领导关心的东西是重点，PPT要展示的是重点，把这些东西说清楚了，领导就知道你干了什么，成果如何等等，让领导快速的了解你的工作，给他很舒服的感觉，那么恭喜你离升职加薪不远了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化思路</title>
      <link href="2019/02/06/mysql-optimize/"/>
      <url>2019/02/06/mysql-optimize/</url>
      
        <content type="html"><![CDATA[<p>MySQL优化是在工作中必须要学会的一个技能，在优化之前有一个非常重要的问题，必须要对MySQL进行优化了吗？是否可以从代码层面(业务或者架构)来提高效率呢？假设必须要对MySQL层面优化，那么问题来了——如何下手？先观察后优化！先定位问题出现在哪里，然后才是有针对性的去调优。<br><a id="more"></a></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>一般我们会先观察的MySQL Server服务的查询数量以及线程数量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot ext -proot | awk <span class="string">'/Queries/&#123;q=$4&#125;/Threads_connected/&#123;tc=$4&#125;/Threads_running/&#123;tr=$4&#125;END&#123;printf("Queries\tThreads_connected\tThreads_running\n%d\t%d\t%d\n",q,tc,tr)&#125;'</span></span><br></pre></td></tr></table></figure></p><p>还有当前在处理的线程的的状态<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span> \G;</span><br></pre></td></tr></table></figure></p><p>重点关注<code>Copying to temp table</code>和<code>Sorting result</code>状态，这两种状态是常见的非常耗资源的状态。如果查询量比较大的话还可能会在<code>Sending data</code>阶段耗费长时间，这个时候就应该要考虑是否可以分页或者减少查询字段了。<br>我们还可以借助profile来观察每条语句在各个过程消耗的时间,一般profile是OFF的，我们需要将它开启<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看profile状态</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'profiling'</span>;</span><br><span class="line"># 开启profile</span><br><span class="line"><span class="keyword">SET</span> profiling=<span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure></p><p>之后的SQL语句都会有详细的记录，可以借助下面两条语句来查看<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看全部语句的各自花费时间</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROFILES</span>;</span><br><span class="line"># 查询某条语句各个过程花费的时间</span><br><span class="line"><span class="keyword">SHOW</span> PROFILE <span class="keyword">FOR</span> <span class="keyword">QUERY</span> &#123;query_id&#125;</span><br></pre></td></tr></table></figure></p><p>但是最重要的分析语句执行过程是<code>explain</code>来分析，后边会重点说这个。</p><h2 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h2><p>了解了定位的时候主要看哪些指标，那么我们在开发过程中就要注意一下，不要等到需要优化了才去explain每条语句优化。我们应该从建表到写SQL语句都需要考虑性能问题。</p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>表结构要合理拆分。 </p><p>定长与变长分离，常用字段与不常用字段分离，用主键进行关联，根据业务特点合理添加冗余字段，字段的选取尽量选择合适的，存储够用就行，大存储字段浪费内存，影响速度，像核心字段都用int，char，enum等定长结构，非核心字段的话用varchar，text等非定长字段，或者拆出来单独放一张表。</p><p>尽量避免使用NULL,既不利于索引也可能更加的耗存储。</p><p>如果表结构规划的的不合理，后续一个业务就要连接非常多的表才能查询出数据，这种时候就要从业务角度考虑了，不要为了满足数据库范式而写代码，数据库范式只是提供了一个准则，我们开发人员应该要根据具体的业务来完成表结构的合理规划，不然后续要改数据库表结构将会很痛苦。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是为了提高查询效率，下面我们来了解一下索引。</p><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL高效获取数据的数据结构。总结一下就是索引是数据结构。既然是一种数据结构的，那么就会有多种实现方式，比如B+Tree索引(平衡树，也可以理解为排好序的快速查找结构)、Hash索引。</p><p>常用的是B+Tree索引，Hash索引的理论查询时间是O(1),为什么不用它呢？Hash索引的存储是通过hash值进行计算，即使id是连续增长的，但是hash出来的值千差万别，存储的位置是随机的，还有一个致命的缺点就是不能对范围进行查询，更无法对排序优化，还有就是必须回行，通过索引拿到数据存储位置之后，必须回到表中去取数据。正是这些缺点导致Hash索引的使用场景非常有限，像memory表用的就是hash索引，不需要对数据库进行范围查询，只需要快速定位数据。B+tree是不是就很好了呢？目前来看是的，综合起来首先要满足业务，支持对返回查询，排序优化，然后尽可能快，这些基本上就满足了我们业务上的基本要求。</p><p>在MySQL中，索引属于存储引擎级别的概念，不同的存储引擎的实现方式也是不同的，在MySQL中常见的存储引擎有两种：MyISAM和InnoDB。</p><p>先来看一下MyISAM,使用B+Tree作为索引结构，也叫非聚簇索引，因为无论是主索引还是辅助索引，其结构都是一样的，叶子节点的data域存放的是数据表记录的地址，因此MyISAM的索引查找结果的过程为按照B+Tree搜索算法搜索索引，如果指定的key存在，取出其data域的值，然后以data域的值为地址，读取相应的数据记录。</p><p>再来看一下InnoDB,同样也是使用B+Tree作为索引结构，但是和MyISAM有很大的不同，甚至相反，叫聚簇索引。MyISAM的索引文件和数据文件是分离的，索引文件只保留了数据记录的地址，而在InnoDB中，数据文件本身就是索引文件，数据是直接存储在节点的data域中，所以InnoDB必须要有主键，不然数据找不到地方存储，也因此得名聚簇索引。这就带来了一个问题了，那辅助索引怎么办？InnoDB是这样子处理的，辅助索引的data域存储的是主键的值，这样子所有的辅助索引定位到节点之后就可以拿得到主索引的值，然后再去主索引的B+Tree中查找对应节点，取出节点中data域就是数据记录了。</p><p>了解了两种存储引擎实现的索引，我们来对比一下，先从主键索引来看，MyISAM的索引树信息很少，查找相对较快，查找到相应节点之后取出data域信息之后还要根据地址去取数据记录，InnoDB查找相对慢一点，查找过程中遍历的数据量较多，但是查找到相应节点之后直接在节点上去取出数据，不需要在另外的回行取数据，对于主索引来说，这两种方式相差不会太多，数据量大的时候MyISAM的优势就明显了；辅助索引呢就是MyISAM大胜了，InnoDB中的辅助索引找到了只是主索引的值，还得去主索引的B+Tree上查找一次，找到对应节点才能去到data域中的数据记录。这两种的差别是他们的最初的目标决定的，MyISAM的强项是查询，索引是加快查询的最有效的方法，因此MyISAM采取的是非聚簇索引的，使得无论是主索引还是辅助索引，效率基本上是一样。InnoDB是为了平衡查询和事务，MyISAM是不支持事务，如果业务上需要到事务，那还是老实选择InnoDB吧，但是同时也要尽量的发挥InnoDB索引的查询优势，主键的选取就是一个很关键，必须单调并且不宜过长，为什么必须单调呢？这个是数据结构致使的，只要使用的是B+Tree，主键就应该单调，如果不单调，在插入新数据之后，二叉查找树要保持树的平衡，就得重新排序，频繁的分裂调整整棵树的结构，效率是非常低的，使用递增方式可以有效的解决这个问题。为什么不宜过长呢？InnoDB的辅助索引查询效率并不高，尽量能不用就不用，但是现实业务往往是需要辅助索引的，辅助索引的data域存储的是主键的值，过长就会导致额外的存储过多，使得辅助索引非常大。</p><p>索引在提升查询效率上的效果是十分明显的，但是在实际项目中我们会发现有时候索引并不生效，那么什么情况下会导致索引失效呢？只有了解了索引没有生效的情况，在开发过程中才能避免。<br>1.where条件中用or，即使其中有条件带索引，也不会使用索引。可以考虑使用union或者in来替换or。<br>2.对于多列索引，没有按照索引的定义顺序使用查询，这种时候索引也不生效，可以调整查询条件顺序或者重新创建索引使其生效。<br>3.like模糊查询使用%开头，尽量避免使用%开头，以%结尾可以生效<br>4.索引列不要做任何操作，包括计算(包含大于，小于，不等于)，函数，类型转换等等这些操作都会使索引失效。<br>5.索引列是字符串没有加上引号会使得索引不生效。<br>6.把where后边的字段都加上了单列索引，是不会所有的索引都生效的，因为是独立索引，生效的只有一个。应该加上多列索引，多列索引生效的前提是要满足前缀要求。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>SQL语句我们一般是先满足业务要求，先把业务逻辑完成了，接下来才是有针对性的优化，可以借助Druid数据库连接池的监控或者在开发阶段开启慢日志查询，推荐使用Druid，可以清楚的知道哪些SQL语句比较慢，上线之后可能会出现问题。</p><p>接下来我们详细了解一下EXPLAIN</p><p>EXPLAIN命令是用来查看SQL语句的执行计划，直接在执行的SQL前面加上EXPLAIN命令之后执行即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from goods;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">| 1  | SIMPLE      | goods | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2    | 100.00   | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line">1 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>select_type ： 查询类型</p><pre><code>- SIMPLE 简单查询，不包含子查询或者UNION- PRIMARY 查询中若包含子查询，最外层查询类型为PRIMARY- SUBQUERY 查询中若包含子查询，里层的查询类型为SUBQUERY- DERIVED from的表是一个子查询来完成的，为派生表，这个其实也属于SUBQUERY- UNION 该表是通过union完成</code></pre><p>table ： 操作的表<br>partitions ： 操作的分区<br>type ： 访问类型，是通过何种方式找到数据</p><pre><code>- ALL 全表扫描- index 只遍历索引树- range 索引范围扫描，查询条件是between、or、in、&gt;、&lt;等这些都是range- ref 使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配某个单独值的记录行- eq_ref 类似ref，区别在于使用的是唯一索引，多表连接中的唯一索引作为关联条件- const/system MySQL对查询进行了优化，并转换为一个常量时，使用这些类型进行访问- NULL MySQL在优化过程中分解语句，执行时甚至不用访问表或者索引，比如找索引列的最小值</code></pre><p>possible_keys ：可能用到的索引，但不一定会被使用<br>key ： 在查询中实际使用的索引<br>key_length ：索引字段的最大可能长度，并非实际使用长度<br>ref ： 表的连接匹配条件<br>rows ： 找到记录需要读取的行数<br>filtered ：符合条件的记录数的百分比所做的一个悲观估算值<br>Extra ： 显示上述信息之外的信息，但是确是非常重要的</p><pre><code>- Using index 索引覆盖- Using where 表示MySQL服务器将在存储引擎检索行后在进行过滤- Using temporary 表示MySQL需要使用临时表存储结果集，常见于排序和分组查询- Using filesort MySQL无法利用索引完成的排序操作称为文件排序- Using join buffer 表示获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果- Impossible where 表示where语句会导致没有符合条件的行- Distinct 表示找到第一个匹配行之后就会停止搜索其他的行</code></pre><p>清楚了explain的各个列的值的含义，哪些值是我们重点关注的呢？</p><p>先看type类型，尽量避免ALL全表扫描，对性能有要求的也尽量避免扫描全部索引，这种时候就要在开发的时候加上合适的索引</p><p>再来看看Extra列，如果出现了Using temporary或者Using filesort则需要多加关注。<br>Using temporary往往是因为GROUP BY的列没有索引，或者GROUP BY和ORDER BY的列不一样，这种情况下就会产生临时表，建议加上合适的索引。<br>Using filesort表示无法利用索引完成排序，进而使用文件排序，也有可能是多表连接时排序的字段不是驱动表的列，建议加上合适的索引。<br>Using where 通常是因为全表扫描或者全索引扫描(type为ALL或者Index)，又加上了where条件，建议加上合适的索引</p><p>怎么都是加索引呢？不是说不能增加太多的索引吗？</p><p>确实是这样子，工作中碰到的80%的查询优化问题可以通过加上合适的索引来解决问题，索引就是为了优化查询而诞生的，这是它的职责所在。太多的索引会带来什么问题呢？就是更新数据的时候都要更新索引，这就影响到新增、修改和删除数据的性能，如果对这几个有很高的性能要求的话需要注意索引的数量，但是我工作中还没遇到这种场景，而且大多数表的索引都在3个以内，这个数量应该还好。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈云</title>
      <link href="2019/01/26/cloud-compute/"/>
      <url>2019/01/26/cloud-compute/</url>
      
        <content type="html"><![CDATA[<p>什么是云？我的简单理解是对资源的动态管理，以前一直用的一个词叫做按需取用，按需付费。我目前所从事就是云计算行业，云计算最初提出来就是为了实现资源的动态管理，包括计算资源(CPU和内存)，网络资源和存储资源。动态这个是我自己的理解，更专业的叫做弹性，体现在两个方面：一个方面就是想什么时候要就什么时候要，需要的时候从资源池里边拿就行。一个方面是想要多少有多少，当然这个前提是不能超过你的整个资源池所能提供的上限。<br><a id="more"></a><br>云计算看起来挺简单的，就是对资源的动态管理嘛！不就是个管理系统嘛，分分钟搞定，话呢还先不要说的这么满！来看看云计算的发展历程就知道了，任何东西存在都有一个演进的过程。</p><ol><li>物理设备阶段<br>这个时候需要上线一个应用，直接买台物理机放在数据中心，装好操作系统，配好网络就可以准备上线应用了。物理设备有很好的性能，但是有一个很要命的缺点，不能做到很好的灵活性，首先它不能够达到想什么时候要就什么时候要，比如买台服务器，这个是需要采购时间的，采购回来还要配存储，装操作系统，配网络等等，这些都是需要时间的，就比如说采购吧，就算和供应商关系好，怎么也得一个星期吧，而且后期扩展内存，存储这些都是需要时间的，三个字总结就是不灵活！<br><strong>为了解决这个问题，引入虚拟化技术。</strong></li><li>虚拟化阶段<br>用户就是想要一台机器来部署应用，数据中心的物理设备都是很强大的，可以考虑从现有的设备虚拟出一个完整的机器出来给用户部署应用，完整的虚拟化出CPU，内存，网络，存储等资源。在现有物理设备上虚拟化出这些资源是非常快的，基本上几分钟内就能解决，如果是VSAN存储的话可能几十秒内就创建出一台虚拟机了。如果这台机器不用了，可以直接删除回收资源，这样子就能很好的解决物理设备的灵活性问题。<br><strong>但是新的问题又来了，怎么把物理设备虚拟化？</strong><br>提到虚拟化，不可避免的要提到VMware，这是一家低调赚钱的公司，虚拟化软件做的很好，性能也很好，软件也卖的很好，赚了非常多的钱，用一个案例来描述这家公司赚钱的程度，大部分的数据中心或多或少都用VMware的产品，至少我接触到的金融或者运营商客户基本都是在用，只要是X86机器，大部分都是装的ESXi，其余的是Xen或者KVM，据我所知，一个省级的运营商建造一个数据中心的经费是十几亿的人民币，这都是白花花的银子啊。扯远了，回到主题，VMware是一家商业公司，它的虚拟化软件代码是闭源的，要用就要付钱买license，但是世界上还会有很多有情怀的人的，一些大牛程序员觉得这个技术我也会，你能开发我也能开发出来，我开发出来就是不收钱，把代码拿出来分享给大家，这就是开源，不能让你一家独大，不能什么钱都让你赚了，开源的虚拟化软件有Xen和KVM,开源意味着代码你可以拿得到，但是hold不hold的住就是另外一个问题了，现在开源的主流应该是KVM，这个对技术的要求还是有一定的门槛。<br><strong>虚拟化软件解决了物理设备的灵活性，这就是云计算？</strong><br>答案很显然不是！技术和概念还是在不断的演进，因为还没到弹性的概念，到现在只是解决了物理设备的灵活性，可以从物理设备中虚拟化出一台机器，需要人工指定从哪台物理主机设备上虚拟化，可能还需要比较复杂的人工配置，比如CPU大小，内存要多大，磁盘放在哪个存储，将磁盘挂载到虚拟化出来的机器，需要多少块网卡，网卡的配置等等这些。所以，如果仅仅是虚拟化软件来管理物理主机的话规模一般不会很大，可能最多100台服务器就管不过来了，太复杂了。后期就会发现时间都会耗在这些人工配置上了，并且这百十来台服务器，还远达不到想要多少要多少的程度，走了一圈又回去了，这就尴尬了。规模大了，单凭虚拟化软件人工配置耗时比较长，如何解决？<br><strong>为了解决这个问题，用调度算法</strong></li><li>池化阶段<br>调度算法！算法就是这么一个神奇的东西，没有一点点防备，就这样子出现，带给我们惊喜。调度算法长什么样呢？要想调度，首先要把资源整合起来，对于数据中心来说就是把计算资源、存储资源、网络资源进行池化，把这些资源放在一个资源池里边，调度算法在这个资源池里边进行资源的调度，用户需要多少的CPU，内存，磁盘的虚拟机，调度算法就会自动在资源池里边寻找一台能满足用户需求的物理主机，在这台物理主机上虚拟化一台虚拟机，按照用户要的配置自动配置好虚拟机，用户就能直接用了。<br>好了，到现在已经实现资源的弹性了，就是常说的IaaS,这样子就足够了吗？显然不够，点几下鼠标一台虚拟机出来了，你还得登录到虚拟机上进行部署你的应用，如果是几十台虚拟机，你还是得人工去扩容，一台一台的去部署你的应用，哎，还得继续演进~<br><strong>云计算不仅要管资源，还要管应用</strong></li><li>应用阶段<br>应用阶段是我自己起的，为了实现应用的灵活性，于是又在IaaS上加了一层，用来管理资源以上的应用弹性问题。这个应用大致可以分为两种：一种是通用的应用，一种是自己的应用。先来说说通用，通用的应用比如说数据库，缓存，消息队列这些软件，大家的配置其实都差不多，我们只需把自己的应用对接起来用就完了，云平台需要保证的是提供的这些通用应用不能挂，而且配置不允许改变，所以云平台需要养一批人这些人来维护，比如说MySQL数据库，需要云平台这边的MySQL高手来维护这些MySQL应用，保证服务可用。作为用户，你可以专注于业务，其余数据库的性能问题都可以花钱交给云平台来做，比如数据库的分库分表，读写分离等等。再来看看用户自己的应用，自有应用要实现自动安装，这个是云平台帮不了你的，因为是你开发，只有你才知道如何部署，云平台所能做的就是提供自动化安装条件，自动化安装脚本得你来写，所以云平台往往会提供一个工具，能够让你在新创建出来的虚拟机进行自动化部署你的应用，实现应用层面的真正弹性。这些自动化部署工具有Chef、Puppet、Ansible等，后边应该会写一些文章来讲Ansible。当然了，2018年是容器元年，容器在2018年火了，容器也能很好的解决应用部署问题，但容器不仅仅就是这么点功能，后续应该也会写一些文章来讲讲Docker。</li></ol><p>看完了云计算的演进过程，再来看看云的分类：私有云和公有云。也有把私有云和公有云混合建设的，名字简单明了，就叫混合云，这个就不用细说了，先来看看什么是私有云，私有云就会把虚拟化软件和池化软件部署在别人数据中心里边，LZ从事的就是私有云方向。使用私有云的客户往往很有钱，自建IDC，然后买云厂商的解决方方案，让自己的IT基础建设池化，也叫云化。再来看看公有云，我想每个人接触云都是从公有云开始的，像国外的AWS，国内阿里云、腾讯云、百度云。公有云和私有云不同在于，云数据中心是云厂商自建的，从虚拟化软件到池化，再到服务器等物理设备都是云厂商一家提供的，用户不需要很大的时间和人力投入，只要注册一个账号，点几下鼠标就可以创建出一台虚拟机。</p><blockquote><p>说个题外话，不知道有没有人像我以前一样好奇，为什么云计算这个东西是电商公司做的非常好，国外的亚马逊，国内的阿里云，这都是电商巨头，现在又多了一个十分赚钱的业务【云计算】。为什么是电商公司而不是传统的IT巨头微软，IBM这些呢？跟我来细细品味，首先一个技术的诞生和蓬勃发展肯定是解决了某些业务场景所遇到的难题，电商的业务场景有哪些可能和云计算扯上关系呢？其实都是，最典型的就是大促，特别是国内的双十一，大家都在这一天疯狂的上淘系应用买东西，后台负载那是前无古人，后无来者啊，不能总是提前准备好很多的物理机来支撑这一天的大促，而且物理机也不能很快的进行扩容，所以总是部署了很多的物理机，以防业务中断，如果淘系应用在双十一这一天挂了，损失的可是千亿级别营业额！！还有大促过后，很多的物理机器都是闲置的，你还不能断电，这些机器都是嗜血的，不能赚钱还得养着他们，大促一天赚来的钱都不够养啊。这个时候做云就势在必行了，大促期间创建大量的虚拟机来支撑，双十一过后释放掉资源，包装成云产品卖给其他客户，又赚了一笔。但是做云这个真的太难了，首先肯定不能用商业软件，因为商业软件的费用非常高，而且这些商业软件的公司并没有这种业务场景，很快就会遇到瓶颈，这种时候只能用开源解决方案，但是得有高手在，要hold得住这些开源的东西，这也造就了阿里云的一批国内的顶尖高手。电商业务发展需要云平台的支撑，云平台撑住了又可以让电商更加繁荣的发展，这简直了，相辅相成，赚的可谓是让国内其他公司嫉妒啊，后来很多公司纷纷做云，或者纷纷做电商，但是都干不过阿里，很简单，后来者只能喝汤，还有业务和云不能做到相辅相成。开源的解决方案中目前比较主流的是KVM,以及池化平台OpenStack，这两个结合在一起应该算是云计算开源平台的标准了，几乎每个云计算厂商都有做兼容，甚至是二次开发。但是2018年，容器火了，淘系应用也全部容器化，为什么容器这么火，因为它完美的诠释了弹性计算，秒级启动，性能强大，几乎不浪费资源等特性深受大家追捧，但是这个并不是新兴的技术，是Linux内核支撑的，但是这也不得不佩服。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flag</title>
      <link href="2019/01/18/flag/"/>
      <url>2019/01/18/flag/</url>
      
        <content type="html"><![CDATA[<p>这个作为一个日期提醒自己，以后总结会需要到这个日期。<br>今天做了一个决定，几个月后会回来review</p><a id="more"></a><blockquote><p>2019/4/13</p></blockquote><blockquote><p>2019/6/9</p></blockquote><blockquote><p>2019/7/28</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能Nginx(一)</title>
      <link href="2018/12/22/talk-nginx/"/>
      <url>2018/12/22/talk-nginx/</url>
      
        <content type="html"><![CDATA[<!-- ![Nginx服务网关](/asset/img/nginx/nginx.png) --><p>Nginx是后端开发人员应该都会接触的一款基础软件，以支持高并发访问面世，在开发环境中经常会配置一些Nginx参数来支持我们开发，那么问题来了，你有系统的了解过吗？</p><a id="more"></a><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p>Nginx是一个高性能的Web和反向代理服务器。</p><h2 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>Web服务器一般用来处理JavaScript，HTML，CSS等静态资源。同类产品有Apache，IIS,但是Nginx是C语言写的，并且使用的epoll and kqueue开发模型，占用更少资源，却拥有更高的性能。一般谈到Web服务器的时候往往会谈到Web应用服务器，比如Tomcat、Jetty等，Web应用服务器是处理Servlet程序的载体，Web应用服务器的并发能力远低于Web服务器。</p><h3 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h3><p>首先理解一下什么是代理，默认是正向代理，代理的是客户端，通过客户端的设置，实现让一台服务器(代理服务器)来代理客户端，客户端所有的请求都交由代理服务器来处理，比如翻墙用的梯子就是正向代理最好案例。认识了代理，反向代理就和正向代理正好相反，用一台服务器代理真实的服务器，当有用户进行访问请求时，不再访问真实的服务器，而是访问代理服务器，有代理服务器将请求转发交给真实的服务器处理。<br>Nginx用来当反向代理服务器时，需要在Nginx的配置文件中配置好反向代理的规则，不同的请求交给不同的真实服务器处理，当请求到达Nginx时，Nginx会根据已经定义好的规则进行请求的转发，从而实现路由的功能，并且可以解决应用中通过域名访问的时候的端口问题。</p><p>在开发中，我们更多是把他当做网关，因为它具备网关必备的功能：</p><ul><li>反向代理</li><li>负载均衡</li><li>动态路由</li><li>请求过滤</li></ul><p>和SpringCloud中的Zuul网关一样，但是Zuul网关我们是用来做服务内部调用的网关，带有鉴权作用，Nginx作为外部网关，因为并发能力太强了，单机可以支持50000个并发，直接碾压Tomcat的200个并发。</p><h2 id="Nginx实践"><a href="#Nginx实践" class="headerlink" title="Nginx实践"></a>Nginx实践</h2><p>安装和启动这里就直接略过了，看到Nginx的欢迎页面就说明Nginx启动好了。</p><p><img src="/asset/img/nginx/visit-nginx.png" alt="访问Nginx"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>nginx.conf是Nginx的配置文件，它是由特定的标识符(指令符)分为多个不同的模块，这个文件就是前文讲过的配置反向代理规则的地方，接下来了解下Nginx的配置文件。<br>指令符分为简单指令和块指令:</p><ul><li>简单指令格式： name value;</li><li>块指令格式：  {name value;} </li></ul><p>块指令也可以称为上下文(e.g. events,http,server,location)，值得注意的是，所有不属于块指令的简单指令都属于main上下文，http块指令也属于main上下文，server块指令属于http上下文</p><h3 id="配置静态访问"><a href="#配置静态访问" class="headerlink" title="配置静态访问"></a>配置静态访问</h3><p>Nginx默认在http上下文中配置了一个server的块指令，监听80端口，访问<code>/</code>的时候就进入这个server中<br>，并且配置了server的根目录和首页。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>server可以配置多个，相当于配置多台server提供服务，但是都是通过80端口访问Nginx之后，通过Nginx的proxy_pass进行转发。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  tomcat111;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://10.10.111.111:8090</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  tomcat112;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://10.10.111.112:8090</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h3><p>1.轮询(默认)<br>每个请求按照时间顺序逐一分配到不同的后端服务器，按照服务器列表顺序来提供服务，如果down掉了，可以自动跳过。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver&#123;</span><br><span class="line">    server  10.10.111.111;</span><br><span class="line">    server  10.10.111.112;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.指定权重</p><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver&#123;</span><br><span class="line">    server 10.10.111.111 weight=10;</span><br><span class="line">    server 10.10.111.112 weight=5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.IP绑定<br>每个请求按照请求IP的HASH结果分配，这样子每个IP固定访问一个后端服务，这个可以解决集群的session共享问题。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server  10.10.111.111;</span><br><span class="line">    server  10.10.111.112;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置Nginx解决跨域问题"><a href="#配置Nginx解决跨域问题" class="headerlink" title="配置Nginx解决跨域问题"></a>配置Nginx解决跨域问题</h3><p>跨域问题是浏览器为了安全性做的一个限制，请求的url和浏览器地址栏的url中端口|域名|协议不一样都属于跨域，我们可以借助Nginx的反向代理解决这个这个问题。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xxx.com;</span><br><span class="line">    location /order &#123;</span><br><span class="line">        proxy_pass  http://search.a.com:8090</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location /manage &#123;</span><br><span class="line">        proxy_pass  http://manage.a.com:8090</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置防盗链"><a href="#配置防盗链" class="headerlink" title="配置防盗链"></a>配置防盗链</h3><p>利用referer来做防盗链检查，只允许某个域名来请求资源，如果不是从某个域名来的，返回403未授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xxx.com;</span><br><span class="line">    location ~ .*\.(jpg|jpeg|JPG|png|gif|icon)$ &#123;</span><br><span class="line">        valid_referers blocked http://www.xxx.com www.xxx.com;</span><br><span class="line">        if ($invalid_referer) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx高可用"><a href="#Nginx高可用" class="headerlink" title="Nginx高可用"></a>Nginx高可用</h2><p>Nginx作为外部网关，如果只是一台的话存在单点故障，那么整个后端服务都不能提供服务，所以要搭建Nginx高可用，现在互联网应用基本都在关注这两点，高并发和高可用。我们借助Keepalived来实现高可用,那么接下来我们来了解一下Keepalived。<br>Keepalived从字面意思就可以知道它的作用–保持活着。官方的说辞是主要提供负载均衡(Load Balance)和高可用(high-availablity)功能。负载均衡实现需要依赖Linux的虚拟内核模块ipvs(IP虚拟服务器，用于实现网络服务的负载均衡)，高可用通过VRRP协议实现多台机器之间的故障转移业务。</p><h3 id="配置Keepalived"><a href="#配置Keepalived" class="headerlink" title="配置Keepalived"></a>配置Keepalived</h3><p>Keepalived的配置文件为keepalived.conf，配置说明如下:<br>Master节点<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id nginx111 ##标识节点的字符串，通常为hostname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script "/etc/keepalived/nginx_check.sh" ##执行脚本位置，检查节点状态，根据返回结果动态调整权重</span><br><span class="line">    interval 2 ##检测时间间隔</span><br><span class="line">    weight -20 ## 如果条件成立则权重减20（-20）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER   ## 主节点为MASTER，备份节点为BACKUP</span><br><span class="line">    interface en0  ## 绑定虚拟IP的网络接口（网卡）</span><br><span class="line">    virtual_router_id 111  ## 虚拟路由ID号</span><br><span class="line">    mcast_src_ip 10.10.111.111 ## 本机ip地址</span><br><span class="line">    priority 100  ##优先级配置（0-254的值）</span><br><span class="line">    Nopreempt  </span><br><span class="line">    advert_int 1 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s</span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456 ## 真实生产环境下对密码进行匹配</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.111.110 ## 虚拟ip(vip)，可以指定多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Backup节点:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id bhz006</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script "/etc/keepalived/nginx_check.sh"</span><br><span class="line">    interval 2</span><br><span class="line">    weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface en0</span><br><span class="line">    virtual_router_id 112</span><br><span class="line">    mcast_src_ip 10.10.111.112</span><br><span class="line">    priority 90 ##优先级配置,比master低</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.10.111.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx_check.sh 脚本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动Nginx和Keepalived，检查vip是否配置在对应的网络接口，干掉Master，Nginx还是能够正常提供服务。一般当某些服务出现问题，特别是像Nginx这些重要组件出现问题的时候，一般会从脚本文件中加上发送邮件的代码，或者有监控平台的话会以各种各样的方式比如短信、微信、钉钉进行通知。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java后端面试题整理</title>
      <link href="2018/12/18/interview-summary/"/>
      <url>2018/12/18/interview-summary/</url>
      
        <content type="html"><![CDATA[<!-- ![惠灵顿](/asset/img/interview-summary/Mac.jpeg) --><p>这个冬天有点冷，冬天了还是储藏点过冬的粮食，用倒推法来总结相关知识，这篇博客将会长期更新，收集网上的面试题，然后自己整理思路，以后自己肯定会用的上，也为以后博客积累素材。<br><a id="more"></a><br>首先纠正一下我之前的错误观点，项目经历不是那么高大上跳槽是不是不好跳，因为面试肯定会问项目，所以这就导致我有一个误解，项目不高大上不好跳，或者被压工资，其实项目这块是最好讲解的，首先你肯定比面试官熟悉你们的项目，面试官只是在听你描述的时候问你一些问题来求证你是否做过，所以<code>面试讲解的时候尽可能说一个不是那么众所周知的东西</code>，那样子就可以很容易搞定面试中的项目，如果你说一些大家都专研的或者你说的那个东西正好是面试官比较精通的东西，那你这是撞枪口了认命吧，当然如果你对项目的每个细节包括原理到代码实现都十分清晰的话那当我没说了，像我做的是云计算业务的，上到Java Web,下到CPU,内存，存储这些虚拟化，我想没有人都可以很精通，能精通一两个东西已经非常非常牛了。</p><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><blockquote><p>1.String类有看过源码吗？和StringBuffer，StringBuilder有什么区别？</p></blockquote><p>String类是一个final不可修改的类,说明String类不能被继承，StringBuffer和StringBuilder都是用来拼接字符串用的，只有调用toString()方法的时候才会真正的new String()对象，定义字符串的时后字符量拼接是由JVM进行优化拼接成整体放入字符串常量池中，如果有字符串变量参与了字符串的拼接，那么底层是调用StringBuilder来进行拼接。StringBuffer是线程安全的，StringBuilder是线程不安全的，因此StringBuilder的性能会更好一点，有并发场景的话还是使用StringBuffer来比较合适。</p><blockquote><p>2.Throwable、Error、Exception区别和联系。受查异常和非受查异常都用过哪些，谈一下对他们的理解</p></blockquote><p>Throwable 是异常的顶层类，Error和Exception都继承了这个类，当然还有其他一些子类，在我们开发过程中常接触到也就是这两个类的子类，算是两种比较常用的异常处理。Error代表出现了非常严重的错误，JVM虚拟机无法处理，只能Crash，比如OutOfMemoryError。Exception是一般性的异常，这个一般性指的是不会造成虚拟机宕机，但是对开发人员来说，最复杂的也就是这块，对异常的处理是根据业务来的，是抛出去还是try起来，怎么对异常分类？这个都要根据具体的业务来决定，跟业务相关复杂性肯定不会小，因此如何处理好异常也是很有门道的。<br>Exception和Error本来是互不相关的，但是Exception中有一个叛徒RuntimeException，这个叛徒却是最受开发人员欢迎的，基本上自定义业务一样都会继承它，为什么说他是叛徒呢？它和Error一样，都是都是unchecked的，程序都会进行中止处理，除RuntimException及其子类外的Exception都是checked的，受查异常和非受查异常在在编译过程中就有体现出来，受查异常必须在代码层面做处理，不然编译不通过。常用的非受查异常有OutOfMemoryError,ClassCastException,NullPointerException等，常用的受查异常有：FileNotFoundException，NumberFormatException，NoSuchMethodException，IOException，ClassNotFoundException，InterruptedException等</p><blockquote><p>3.父类和子类之间加载的时候，代码块，构造块，构造方法，普通方法调用的顺序</p></blockquote><p>static静态成员变量或者静态代码块是JVM启动的时候加载，所以会优先执行这个，大概的顺序是代码块优先于构造方法，静态优先于非静态。执行的顺序如下：<br>1.父类静态成员变量和静态代码块<br>2.子类静态成员变量和静态代码块<br>3.父类普通成员变量和普通代码块<br>4.父类构造方法<br>5.子类普通成员变量和普通代码块<br>6.子类构造方法</p><blockquote><p>4.Java泛型有什么好处？是怎么实现的?</p></blockquote><p>泛型的的好处就是在编译的时候检查类型安全，把运行时异常提前到编译时异常，并且所有的强制转换都是自动和隐式转换，提高了代码的重用，不用到处都是显式的强制转换，让代码更加优雅。<br>Java泛型的实现原理是类型擦除，是在编译器这个层次来实现。什么是类型擦除呢？就是使用泛型的时候加上的类型参数，在编译的时候去掉，在生成的Java字节码文件中是不包含泛型中的类型信息的。比如，定义了一个<code>List&lt;String&gt;</code>类型，在编译之后都会变成<code>List</code>类型，JVM看到的只是<code>List</code>，而由泛型附加的类型信息是对JVM来说是透明的。</p><blockquote><p>5.说说你对面向对象、封装、继承、多态的理解。</p></blockquote><ul><li>封装 隐藏具体的实现细节，并且明确标识允许外部使用的成员方法和成员变量，防止数据被破坏。</li><li>继承 子类继承父类，拥有父类除private修饰的所有成员变量和成员方法，并且可以在父类基础上进行扩展，实现了代码的重用。</li><li>多态 一个接口有多个子类或者多个实现类，在运行期间(非编译期间)才决定所引用的对象的实际类型，再根据其实际的类型调用其对应的方法，也就是常说的”动态绑定“。有三个条件：继承、重写、向上转型。因此面试的时候往往就是说说多态的理解，这样子面向对象编程的精髓基本都会涉及了。<br>(1) 继承： 子类继承父类或者实现父类<br>(2) 重写： 子类重写从父类继承过来的方法<br>(3) 向上转型： 父类引用指向子类</li></ul><blockquote><p>6.private修饰的方法可以通过反射访问，那么private的意义是什么？</p></blockquote><p>private只是封装、OOP思想的一种体现，与安全什么的毫无关系。</p><blockquote><p>7.反射的用途及实现</p></blockquote><p>反射的用途可以根据它的作用，或者说是功能来看，反射很重要的特点就是不需要事先知道运行对象是谁，运行时才动态的加载类或者调用方法或者访问属性，这个功能就很强大了，所以一般多用在一些通用框架上，比如Spring框架。</p><p>Class类是Java反射的基础,Class类表示正在运行的Java应用程序中的类和接口，Class类提供了一个静态方法<code>forName()</code>来生成Class的实例，</p><blockquote><p>8.自定义注解的场景及实现</p></blockquote><p>注解可以让代码更加的简洁，JDK就提供了大量的注解，平常开发中也会使用注解来简化开发，比较常用的像日志，权限处理这些都可以通过自定义注解来实现，真正的业务逻辑里边还是通过反射来获取是否标注有注解，有的话才会进行业务处理</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>1.Java的集合类框架介绍一下</p></blockquote><p>最顶层接口是分别是Collection和Map<br>【Collection】<br>Collection的实现类有List、Set和Queue。List的实现类有ArrayList和LinkedList等，ArrayList是一个可扩容的对象数组，LinkedList是一个双向链表。Set里的元素是不可重复，常见的有HashSet，TreeSet，LinkedHashSet等，HashSet的实现基于HashMap，实际上就是HashMap中的key。Queue的实现类有LinkedList，可以用作栈，队列和双向队列，另外还有ArrayBlockingQueue等。<br>【Map】<br>Map的实现类常见的有HashMap，TreeMap，LinkedHashMap和HashTable等，HashMap使用散列法实现，底层是数组+链表。TreeMap是根据键排好序的Map，使用红黑树实现。LinkedHashMap的实现综合了HashMap和双向链表，可保证以插入时的顺序进行迭代访问。HashTable和HashMap相比，HashTable是线程安全的，HashMap是线程不安全的，HashTable的键或值不允许为null，HashMap允许。</p><blockquote><p>2.集合容器类中使用了哪些设计模式？</p></blockquote><p>（1）迭代器模式，Collection继承了Iterable接口，其中的Iterator()方法返回Iterator对象，通过这个对象可以迭代Collection中的元素。<br>（2）适配器模式 <code>java.util.Arrays#asList()</code>可以将数组类型转换为<code>List</code>数据类型。</p><blockquote><p>3.ArrayList源码分析</p></blockquote><p><code>ArrayList</code>实现了<code>RandomAccess</code>接口，支持随机访问，底层是基于数组来实现，数组默认大小为10。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;,<span class="title">RandomAccess</span>,<span class="title">Cloneable</span>,<span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>（1）扩容   添加元素时使用<code>ensureCapacityInternal()</code>方法来保证容量足够，如果不够时，需要使用<code>grow()</code>方法来进行扩容,新容量的大小为<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>,也就是1.5倍。扩容操作需要调用<code>Arrays.copyOf()</code>方法把原数组整个复制到新数组中，因此最好在创建ArrayList的时候就指定大概的容量大小，减少扩容操作的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>(2)删除元素 需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看出 ArrayList 删除元素的代价是非常高的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>(3)Fail-Fast机制  modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>(4)序列化机制 ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure></p><p>ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>4.Vector源码分析</p></blockquote><p>实现大体上与ArrayList类似，但是使用synchronized进行同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E var1)</span> </span>&#123;</span><br><span class="line">    ++<span class="keyword">this</span>.modCount;</span><br><span class="line">    <span class="keyword">this</span>.ensureCapacityHelper(<span class="keyword">this</span>.elementCount + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.elementData[<span class="keyword">this</span>.elementCount++] = var1;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var1 &gt;= <span class="keyword">this</span>.elementCount) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.elementData(var1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>Vector是同步的，因此开销肯定比ArrayList大，访问速度更慢，因此不建议使用，应该使用ArrayList，如果需要到同步，可以使用<code>Collections.synchronizedList()</code>得到一个线程安全的ArrayList,或者使用concurrent包下的CopyOnWriteArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; synList = Collections.synchronizedList(list);</span><br><span class="line">List&lt;String&gt; copyOnWriteList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>5.CopyOnWriteArrayList源码分析</p></blockquote><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。写操作需要加锁，防止并发写入时导致写入数据丢失。写操作结束之后需要把原始数组指向新的复制数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] elements = getArray();</span><br><span class="line">            <span class="keyword">int</span> len = elements.length;</span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">            newElements[len] = e;</span><br><span class="line">            setArray(newElements);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Object[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">        array = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>CopyOnWriteArrayList</code>在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。但是<code>CopyOnWriteArrayList</code>有其缺陷：<br>(1)内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；<br>(2)数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。<br>所以<code>CopyOnWriteArrayList</code>不适合内存敏感以及对实时性要求很高的场景。</p><blockquote><p>6.LinkedList源码分析</p></blockquote><p>基于双向链表实现，使用Node存储链表节点信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>并且每个链表存储了first和last指针：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to first node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to last node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure></p><p>跟ArrayList相比：<br>(1)ArrayList基于动态数组实现，LinkedList基于双向链表实现<br>(2)ArrayList支持随机访问，LinkedList不支持<br>(3)LinkedList在任意位置添加删除元素更快</p><blockquote><p>7.HashMap源码分析(JDK1.7)</p></blockquote><p>(1)存储结构<br>包含一个Entry类型的数组table,Entry存储着键值对，包含了四个字段，从netx字段可以看出Entry是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表。HashMap使用拉链法来解决冲突，同一个链表中存放哈希值相同的Entry。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)拉链法原理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"k1"</span>,<span class="string">"v1"</span>);</span><br><span class="line">map.put(<span class="string">"k2"</span>,<span class="string">"v2"</span>);</span><br><span class="line">map.put(<span class="string">"k3"</span>,<span class="string">"v3"</span>);</span><br></pre></td></tr></table></figure></p><p>新建一个HashMap,默认大小为16，插入&lt;k1,v1&gt;键值对，假设k1的hashcode为115，则115%16=3，则在table[3]插入&lt;k1,v1&gt;这个Entry，假设k2和k3的hashcode都是118，118%16=6，那么&lt;k2,v2&gt;和&lt;k3,v3&gt;都是插入table[6]这个桶内，&lt;k3,v3&gt;在&lt;k2,v2&gt;前面，即&lt;k3,v3&gt;的next元素是&lt;k2,v2&gt;,每次插入元素都是直接插入链表的表头。</p><p>(3)get操作<br>查找需要分为两步：<br>①计算键值对所在的桶<br>②在链表上顺序查找，时间复杂度显然和链表的长度成正比。</p><p>如何确定键值对的桶下标呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = hash(key);</span><br><span class="line"><span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是两步，先计算hash值，然后对table长度取模。计算hash值这个方法很常规，关键是取模indexFor()这个方法很有意思，正常的写法应该是<code>h%length</code>,但是jdk源码里边写的是<code>h&amp;(length-1)</code>,第一次看到这个的时候我就愣了，jdk源码应该不会有这么大的bug！这两相等？研究了一下之后发现都是写代码的，人与人之间的差别不是一丁半点！！！</p><p>假设x=1&lt;&lt;4,即x为2的4次方，y的值为10110010<br>正常人取模：y%x<br>y:10110010<br>x:00010000<br>y%x:00000010<br>大神取模：y&amp;(x-1)<br>y:10110010<br>x-1:00001111<br>y&amp;(x-1):00000010</p><p>位运算的代价比求模运算小的多，因此带来更高的性能。但是这个有一个前提就是x必须是2的n次方，这样子x-1就会是一堆的1，和y做与运算之后就把y的高位干掉，只剩下低位，达到取模效果，这个不得不佩服！</p><p>(4)put操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 键为 null 单独处理</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 确定桶下标</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 先找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 插入新键值对</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 头插法，链表头部指向新的键值对</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HashMapy允许插入键为null的键值对，但是无法调用null的hashCode()方法，也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。HashMap使用第0个桶存放键为null的键值对。<br>对于键不是null的键值对，使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。</p><p>(5) 扩容原理<br>假设HashMap的table长度为M，需要存储的键值对数量为N，如果哈希函数满足均匀性的要求，那么每条链表的长度为N/M,因此平均查找次数的复杂度为O(N/M)。<br>为了让查找的成本降低，应该尽可能使得N/M尽可能小，因此需要M足够大，HashMap采用动态扩容来根据当前的N值来调整M值，使得空间效率和时间效率都得到保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 初始容量 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 最大容量 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认负载因子 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Entry数组 */</span></span><br><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 键值对数量 */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 阈值 */</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 负载因子 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 修改次数 */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><p>当需要size大于threshold时，需要进行扩容操作，capacity为原来的两倍，扩容操作需要把oldTable中的所有键值对重新插入newTable中，这个步骤是非常耗时的。因此，如果知道table大小的话最好通过构造函数传入，避免后续扩容造成性能问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么问题来了，扩容之后把原来table的entry复制到新的table中，并且table长度变了，那原来的hash值又要重新计算一遍？是的！HashMap使用了一个特殊的机制，可以降低重新计算桶下标的操作，假设原来的table长度为16(00010000)，扩容之后的table长度为32(00100000)，对于一个key，如果它的hash值第五位上为0，那么取模结果和以前一样，如果为1，那么得到的结果为原来的加上16。</p><p>(6)计算table容量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>8.ConcurrentHashMap源码分析(JDK1.7)</p></blockquote><p><code>ConcurrentHashMap</code>和<code>HashMap</code>实现上类似，最主要区别是<code>ConcurrentHashMap</code>采用了分段锁(Segment),每个分段锁维护着几个同(HashEntry),多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高，并发度就是Segment的个数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 默认的并发级别为 16，也就是说默认创建 16 个 Segment */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br></pre></td></tr></table></figure></p><p>每个Segment维护一个count变量来统计该Segment中的键值对个数，在执行size()方法时，需要遍历所有的Segment然后把count累计起来。ConcurrentHashMap在执行size()时，先尝试不加锁获取，如果连续两次不加锁获取的结果一致，那么可以认为这个结果是正确的。尝试次数超过3次，就需要对每个Segment进行加锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of unsynchronized retries in size and containsValue</span></span><br><span class="line"><span class="comment"> * methods before resorting to locking. This is used to avoid</span></span><br><span class="line"><span class="comment"> * unbounded retries if tables undergo continuous modification</span></span><br><span class="line"><span class="comment"> * which would make it impossible to obtain an accurate result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 超过尝试次数，则对每个 Segment 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 连续两次得到的结果一致，则认为这个结果是正确的</span></span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。JDK 1.8 使用了CAS操作来支持更高的并发度，在CAS操作失败时使用内置锁 synchronized。</p><blockquote><p>9.LinkedHashMap源码分析(JDK1.7)</p></blockquote><p><code>LinkedHashMap</code>继承自HashMap，因此有HashMap的所有特性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>内部维护了一个双向列表，用来维护插入顺序或者LRU顺序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The head (eldest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The tail (youngest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** accessOrder 决定了顺序，默认为 false，此时维护的是插入顺序 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure></p><p>LinkedHashMap最重要的是以下用于对维护顺序的函数afterNodeAccess()和afterNodeInsertion()，会在put、get等方法中调用。</p><p>当一个节点被使用时，调用get方法，如果assessOrder为true，则会将该节点移到链表尾部。也就是说指定为LRU顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行put操作之后，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first。evict 只有在构建 Map 的时候才为 false，在这里为 true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><blockquote><p>1.Java中有几种方式可以创建线程？</p></blockquote><ul><li>继承<code>Thread</code>并重写<code>run</code>方法</li><li>实现<code>Runnable</code>接口并重写<code>run()</code>方法，并将作为参数传入<code>Thread</code></li><li>实现<code>Callable</code>接口并重写<code>call()</code>方法，<code>call()</code>方法有返回值</li><li>由线程池创建并管理线程</li></ul><blockquote><p>2.Java线程池怎么实现的？主要核心类讲一下</p></blockquote><p><code>Executors</code>是线程池的工厂类，通过调用它的静态方法来创建线程池，比如<code>newCachedThreadPool()</code>方法，这些静态方法统一返回一个<code>ThreadPoolExecutor</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                        TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                        RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数解释：</p><ul><li>corePoolSize: 指定线程池中线程的数量</li><li>maximumPoolSize: 线程池中最大的线程数量</li><li>keepAliveTime: 当线程池中的线程数量超过corePoolSize的时候，多余的线程最大的存活时间</li><li>unit: keepAliveTime的单位</li><li>workQueue: 任务队列，被提交但还未被执行的任务</li><li>threadFactory: 线程工厂，用于创建线程</li><li>handler: 拒绝策略，当任务太多来不及处理的时候，采用什么方式拒绝任务</li></ul><p>核心参数: workQueue和handler<br>【workQueue】<br>有<code>ArrayBlockingQueue</code>有界队列，<code>LinkedBlockingQueue</code>无界队列，<code>SynchronousQueue</code>直接提交队列<br><code>ArrayBlockingQueue</code>：当线程池中实际线程数小于corePoolSize时，直接创建线程执行任务，当大于corePoolSize时，提交到workQueue中，因为这个队列是有界的，当队列满时，在不大于maximumPoolSize的情况下，创建线程执行任务，如果大于maximumPoolSize，执行拒绝策略handler<br><code>LinkedBlockingQueue</code>：当线程池中实际线程数小于corePoolSize时，直接创建线程执行任务，当大于corePoolSize小于maximumPoolSize时，提交到workQueue中，因为队列是无界的，所以之后提交的任务都会进入队列中<br><code>SynchronousQueue</code>：该队列没有容量，对提交的任务不做保存，直接新增线程来执行任务。</p><p>【handler】</p><ul><li>直接抛异常</li><li>在调用者的线程中执行当前任务</li><li>丢弃最老的一个请求，将队列头的任务poll出去</li><li>直接丢弃无法处理的任务，不做任何处理</li></ul><blockquote><p>3.如何终止线程？</p></blockquote><ul><li>调用线程interrupt()方法，执行线程体业务代码之前使用interrupted()方法进行判断是否被中断，只有为false才会执行线程体,调用线程interrupt()方法之后线程体业务代码就不会再被执行。</li><li>直接调用线程的stop()方法，这是jdk6以前的做法，现在是不推荐了，因为会导致线程不释放锁，有可能会出现死锁情况。</li></ul><blockquote><p>4.说一下原子性，有序性，可见性</p></blockquote><ul><li>原子性：一个操作或者多个操作，要么全部执行成功，要么全部不执行。</li><li>可见性：当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他的线程能够立即看得到修改的值</li><li>有序性：程序执行的顺序按照代码的先后顺序执行，不进行执行重排。</li></ul><blockquote><p>5.说一下Object对象的notify()和wait()方法</p></blockquote><p>Object对象中notify()和wait()是用来实现等待/通知模式，调用wait()方法之后线程进行等待状态，等待状态中的线程可以通过notify()方法唤醒并继续执行。等待和阻塞不同，阻塞状态的线程需要获取新的锁。wait()、notify()和notifyAll()方法需要配合synchronized使用。</p><blockquote><p>6.Synchronized实现原理</p></blockquote><p>synchronized可以保证方法或者代码块在执行时，同一时刻只有一个线程访问，同时还保证了共享变量的内存可见性。Java中的每一个对象都可以作为锁，属于重量级锁，jdk1.6之后进行了优化，由轻量级向重量级升级，偏向锁-&gt;自旋锁-&gt;轻量级锁-&gt;重量级锁来减少锁操作的开销。</p><ul><li>同步代码块：同步代码块锁的是括号里边的对象，monitorenter指令插入到同步代码块的开始位置，monitorexit指令插入到同步代码块的结束位置，JVM需要保证每一个monitorenter都有一个monitorexit与之对应，当Monitor被持有之后，它将处于锁定状态，线程执行到monitorenter指令时，将会尝试获取对象所对应的Monitor所有权，即尝试获取对象的锁。</li><li>同步方法：synchronized方法在JVM层面并没有任何特别的指令来实现被Synchronized修饰的方法，而是在Class文件的方法表中将该方法的access_flags字段中synchronized标识位设置为1，表示方法是同步方法，并使用调用该方法的对象或该方法所属的class在JVM的内部对象做为锁对象。</li></ul><blockquote><p>7.volatile实现原理</p></blockquote><p>volatile是轻量级的锁，它不会引起上下文的切换和调度。</p><ul><li>可见性：对一个volatile修饰的变量进行读操作，总可以看到对这个变量最终的写。</li><li>原子性：对一个volatile修饰的变量读写具有原子性，但是符合操作除外，例如i++。</li><li>禁止重排：JVM底层采用内存屏障来实现volatile语义，防止指令重排序。<br>鉴于这三个特性，volatile经常用于这两个场景：状态标记常量，Double Check。</li></ul><blockquote><p>8.锁的分类，都有那些锁？</p></blockquote><ul><li>可重入锁：在一个线程中可以多次获取同一把锁，ReentrantLock和synchronized都是可重入锁。</li><li>可中断锁：可以中断相应的锁，synchronized不是可中断的锁，Lock是可中断锁。</li><li>公平锁：尽量以请求锁的顺序来获取锁。synchronized是非公平锁，Lock默认是非公平的，但是可以设置成公平锁。</li></ul><blockquote><p>9.说一下ReentrantLock锁</p></blockquote><p>ReentrantLock，可重入锁，是一种递归无阻塞的同步机制。可以等同于synchronized的使用，但是ReentrantLock提供了更加强大，灵活的锁机制，可以减少死锁发生的概率。ReentrantLock实现了Lock接口，基于内部sync实现，Sync实现AQS,提供了FairSync和NonFairSync两种实现。Condition和Lock一起使用以实现等待/通知模式，通过await()和signal()来阻塞和唤醒线程。</p><blockquote><p>10.说一下读写锁</p></blockquote><p>ReentrantReadWriteLock维护一对锁，一个读锁，一个写锁，并发性得到较大的提升。在同一时间内，可以允许多个读线程进行访问，但是，在写线程访问时，所有读线程和写线程都会被阻塞。</p><blockquote><p>11.AQS队列同步器</p></blockquote><p>AQS是构建锁或者其他同步组件基础框架，包含了实现同步器的细节(获取同步状态，FIFO同步队列)。AQS的主要使用方式是继承，子类通过继承AQS,并实现它的抽象方法来管理同步状态。</p><ul><li>维护一个同步状态state，当state&gt;0时，表示已经获取了锁，当state==0时，表示释放了锁。</li><li>AQS通过内置的FIFO同步队列来完成资源获取线程的排队工作，如果当前线程获取同步状态失败(锁)时，AQS则会将当前线程以及等待状态等信息构造成一个节点并将其加入同步队列，同时阻塞当前线程。当同步线程释放时，则会把节点中的线程唤醒，使其再次获取同步状态。</li></ul><blockquote><p>12.synchronized和Lock的区别</p></blockquote><ul><li>Lock是一个接口，synchronized是Java中的关键字，是语言的内置特性。</li><li>synchronized在发生异常时，会自动释放所占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能发生死锁现象，因此，使用Lock时需要在finally块中释放锁。</li><li>Lock可以让等待的线程响应中断，而synchronized不行，使用synchronized时，等待的线程会一直等待下去，不能响应中断。</li><li>通过Lock可以知道是否获成功获取锁，而synchronized无法办到。</li><li>Lock可以提高多个线程进行读操作的效率。</li></ul><blockquote><p>13.说一下CAS</p></blockquote><p>Compare And Swap 比较交换，synchronized保证了代码块的原子性，但是会引起性能问题，volatile是不错的选择，但是不能保证原子性。所以需要CAS来保证原子性。<br>CAS有三个参数，内存值V，旧的预期值A，要更新的值B，当且仅当内存值V的值等于旧的预期值A时，才会将内存值V修改为B，否则什么都不干。</p><blockquote><p>14.HashMap是线程安全的嘛？如何变得安全？</p></blockquote><p>不是线程安全的，添加元素到map中时，数据量大产生扩容操作，多线程导致HashMap的node链表形成环状的数据结构导致死循环，所以HashMap是线程不安全的。可以通过Collections.synchronizedMap()方法对HashMap进行包装，返回一个SynchronizedMap对象，在源码中SynchronizedMap也是通过synchronized方法来保证线程安全的。JUC包中的ConcurrentHashMap来进行高效安全并发，注意的是key和value都不能为null。</p><blockquote><p>15.ConcurrentHashMap的实现方式</p></blockquote><p>JDK1.7中采用分段锁和HashEntry使锁更加细化，其中Segment继承于ReentrantLock，理论上支持ConcurrentLevel(Segment数组数量)的线程并发。</p><p>JDK1.8采用CAS+synchronized来保证并发更新的安全，当然底层使用数组+链表+红黑树的存储结构。<br>table中存放Node节点数据，默认Node数据大小为16，扩容大小总是2^N,为了保证可见性，Node节点中的val和next节点都用volatile修饰，当链表长度大于8时，会转换成红黑树，节点会被包装成TreeNode放在TreeBin中。</p><ul><li>put操作:<ul><li>计算key对应的hash值，</li><li>如果hash表还未初始化，调用的intTable()进行初始化，否则在table中找到index位置，并通过CAS添加节点，如果链表长度超过8，则将链表转换为红黑树，如果节点总数超过，则进行扩容。</li></ul></li><li>get操作：<ul><li>无需加锁，直接根据key的hash值遍历node</li></ul></li></ul><blockquote><p>16.CountDownLatch和CyclicBarrier的区别</p></blockquote><p>CyclicBarrier允许一组线程相互等待，直到到达某个公共的屏障点，每个线程都调用await()方法，告诉CyclicBarrier我已经到达屏障，然后当前线程被阻塞，当所有的线程都到达了屏障，结束阻塞，所有的线程可继续执行后续逻辑。<br>CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后再继续执行，使用一个计数器实现，计数器初始值为线程的数量，当每个线程完成自己任务后，计数器的值就会减一，当计数器的值为0时，表示所有的线程都完成了任务，然后CountDownLatch上等待的线程就可以恢复执行任务。</p><blockquote><p>17.什么是乐观锁和悲观锁？</p></blockquote><p>像synchronized这种独占锁属于悲观锁，它是在假设一定会发生冲突，那么加锁恰好有用，除此之外，还有乐观锁，乐观锁就是假设没有冲突发生，那么我正好可以进行某项操作，如果要是发生冲突呢？那我就重试直到成功，乐观锁最常见的就是CAS。</p><blockquote><p>18.ThreadLocal原理分析</p></blockquote><blockquote><p>19.sleep() 、join（）、yield（）有什么区别?</p></blockquote><blockquote><p>20.说说 CountDownLatch 与 CyclicBarrier 区别?</p></blockquote><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><blockquote><p>1.ClassLoader的种类，父子关系(不一定是继承)，双亲委派机制，Java为什么要用双亲委派机制?</p></blockquote><p>【种类】<br>ClassLoader包括：引导类加载器(BoostrapClassLoader)、扩展类加载器(ExtensionsClassLoader)、应用类程序加载器(ApplicationClassLoader)、自定义类加载器</p><ul><li>引导类加载器：加载JVM自身需要的类，由C++实现，是虚拟机的一部分，负责将lib下和核心类库和-Xbootclasspath参数指定路径下的jar包加载到内存中，而且虚拟机加载的jar包的时候是根据jar包文件名来识别的，比如rt.jar,如果文件名不被虚拟机识别，即使把jar包放在lib下边也不会被加载，并且BootstrapClassLoader只加载包名为java、javax、sun等开头的类，这些都是为了虚拟机的安全考虑。</li><li>扩展类加载器：负责加载JAVA_HOME/lib/ext目录下或者由虚拟机参数指定的<code>-Djava.ext.dir</code>指定路径中的类库。</li><li>应用类程序加载器：ApplicationClassLoader是指sun公司实现的<code>sun.misc.Launcher$AppClassLoader</code>,负责加载系统类路径<code>java -classpath</code>或者<code>-Djava.class.path</code>下的类库，一般情况下，这个是默认的类加载器，通过<code>ClassLoader#getSystemClassLoader()</code>方法可以获取。</li><li>自定义类加载器：通过继承<code>java.lang.ClassLoader</code>并重写<code>findClass()</code>方法来实现。</li></ul><p>【父子关系】</p><ul><li>启动类加载器，由C++实现，没有父类</li><li>扩展类加载器，由Java实现，父类为Null，其实是启动类加载器，但是启动类加载器不是Java实现实现的，所以获取到的是Null</li><li>系统类加载器，由Java实现，父类加载器为扩展类加载器</li><li>自定义类加载器，由Java实现，父类加载器为系统类加载器</li></ul><p> 【双亲委派机制】<br> 如果一个类收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在父类加载器，则进一步向上委托，请求最终到达顶层的启动类加载器，如果父类加载器可以完成加载任务，则成功返回，倘若父类加载器无法完成此加载任务，子类加载器才会去尝试加载，这就是双亲委派机制。但是这个翻译不应该叫双亲，应该叫好爸爸机制，因为子类都是不管怎样都是先丢给父类来加载，只有父类加载不了子类才会去加载。</p><p> 【双亲委派机制好处】<br> 为什么要用双亲委派机制呢？肯定是因为这种机制有某个好处使得官方采用。<br> （1）避免类的重复加载。当父类加载器加载了该类时，就没有必要子ClassLoader再加载一次。<br> （2）安全因素考虑，Java核心API中定义的类不会被改变，防止核心API库被随意修改。</p><blockquote><p>2.如何打破双亲委派机制?什么时候需要打破双亲委派机制？有哪些框架打破了双亲委派机制？</p></blockquote><p>打破双亲委派机制不仅要继承<code>java.lang.ClassLoader</code>重写<code>findClass()</code>方法，还要重写<code>loadClass()</code>方法，默认的<code>loadClass()</code>方法是实现了双亲委派机制的逻辑，即会先让父类加载器加载，当无法加载时才由自己加载。因此为了打破双亲委派机制就必须重写<code>loadClass()</code>,可以在这个方法里边使用任何一个类加载器来加载，不一定优先由启动类加载器来加载，这样子就打破了双亲委派机制。</p><p>什么时候需要打破双亲委派机制呢？双亲委派机制很好的解决了各个类加载器的基础类统一问题，越基础的类越由上层的类加载器加载，基础类之所以叫做基础类，是因为他们总是作为被调方被别人调用，但是，如果基础类想调用户的代码，这个时候怎么办呢？这并非不可能的事，这个时候就需要打破双亲委派机制，一个典型的例子就是JNDI服务，它的代码由引导类启动器去加载，但是JNDI的目的就是对资源进行集中管理和查找，需要调用各个厂商实现部署在应用程序的classpath下的JNDI接口提供者(SPI)的代码，但是引导类加载器不认识这些代码，该如何解决呢？引入线程上下文加载器，这个类加载器可以通过<code>java.lang.Thread</code>类的<code>setContextClassLoader()</code>方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个,如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，JNDI服务使用这个线程上下文类加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型。还有一个就是OSGi,为了可以动态加载模块，每个模块都有自己类加载器，这些类加载器组成了网状结构，不再是双亲委派模型中的树状结构。</p><blockquote><p>3.JVM内存结构</p></blockquote><p>JVM内存结构主要有三大块：堆内存、方法区和栈。<br>堆内存是JVM中最大的一块由年轻代和老年代组成，而年轻代内存又被分成三部分，Eden空间、From Survivor空间、To Survivor空间,默认情况下年轻代按照8:1:1的比例来分配<br>方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)<br>栈又分为java虚拟机栈和本地方法栈,主要用于方法的执行</p><blockquote><p>4.对象是否可GC</p></blockquote><p>这个问题其实就是JVM如何判断对象是否需要被回收，JVM使用可达性算法来计算一个对象是否可达。<br>算法思路：通过一些被列为”GC Roots“的对象作为起始点，从这些点开始向下搜索，搜索走过的路径称为引用链，当一个对象到GC Roots没有任何引用链时，则说明对象需要被回收。<br>可以作为GC Roots对象包括以下几种：</p><ul><li>虚拟机栈中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI引用的对象</li></ul><blockquote><p>5.Minor GC、Major GC和 Full GC</p></blockquote><p>堆内存由年轻代和老年代组成。<br>从年轻代空间（包括 Eden 和 Survivor 区域）回收内存被称为 Minor GC。<br>Major GC 是清理老年代。<br>Full GC 是清理整个堆空间—包括年轻代和老年代。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><blockquote><p>1.MySQL数据库的底层原理</p></blockquote><p>MySQL数据库是C/S架构模式，我们关心的是Server端，也就是mysqld这个进程。MySQL服务端是二层架构：<br>1.SQL层(SQL Layer),在MySQL数据库系统处理底层数据之前的所有工作都是在这一层完成，包括权限判断，SQL解析，执行计划优化，查询缓存的处理等等。具体模块及职责如下:</p><ul><li>初始化模块: MySQL Server启动的时候做初始化操作</li><li>核心API: 提供一些非常高效的底层操作功能的优化实现</li><li>网络交互模块: 抽象底层网络交互所使用的api，实现底层网络数据的接收与发送</li><li>Client&amp;Server交互协议模块: MySQL 客户端和服务端交互的协议实现，基于TCP/IP,Socket等</li><li>用户模块: 用户管理模块，包括用户的登录连接权限以及用户的授权管理</li><li>访问限制模块: 根据用户模块的授权信息来控制用户对数据的访问</li><li>连接管理模块: 负责监听对MySQL Server的各种请求，接收连接请求，转发所有的连接请求到线程管理模块，每一个连接上MySQL Server的客户端请求都会被分配或者创建一个连接线程为其单独服务</li><li>Query解析和转发模块: 连接线程接收到客户端的一个Query之后，将Query分类后转发给各个对应的处理模块</li><li>Query Cache模块: 将客户端提交给MySQL的Select类Query请求的返回结果集缓存到内存中，与该Query的一个Hash值做一个对应。当取数据的基表发生变化之后，缓存失效</li><li>Query 优化器模块: 优化客户端请求的Query，根据一些算法来得出最优的策略，告诉程序如何去取这个Query语句的结果</li><li>表变更管理模块: 负责完成DDL、DML的Query，比如update，delete，insert，create table，alter table等语句的处理</li><li>表维护模块: 表的状态检查，错误修复</li><li>系统状态管理模块: 在客户端请求系统状态的时候，将各种系统状态返回给用户，比如show status,show variables等</li><li>表管理器: 维护.frm文件，以及一个Cache,缓存各个表的结构信息。</li><li>日志记录模块: 负责的整个系统的日志记录</li><li>复制模块: 分为Master模块和Slave模块，Master模块主要负责在Replication环境下读取Master节点的binary日志，以及和Slave端的IO线程交互。Slave模块有两个线程(IO线程和SQL线程)，IO线程从Master请求和接受binary日志，并写入本地relay log。SQL线程从relay log中读取日志事件，解析成可以执行的SQL语句，然后顺序执行，这样子从节点就和主节点的数据基本上保持一致。</li><li>存储引擎接口模块: 将各种数据处理高度抽象化，各种存储引擎产品实现接口即可，实现了MySQL特有的可插拔存储引擎。</li></ul><p>2.存储引擎层(Storage Engine Layer),底层数据的存取都是在这一层做的，常用的存储引擎有InnoDB引擎和MyISAM引擎。</p><blockquote><p>2.InnoDB引擎和MyISAM引擎的区别和应用场景</p></blockquote><p>从这两种存储引擎的优缺点来谈区别以及应用场景<br>【InnoDB】<br>优点：支持事务，支持外键<br>缺点：占用磁盘多，读效率慢于MyISAM<br>【MyISAM】<br>优点：查询较快（读取数据不加锁），支持多种存储方式（静态表，压缩表等）<br>缺点：写入较慢（锁表），没有事务。</p><p>结论：支持事务选InnoDB,对读有要求的选MyISAM。</p><blockquote><p>3.数据库索引的原理，分类</p></blockquote><blockquote><p>4.B+树有了解吗？为什么MySQL选用B+树做主要存储结构，为什么常用索引推荐使用B+树？为什么B+树可以减少磁盘IO?</p></blockquote><blockquote><p>5.如何避免索引失效？</p></blockquote><blockquote><p>6.有处理过MySQL优化吗？如何优化？</p></blockquote><blockquote><p>7.MySQL索引使用注意事项</p></blockquote><blockquote><p>8.limit20000加载很慢怎么解决？<br>一般这个会出现在分页中，比如 select <em> from order limit 20000,10<br>这样子MySQL要扫描20010行，返回最后的10行，这个时候我们可以借助索引可以快速的定位的特点来优化，比如 select </em> from order where id &gt; 20000 order by id asc limit 10,通过记录上次的分页的最大值之后直接定位到改行，这样子就只扫描10行记录。</p></blockquote><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>1.聊聊Redis使用场景</p></blockquote><blockquote><p>2.Redis有哪些类型</p></blockquote><blockquote><p>3.Redis内部结构</p></blockquote><blockquote><p>4.Redis持久化机制，如何实现持久化</p></blockquote><blockquote><p>5.Redis集群方案与实现</p></blockquote><blockquote><p>6.Redis为什么是单线程？</p></blockquote><blockquote><p>7.缓存崩溃</p></blockquote><blockquote><p>8.缓存降级</p></blockquote><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="SpringFramework"><a href="#SpringFramework" class="headerlink" title="SpringFramework"></a>SpringFramework</h3><blockquote><p>1.简单谈谈Spring的IOC和AOP,都在哪些场景用到过？</p></blockquote><p>IOC是控制反转，就是对象的创建工作交给Spring容器来做，程序员不需要new出来，需要什么就跟Spring容器要，前提是容器里边有这个对象，底层实现是反射。AOP是面向切面编程，在记录日志，权限控制，事务方面都有应用，底层实现是动态代理。</p><blockquote><p>2.Spring中Bean生命周期过程，以及两种作用域Singleton和Prototype有什么区别，应用场景有哪些？</p></blockquote><p>生命周期:<br>1.Bean的建立：有BeanFactory读取Bean定义文件，并生成各个实例</p><p>2.Setter注入：执行Bean的属性依赖注入</p><p>3.BeanNameAware的setBeanName()：如果Bean实现了org.springframework.beans.factory.BeanNameAware接口，则执行其setBeanName()方法</p><p>4.BeanFactoryAware的setBeanFactory()：如果Bean实现了org.springframework.beans.factory.BeanFactoryAware接口，则执行其setBeanFactory()方法</p><p>5.BeanPostProcessors的processBeforeInitialization()：容器中如果有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之前都会执行这个实例的processBeforeInitializaton()方法</p><p>6.InitializingBean的afterPropertiesSet()：如果Bean类实现了org.springframework.beans.factory.InitailizingBean接口，则执行去afterPropertiesSet()方法</p><p>7.Bean定义文件中定义init-method：如果在xml文件中定义一个Bean的时候指定了init-methond，则执行这个方法，并且这个初始化方法是不能带有参数。</p><p>8.BeanPostProcessors的processAfterInitializaton()：容器中如果有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则去执行processAfterInitialization()方法</p><p>9.DisposableBean的destroy()方法：在容器关闭时，如果Bean实现了org.springframework.beans.factory.DisposableBean接口，则执行它的destroy()方法</p><p>10.Bean定义文件中定义destroy-method：在容器关闭时，执行destroy-method()方法，并且这个方法是不带参数的</p><p>作用域：<br>【singleton】：单例，每次访问都是返回同一个实例，Spring默认，无状态的Bean都应该使用Singleton，比如需要回收的重要资源(数据库连接池，线程池)<br>【prototype】：多例，每次访问都会进行new操作，Spring不会对Bean的整个生命周期进行负责，具有prototype的作用域的Bean创建后交由调用者负责销毁对象回收资源，有状态的Bean应该配置成prototype</p><blockquote><p>3.AOP动态代理模式的两种类型,区别是什么？</p></blockquote><p>AOP动态代理有两种：JDK代理和CGLIB代理，JDK代理只能对实现了接口的类进行代理，而不能针对未实现接口的类。CGLIB代理是针对类(未使用final修饰)实现代理,主要是对指定的类生成一个子类，覆盖其中的方法，底层是使用ASM字节码生成框架，使用字节码技术生成代理类。<br>Spring是怎么选择使用哪种代理的呢？如果一个Bean实现了接口，那么默认使用JDK代理，当Bean没有实现接口时，Spring默认使用CGLIB代理。</p><blockquote><p>4.Spring事务的特性，隔离级别，传播行为</p></blockquote><p>特性：<br>1.原子性(Atomicity)： 事务的不可分割性<br>2.一致性(Consistency)：事务执行前后数据的完整性保持一致<br>3.隔离性(Isolation)：事务执行过程中，不应该受到其他事务的干扰<br>4.持久性(Durability)：事务一旦结束，数据就持久到数据库</p><p>如果事务不考虑隔离性，就会引发安全性问题。比如：<br>1.脏读：一个事务读到了另一个事务未提交的数据<br>2.不可重复读：一个事务读到了另一个事务已经提交的update数据导致多次查询结果不一致<br>3.虚幻读：一个事务读到了另一个事务已经提交的insert的数据导致多次查询结果不一致</p><p>为了解决这个问题，引出事务隔离级别：<br>1.默认(default)：默认的隔离级别，使用数据库的默认隔离级别<br>2.未提交读(read uncommited)：脏读，不可重复读，虚幻读都有可能发生<br>3.已提交读(read commited)：避免脏读，但是不可重复读和虚幻读还是有可能发生<br>4.可重复读(repeatable read)：避免脏读和不可重复读，但是虚幻读还是有可能发生<br>5.串行化(Serializable)：避免上述所有读问题</p><p>MySQL默认的隔离级别是可重复读，Oracle默认的隔离级别是已提交读</p><p>事务的传播行为：<br>1.保证同一个事务中<br>PROPAGATION_REQUIRED：支持当前事务，如果不存在就新建一个<br>PROPAGATION_SUPPORTS：支持当前事务，如果不存在，就不使用事务<br>PROPAGATION_MANDATORY：支持当前事务，如果不存在就抛异常<br>2.保证没有在同一个事务中<br>PROPAGATION_REQUIRED_NEW：如果有事务存在，挂起当前事务，创建一个新的事务<br>PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<br>PROPAGATION_NEVER：已非事务方式运行，如果有事务存在，则抛出异常<br>PROPAGATION_NESTED：如果当前事务存在，则已嵌套事务执行</p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><blockquote><p>1.SpringMVC的作用，与Struct的区别是什么？</p></blockquote><p>SpringMVC是一个基于请求驱动的Web框架，使用了前端控制器模式来设计，再根据请求映射规则分发给相应的页面控制器进行处理。简单点就是处理http请求和响应。<br>区别：</p><ul><li>SpringMVC是基于Servlet来实现，Struct是基于Filter来实现的。</li><li>SpringMVC是基于方法级别的拦截，一个方法对应一个request上下文，Controller Bean默认是sigleton的，只会创建一个Controller，但是没有共享的属性，所以是线程安全。Struct是基于类级别的拦截，每次请求都会创建一个Action，Action Bean在Spring容器中是prototype的，通过setter方法将request注入到属性当中。</li></ul><blockquote><p>2.SpringMVC的工作原理，都涉及到哪些类？</p></blockquote><p>1.用户发送请求至前端控制器DispatherServlet</p><p>2.DispatherServlet接收到请求之后调用HandlerMapping处理映射器</p><p>3.处理映射器找到具体的处理类(xml配置，注解)，生成处理器对象及处理拦截器一并返回给<br>DispatherServlet</p><p>4.DispatherServlet调用HandlerAdapter处理适配器</p><p>5.HandlerAdapter经过适配调用具体的处理器(Controller)</p><p>6.Controller执行完成返回ModelAndView对象</p><p>7.HandlerAdapter将ModelAndView返回给DispatherServlet</p><p>8.DispatherServlet将ModelAndView对象返回给ViewResolver视图解析器</p><p>9.ViewResolver解析后返回具体的View</p><p>10.DispatherServlet根据View进行渲染视图</p><p>11.DispatherServlet响应用户</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><blockquote><p>1.Mybatis有什么优缺点</p></blockquote><p>【优点】<br>1.基于SQL编程，SQL写在XML里边，与程序解耦，对JDBC做了进一步的封装，消除JDBC大量冗余的代码。<br>2.与Spring有很好的集成<br>3.提供映射标签，支持对象与数据库的ORM字段关系映射，提供对象关系映射标签，支持对象关系组件维护<br>【缺点】<br>1.SQL语句工作量大，尤其是字段多或者关联表多的时候。<br>2.SQL依赖于数据库，不能随意更换数据库</p><p>适用场景：<br>专注于SQL，提供足够灵活的DAO解决方案<br>对性能有要求或者需求变化比较多的项目</p><blockquote><p>2.#{}和${}的区别</p></blockquote><p>#{}是预编译处理，\${}是字符串替换<br>Mybatis在处理#{}时，会将SQL中的#{}替换为?,调用PrepareStatement的set()方法来赋值，所以，#{}可以有效的防止SQL注入。处理\${}时，就是把\${}替换成变量的值。</p><blockquote><p>3.实体类中的属性名和表中的字段名不一样你怎么处理？</p></blockquote><p>两种方案<br>（1）resultType是实体类，查询SQL语句中定义字段名的别名，让字段名的别名和实体类属性名一致。<br>（2）resultMap映射，将字段名和属性名的一一对应起来</p><blockquote><p>4.模糊查询like怎么写？</p></blockquote><p>两种写法<br> (1) 在Java代码中添加sql通配符%号<br> (2) 在SQL语句中拼接通配符，会引起SQL注入，不推荐</p><blockquote><p>5.通常一个xml映射文件都会与一个Mapper接口相对应，讲一下Mapper接口的工作原理，还有Mapper接口里的方法可以重载吗？</p></blockquote><p>Mapper接口的全限名，就是xml文件中的namespace值，Mapper接口中的方法名，就是xml中MappedStatement中的id值，Mapper接口中方法的参数，就是传递给SQL的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名可以唯一定位一个MappedStatement。</p><p>Mapper接口中方法是不能重载的，因为是通过全限名+方法名来保存和寻找MappedStatement的。</p><p>Mapper接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Mapper接口生成代理Proxy对象，代理对象Proxy会拦截接口方法，转而执行MappedStatement所代表的SQL，然后将SQL执行结果返回。</p><blockquote><p>6.Mybatis是如何进行分页的？分页插件的原理是什么？</p></blockquote><p>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页。</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的SQL，然后重写SQL，根据direct方言，添加对应的物理分页语句和物理分页参数。</p><blockquote><p>7.Mybatis如何实现一对一查询？</p></blockquote><p>连表查询，只查询一次，通过在resultMap里边配置association节点配置一对一的类就可以完成。</p><blockquote><p>8.Mybatis如何实现一对多查询？</p></blockquote><p>连表查询，只查询一次，通过在resultMap里边配置collection节点配置一对多的类就可以完成。</p><blockquote><p>9.Mybatis是否支持延迟加载，如果支持，实现原理是什么？</p></blockquote><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的是一对一，collection指的是的一对多，在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnable=true|false</p><p>实现原理是使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的SQL，把B查询出来，然后调用a.setB(b)，这样子a.getB()就有值了，接着完成a.getB().getName()方法的调用，这就是延迟加载的原理。</p><blockquote><p>10.Mybatis的一级缓存和二级缓存</p></blockquote><p>一级缓存，基于PrepetualCache的HashMap本地缓存，其存储作用域为本地Session，当Session flush或者close之后，该Session中的所有Cache就将清空，默认打开一级缓存。</p><p>二级缓存，默认也是采用PrepetualCache的HashMap缓存，不用在于其存储作用域为Mapper,或者说是namespace，并且可以自定义存储源，比如Ehcache，默认二级缓存是不开启的，要开启二级缓存，使用二级缓存属性类需要实现序列化接口，在映射文件中配置<cache></cache></p><blockquote><p>11.接口是如何绑定的？</p></blockquote><p>接口绑定有两种方式，一种是通过注解绑定，一种是通过xml绑定。<br>注解绑定就是在接口的方法上面加上@Select,@Update等注解，注解里边写SQL语句。<br>xml绑定就是xml里边用特定的标签来写SQL语句,通过namespace+id来绑定。</p><blockquote><p>12.使用Mybatis的Mapper接口调用时有哪些要求？</p></blockquote><p>（1）xml中namespace即接口的全限名<br>（2）Mapper接口方法名和xml中定义的每个SQL的id相同<br>（3）Mapper接口方法的输入参数类型和xml中定义的SQL的parameterType的类型相同<br>（4）Mapper接口方法的输出参数类型和xml中定义的SQL的resultType的类型相同</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h3><blockquote><p>1.为什么使用消息队列？</p></blockquote><p>消息队列最主要的三个应用场景:解耦、异步、削峰。</p><p>引入消息中间件进行系统解耦，一般使用订阅模式，强耦合的系统通过发布消息到消息队列中，其他系统通过订阅模式来获取消息之后触发来处理业务逻辑，从而实现系统间的解耦，不至于要对接一个新的系统的又要改代码，解耦非常有用，也是很重要的。</p><p>再来说说异步，一些非必要的业务逻辑以同步的方式运行，非常耗时间，特别是调用链很长的时候，不需要同步的等待其他系统调用返回，改进用户体验，类似于单体系统中的线程。</p><p>最后再来说说削峰，我们做的系统的几乎没有什么并发量，但是我可以说说这块的理解，当并发量大的时候，大量的请求涌向数据库连接池，连接池处理不了那么多，只能不断的报数据库连接异常，大量的请求累计会把系统搞垮，这时候就需要消息中间件来的削峰，所有的请求都进入消息队列，然后系统再从队列里按照自己能处理的并发量慢慢拉取消息来处理，这样子就把大并发压力转移到消息队列中间件。</p><blockquote><p>2.使用消息队列的缺点</p></blockquote><p>引入了消息队列这种技术就要知道缺点是什么，能不能cover住这个技术，不然那就是给自己挖坑。</p><p>原本的系统运行的好好的，现在你引入了一个中间件，如果中间件挂了，那你的系统是不是就没法正常运行了，这将会给公司带来直接的经济损失，系统的可用性降低。</p><p>系统的复杂性增加，引入了消息中间件，要考虑很多方面的问题，比如一致性问题，如何保证消息不被重复消费，如何保证消息的可靠传输等等。</p><p>这两个问题都直接涉及到MQ的选型问题。</p><blockquote><p>3.那么多种mq，为什么选择这种，怎么做的技术选型？</p></blockquote><p>技术选型这个该怎么说呢？虽然还轮不到咱，但是我们自己也要懂，总有一天会轮到我们的。做技术选型首先就是要了解都有哪些主流的产品，都有什么优缺点，如果出现了问题我们自己是否能cover住，即使不能，社区会不会解决？活跃度怎么样，这些都是需要了解比较的，然后选出一个能够满足业务前提下的最优的一种产品。</p><p>ActiveMQ, Java语言开发，单机吞吐量万级，延时ms级，主从架构，可用性高，产品成熟，文档全面。社区活跃度低。<br>RabbitMQ, Erlang语言开发，单机吞吐量万级，延时us级，主从架构，可用性高，并发能力很强，性能及其好，延时很低，管理界面较丰富，社区活跃度高。<br>RocketMQ, Java语言开发，单机吞吐量10万级，延时ms级，分布式架构，可用性非常高，MQ功能完备，扩展性级佳,阿里出品，微众银行也有一个分支，质量值得信赖。<br>Kafka, Scala语言开发，单机吞吐量10万级，延时ms级，分布式架构，可用性非常高，只支持MQ的主要功能，像消息查询，回溯等功能未提供，因为其主要应用场景是大数据领域而非MQ。</p><p>综上，可以根据业务场景和团队能力进行技术选型。比如Java小团队，吞吐量不是很大，可以优先选择RabbitMQ，Java中大型团队可以考虑RocketMQ来进行改造，挑战更高的性能。如果是日志采集或者大数据方面的场景，当然要选Kafka了。</p><blockquote><p>4.如何保证消息不被重复消费？或者说如何保证消息队列的幂等性？</p></blockquote><p>什么时候会造成消息重复消费呢？我没有遇到过这种情况，我觉得可能是网络原因造成，正常情况下，消费者在消费完消息后，会发送一个确认消息给消息队列，消息队列就知道该消息被消费了，就会将该消息从消息队列中删除，像RabbitMQ会发送一个ACK确认信息，如果确认信息没有传送到消息队列，导致消息队列不知道自己已经消费过该消息了，再次将该消息发给其他的消费者。</p><p>如果拿到这个消息来做数据库的插入操作，那就给这个消息做一个主键操作，这样子即使重复消费了也会导致主键冲突，避免数据库出现脏数据。</p><p>如果拿到这个消息之后是放到redis里边，那同样也是不需要解决的，redis的set操作就是幂等操作。</p><p>如果还不行，可以借助第三方来做一个消费记录，可以是redis，给消息分配一个全局唯一id，只要消费过该消息，将&lt;id,message&gt;写入redis，消费者在开始消费前，先去redis中查询有没有消费记录即可。</p><blockquote><p>5.如何解决消息堆积问题？</p></blockquote><blockquote><p>6.如何保证消息的有序性？</p></blockquote><blockquote><p>7.如何实现消息队列？</p></blockquote><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><blockquote><p>1.谈谈TCP/IP模型</p></blockquote><p>这个问题可以从OSI七层模型谈起引出TCP/IP五层模型，OSI是学术定义，但是不实用，工业界使用的是TCP/IP。<br>OSI七层模型:</p><ul><li>应用层 针对特定的协议，为应用程序做服务,比如SMP,POP3,SSH,FTP等协议。</li><li>表示层 负责数据格式的转换，把不同表现形式的信息转换成适合网络传输的格式。</li><li>会话层 负责建立和断开通信连接，什么时候建立连接，什么时候断开连接以及保持多久的连接。</li><li>传输层 在两个通信节点之间负责数据的传输，起着可靠传输的作用。(运行在这一层的设备有四层交换机，四层路由器)</li><li>网络层 路由选择，在多个网络之间转发数据包，负责将数据包传送到目的地址。(运行在这一层的设备有路由器，三层交换机)</li><li>数据链路层 负责物理层面互联设备之间的通信传输，比如一个以太网相连的两个节点之间的通信，是数据帧与1、0比特流之间的转换。(运行在这一层的设备是网桥、以太网交换机、网卡)</li><li>物理层 主要是1、0比特流与电子信号的高低电平之间的转换。(运行在这一层的设备是中继器、双绞线)</li></ul><p>TCP/IP五层模型:<br>七层模型中的应用层、表示层、会话层在这个模型中都属于应用层，其他四层不变。</p><blockquote><p>2.TCP的三次握手和四次挥手，为什么要这样子设计？</p></blockquote><p>【三次握手】<br>1.客户端发起连接请求，发送SYN=1和客户端序号c给服务器端，同时进入SYN_SENT状态。<br>2.服务端收到SYN后需要作出确认，于是发送ACK=1,同时自己也发送SYN=1,服务端序号s，同时发送确认号c+1(表示下一个接受序号),进入SYN_RCVD状态。<br>3.客户端收到服务端的SYN和ACK,作出确认，发送ACK=1，以及序号c+1的数据，同时发送确认号s+1(表示客户端下一个要接收的序号)。此时客户端和服务端进入ESTABLISHED状态，确认过眼神，状态已经建立。</p><p>【四次挥手】<br>1.客户端发起断开请求，发送FIN=1和序号c给服务端，客户端进入FIN-WAIT-1状态。<br>2.服务端收到FIN后作出确认，发送ACK=1和服务端序号s,确认号c+1(表示下一个接收序号),服务端此时还可以向客户端发送数据,服务端进入CLOSE-WAIT状态，客户端进入FIN-WAIT-2状态。<br>3.服务端没有数据发送时，它向客户端发送FIN=1,ACK=1,请求断开连接，同时发送服务端序号s，确认号c+1,服务端进入LAST-ACK状态。<br>4.客户端收到之后进行确认，发送ACK=1,以及序号c+1和确认号s+1。客户端进入TIME-WAIT状态，客户端需要等待2MSL,确保服务端收到了ACK，若这期间没有服务端的消息，便可认为服务端收到了确认，此时可以断开连接。服务端和客户端进入CLOSED状态。</p><p><img src="/asset/img/interview-summary/tcp_shake_hand.jpg" alt="TCP三次握手四次挥手"></p><p>为什么这样子设计呢？握手两次行不行？</p><p>两次握手的话，只要服务端发出确认就建立连接了。有一种情况是客户端发出了两次连接请求，但由于某种原因，使得第一次请求被滞留了。第二次请求先到达后建立连接成功，此后第一次请求终于到达，这是一个失效的请求了，服务端以为这是一个新的请求于是同意建立连接，但是此时客户端不搭理服务端，服务端一直处于等待状态，这样就浪费了资源。假设采用三次握手，由于服务端还需要等待客户端的确认，若客户端没有确认，服务端就可以认为客户端没有想要建立连接的意思，于是这次连接不会生效。</p><p>四次握手，为什么客户端发送确认后还需要等待2MSL?</p><p>因为第四次握手客户端发送ACK确认后，有可能丢包了，导致服务端没有收到，服务端就会再次发送FIN = 1，如果客户端不等待立即CLOSED，客户端就不能对服务端的FIN = 1进行确认。等待的目的就是为了能在服务端再次发送FIN = 1时候能进行确认。如果在2MSL内客户端都没有收到服务端的任何消息，便认为服务端收到了确认。此时可以结束TCP连接。</p><blockquote><p>3.有了传输层为什么还要网络层？</p></blockquote><p>网络层是针对主机与主机之间的服务。而传输层针对的是不同主机进程之间的通信。网络层负责将数据包从源IP地址转发到目标IP地址，而传输层负责将数据包再递交给主机中对应端口的进程。</p><blockquote><p>4.TCP序号的作用，怎么样保证可靠传输？</p></blockquote><p>序号和确认号是实现可靠传输的关键。<br>序号-当前数据包的首个字节的顺序号，确认号-表示下一个想要接收的字节序号，并且已经正确收到确认号之前的所有字节。<br>通信双方通过序号和确认号来判断数据是否丢失，是否按顺序到达，是否冗余等等，如果丢失了就重传，如果冗余了就丢弃，换句话说，序号，确认号和重传机制保证了数据不丢失、不重复。</p><blockquote><p>5.TCP和UDP的区别</p></blockquote><ul><li>TCP面向连接，传输数据之前需要建立会话，UDP是无连接的</li><li>TCP是可靠传输，UDP只负责发送数据，不保证接收方是否接收，不保证可靠</li><li>TCP面向字节流，UDP面向报文</li><li>TCP只支持点到点通信，UDP支持点到点、点到面、面到面的通信</li></ul><blockquote><p>6.浏览器的一个HTTP请求到后端的一个大致过程是怎样的？</p></blockquote><p>1.利用DNS进行域名解析(先找本地hosts再找运营商的DNS服务器)<br>2.发起TCP三次握手<br>3.建立TCP连接之后发起HTTP请求<br>4.服务器响应HTTP请求，浏览器得到HTML代码<br>5.浏览器解析HTML代码，并请求HTML代码中的资源(csc,js,image)<br>6.浏览器对页面进行渲染</p><blockquote><p>7.HTTP是基于TCP还是UDP?</p></blockquote><p>HTTP 1.0/1.1 是基于TCP协议，客户端向服务端发送一个HTTP请求时，需要与服务端建立TCP连接，三次握手成功后才会进行数据交互，目前基本上都是HTTP 1.1的。2.0是基于UDP的。</p><blockquote><p>8.HTTP请求和响应的报文结构</p></blockquote><p>HTTP请求报文结构：</p><ul><li>请求头：包括请求方法、URL、HTTP协议版本号</li><li>请求头： 多组键值对</li><li>请求空行：告诉服务器请求头的键值对已经发送完毕</li><li>请求主体</li></ul><p>HTTP响应报文结构：</p><ul><li>响应行：包括HTTP协议版本号、状态码、状态码描述</li><li>响应头：多组键值对</li><li>响应空行：告诉客户端响应头键值对结束</li><li>响应主体</li></ul><blockquote><p>9.HTTP常见的状态码</p></blockquote><ul><li>1xx：信息性状态码，表示接收的请求正在处理</li><li>2xx：成功状态码，表示请求处理完毕</li><li>3xx：重定向状态码，表示需要进行附加操作以完成请求</li><li>4xx：客户端错误状态码，表示服务器无法处理请求</li><li>5xx：服务端错误状态码，表示服务器处理请求出错</li></ul><p>常见的状态码有：</p><ul><li>200 OK,请求被正常处理</li><li>201 created，对象创建成功</li><li>301 Move Permanently，永久性重定向</li><li>302 Found，临时重定向</li><li>400 Bad Request，请求报文中格式不对</li><li>403 Forbidden，对请求的资源没有权限访问</li><li>404 Not Found，在服务器上找不到请求资源</li><li>405 Method Not Allowed，请求方法不允许</li><li>500 Internal Server Error，服务器内部错误</li></ul><blockquote><p>10.GET和POST区别</p></blockquote><ul><li>GET用于获取数据，POST用于提交数据</li><li>GET的参数长度有限制，POST没有限制</li><li>GET把参数放在url中，POST通过封装参数到请求体中发送</li><li>GET请求只能进行url编码，POST支持多种编码方式</li><li>GET比POST参数更不安全，因为参数暴露在url上，所以不能用来传递敏感信息</li><li>GET具有幂等性，多次请求得到的结果一样，POST不具备幂等性，多次请求会有重复提交问题</li><li>GET请求会被浏览器保存为历史记录，POST请求不能</li><li>GET请求产生一个TCP数据包，POST产生两个TCP数据包<br>对于GET请求方式，浏览器会把header和data一起发送出去，服务器接收请求返回数据<br>对于POST请求方式，浏览器先发送header，服务器响应100继续，浏览器在发送data，服务器接收请求返回数据</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote><p>1.常见的排序算法</p></blockquote><p>【冒泡排序】<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length -i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【快速排序】<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> standard = arr[start];</span><br><span class="line">    <span class="keyword">int</span> low = start;</span><br><span class="line">    <span class="keyword">int</span> high = end;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从右边开始，寻找比标准数小的数</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= standard) &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后反方向查找，寻找比标准数大的数</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= standard) &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = arr[low];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = standard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    quickSort(arr, start, low);</span><br><span class="line">    quickSort(arr, low + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【插入排序】<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【希尔排序】<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = arr.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step = step / <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据步长分组之后排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - step; j &gt;= <span class="number">0</span>; j -= step) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + step]) &#123;</span><br><span class="line">            swap(arr, j, j + step);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【选择排序】<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">            minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != minIndex) &#123;</span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><blockquote><p>1.前后端分离是怎么做的？</p></blockquote><blockquote><p>2.说一下RPC实现原理，谈谈Dubbo是怎么实现的？</p></blockquote><blockquote><p>3.你怎么理解RESTful</p></blockquote><blockquote><p>4.如何设计一个良好的API</p></blockquote><blockquote><p>5.如何保证接口的幂等性</p></blockquote><blockquote><p>6.说说CAP理论，BASE理论</p></blockquote><blockquote><p>7.怎么考虑数据一致性问题</p></blockquote><blockquote><p>8.说说最终一致性的实现方案</p></blockquote><blockquote><p>9.如何拆分服务？</p></blockquote><blockquote><p>10.微服务如何进行数据库管理？</p></blockquote><blockquote><p>11.如何应对微服务的链式调用异常</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈最近</title>
      <link href="2018/12/15/talk-recent/"/>
      <url>2018/12/15/talk-recent/</url>
      
        <content type="html"><![CDATA[<p>自从把博客自动化构建弄好了之后工作上就特别的忙，加班有点多，每天都是8点半左右才下班，回去之后太累了，不太想写东西，甚至有时候还要远程再工作一会儿，不过还是发生了挺多事的。</p><a id="more"></a><p>原来的研发中心分成了两个团队，我们团队划分出去，和其他研发团队，运维团队以及解决方案组成了一个新的大BU,然后我的直属主管也调到了其他团队，这算是毕业以来经历的最大的调动，不管是团队还是技术，所以这段时间一直以来就是加班，加班，加班。这段时间做的是SDN相关的事情，月底就要发布了，现在处于项目相对轻松的阶段，终于可以闲下来写点东西了，不过上周五开周会主管说12月份要开始做产品大版本了，要进行微服务化，听说划分了三十几个微服务，可以预见明年又是加班的一年，忙里偷闲写点东西吧，谈谈自己最近的一些想法。</p><h2 id="机遇"><a href="#机遇" class="headerlink" title="机遇"></a>机遇</h2><p>组建了新的部门，人员流动很大，团队的积极性也是最高涨，解决问题也是非常方便了，前后端拉通之后不再跨部门沟通，沟通成本直线下降，很佩服大BOSS的执行力！我们工作虽然没有改变多少，但是对我们团队而言，特别是对我来说，工作上的提升是大家都看得到的，得到了大BOSS，项目经理，一线运维同事的口头邮件等形式的表扬，这些都直接体现在工资绩效上面（捂脸逃~）,而且工作中心移向了SDN和负责一些项目开发管理，自我感觉这半年来在技术上以及处事能力上都比以前好了很多。体现就是在SDN产品开发中，负责相对一些基础组件的开发，其他的功能都是在这个之上进行开发的，所以对我的开发质量和进度都有一定的要求，</p><p>还有就是开始处理一些现场的问题，处理的有点多了，但是印象很深的就是一个线上的MySQL问题，运行一段时间之后应用打开非常慢，根本使用不了，当天主管请假了，让我去处理，机缘巧合的情况下促成了一段线上定位，优化的跌宕起伏经历，以后打算用一篇文章总结出来。</p><h2 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h2><p>为啥讲能力这个问题呢？我承认自己还是一只菜鸟，不过我这只菜鸟要飞了，只要一直飞就行。工作一年半了，发现能力与年龄不是正相关的，甚至可以说跟年龄都没啥关系，非要说有相关性的话，我觉得它们的皮尔逊相关系数最多0.3，不能再多了！</p><p>为什么我一个菜鸟会有这个想法呢？首先我承认，写程序这个事是需要经验积累的，所以现在很多都是招资深的程序员，能力是与经验和经历成正比，皮尔逊系数可以达到0.8，这个不仅仅是程序员这个行业，大多数行业都是一样。有这个想法的原因是因为在我们团队中有一个人最近在办理离职了，称之为Z吧，Z三十了，技术方面不是很好，就是一年经验用了十年这种，所以在前任主管调离的时候他虽然年纪最大，但是得到提携的并不是他，而是一个工作了四年的人。之前和前任主管私下交流过，前任主管说他的技术和经验是严重不匹配的，虽然能干活，但是干的活很坑，坑过不少人，我就被坑过两次，都是我来填坑，以至于后来跟他合作我都得处处考虑会不会有坑。</p><p>其实吧，有坑不可怕，可怕的是挖坑的人没有担当，我也是被迫填坑之后下定决心的，不管任何时候，任何事情，经过自己手的事情就要敢于担当，总结经验教训，这也是我打算写博客记录的原因之一，而勇于承担这个会反哺给我自己，办的事情越靠谱，给到你的机会就会更多，你的经历也就会更多，能力提升也就会越快。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2018/10/03/hello-world/"/>
      <url>2018/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- ![惠灵顿](/asset/img/Wellington.jpg) --><p>在这里总结自己成长的过程，发现自己很多东西都接触了，但都没有做好总结，这样子是不好的，有输入就应该有输出，这个输出应该是及时的。做好总结，提升自己。<br><a id="more"></a><br>现在越来越觉得，技术要的不是广度，而是深度。广度可以在短时间内就可以达成，是一种快消品，而深度不是一朝一夕就可以速成的，需要科班的知识以及后续工作中不断实践做总结才能提升。</p><p>后续博客里边会对写技术的总结以及我的一些感悟。</p><p>GitHub仓库</p><div class="github-widget" data-repo="ruanzz/ruanzz.github.io"></div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
